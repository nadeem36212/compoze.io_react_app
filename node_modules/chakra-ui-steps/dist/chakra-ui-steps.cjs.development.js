'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('@chakra-ui/react');
var spinner = require('@chakra-ui/spinner');
var system = require('@chakra-ui/system');
var themeTools = require('@chakra-ui/theme-tools');
var transition = require('@chakra-ui/transition');
var utils = require('@chakra-ui/utils');
var framerMotion = require('framer-motion');
var React = require('react');
var icon = require('@chakra-ui/icon');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Connector = /*#__PURE__*/React.memo(function (_ref) {
  var isCompletedStep = _ref.isCompletedStep,
      isVertical = _ref.isVertical,
      children = _ref.children,
      isLastStep = _ref.isLastStep,
      hasLabel = _ref.hasLabel;

  var _useStyles = system.useStyles(),
      connector = _useStyles.connector,
      stepIconContainer = _useStyles.stepIconContainer;

  var connectorStyles = _extends({
    flex: 1,
    display: 'flex'
  }, connector);

  var getMargin = function getMargin() {
    if (isVertical) return "calc(" + stepIconContainer.width + " / 2)";
    if (!hasLabel) return 2;
    return 0;
  };

  return React.createElement(system.chakra.div, {
    __css: _extends({
      ms: getMargin(),
      my: isVertical ? 2 : 0,
      ps: isVertical ? 4 : 0,
      me: isVertical ? 0 : 2,
      height: isVertical ? 'auto' : '2px',
      alignSelf: isVertical ? 'stretch' : 'auto',
      borderTopWidth: isLastStep || isVertical ? 0 : '2px',
      borderInlineStartWidth: isLastStep || !isVertical ? 0 : '2px',
      minHeight: isLastStep || !isVertical ? 'auto' : '1.5rem',
      borderColor: connector.borderColor
    }, connectorStyles),
    "data-highlighted": utils.dataAttr(isCompletedStep)
  }, isVertical && children);
});

var CheckIcon = /*#__PURE__*/icon.createIcon({
  viewBox: '0 0 14 14',
  path: /*#__PURE__*/React.createElement("g", {
    fill: "currentColor"
  }, /*#__PURE__*/React.createElement("polygon", {
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }))
});

var CloseIcon = /*#__PURE__*/icon.createIcon({
  displayName: 'CloseIcon',
  d: 'M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z'
});

var _excluded = ["checkIcon", "children", "colorScheme", "description", "icon", "index", "isCompletedStep", "isCurrentStep", "isLastStep", "label", "orientation", "state", "clickable", "onClickStep"];
var MotionFlex = /*#__PURE__*/framerMotion.motion(react.Flex);
var AnimatedCloseIcon = /*#__PURE__*/framerMotion.motion(CloseIcon);
var AnimatedSpan = /*#__PURE__*/framerMotion.motion(system.chakra.span);
var animationConfig = {
  transition: {
    duration: 0.15
  },
  exit: {
    scale: 0,
    opacity: 0
  },
  initial: {
    scale: 0,
    opacity: 0
  },
  animate: {
    scale: 1,
    opacity: 1
  }
};
var Step = /*#__PURE__*/system.forwardRef(function (props, ref) {
  var CustomCheckIcon = props.checkIcon,
      children = props.children,
      c = props.colorScheme,
      descriptionProp = props.description,
      CustomIcon = props.icon,
      index = props.index,
      isCompletedStep = props.isCompletedStep,
      isCurrentStep = props.isCurrentStep,
      isLastStep = props.isLastStep,
      labelProp = props.label,
      orientation = props.orientation,
      state = props.state,
      clickable = props.clickable,
      onClickStep = props.onClickStep,
      styleProps = _objectWithoutPropertiesLoose(props, _excluded);

  var Icon = React.useMemo(function () {
    return CustomIcon ? CustomIcon : null;
  }, [CustomIcon]);
  var Check = React.useMemo(function () {
    return CustomCheckIcon ? CustomCheckIcon : CheckIcon;
  }, [CustomCheckIcon]);

  var _useStyles = system.useStyles(),
      description = _useStyles.description,
      icon = _useStyles.icon,
      label = _useStyles.label,
      labelContainer = _useStyles.labelContainer,
      step = _useStyles.step,
      stepContainer = _useStyles.stepContainer,
      stepIconContainer = _useStyles.stepIconContainer;

  var stepStyles = _extends({
    display: 'flex',
    position: 'relative'
  }, step);

  var stepIconContainerStyles = _extends({
    display: 'flex',
    borderRadius: '50%',
    alignItems: 'center',
    justifyContent: 'center'
  }, stepIconContainer);

  var labelStyles = _extends({
    fontWeight: 'medium',
    color: themeTools.mode("gray.900", "gray.100")(props),
    textAlign: 'center',
    fontSize: 'md'
  }, label);

  var descriptionStyles = _extends({
    marginTop: '-2px',
    color: themeTools.mode("gray.800", "gray.200")(props),
    textAlign: 'center',
    fontSize: 'sm'
  }, description);

  var isError = state === 'error';
  var isLoading = state === 'loading';
  var hasVisited = isCurrentStep || isCompletedStep;
  var opacity = hasVisited ? 1 : 0.8;
  var isVertical = orientation === 'vertical';

  var handleClick = function handleClick(index) {
    if (clickable && onClickStep) {
      onClickStep(index);
    }
  };

  var renderIcon = React.useMemo(function () {
    if (isCompletedStep) {
      return React.createElement(MotionFlex, Object.assign({
        key: "check-icon"
      }, animationConfig), React.createElement(Check, {
        color: "white",
        style: icon
      }));
    }

    if (isCurrentStep) {
      if (isError) return React.createElement(AnimatedCloseIcon, Object.assign({
        key: "icon",
        color: "white"
      }, animationConfig, {
        style: icon
      }));
      if (isLoading) return React.createElement(spinner.Spinner, {
        width: icon.width,
        height: icon.height
      });
    }

    if (Icon) return React.createElement(MotionFlex, Object.assign({
      key: "step-icon"
    }, animationConfig), React.createElement(Icon, {
      style: icon
    }));
    return React.createElement(AnimatedSpan, Object.assign({
      key: "label",
      __css: labelStyles
    }, animationConfig), (index || 0) + 1);
  }, [isCompletedStep, isCurrentStep, isError, isLoading, Icon, icon]);
  return React.createElement(React.Fragment, null, React.createElement(system.chakra.div, Object.assign({
    ref: ref
  }, styleProps, {
    onClick: function onClick() {
      return handleClick(index);
    },
    "aria-disabled": !hasVisited,
    __css: _extends({
      opacity: opacity,
      flexDir: isVertical ? 'column' : 'row',
      alignItems: isVertical ? 'flex-start' : 'center',
      flex: isLastStep && !isVertical ? '0 0 auto' : '1 0 auto',
      justifyContent: isLastStep && !isVertical ? 'flex-end' : 'flex-start',
      _hover: {
        cursor: clickable ? 'pointer' : 'default'
      }
    }, stepStyles)
  }), React.createElement(system.chakra.div, {
    __css: _extends({
      display: 'flex',
      flexDir: 'row',
      alignItems: 'center'
    }, stepContainer)
  }, React.createElement(system.chakra.div, {
    __css: stepIconContainerStyles,
    "aria-current": isCurrentStep ? 'step' : undefined,
    "data-invalid": utils.dataAttr(isCurrentStep && isError),
    "data-highlighted": utils.dataAttr(isCompletedStep),
    "data-clickable": utils.dataAttr(clickable)
  }, React.createElement(framerMotion.AnimatePresence, {
    exitBeforeEnter: true
  }, renderIcon)), React.createElement(system.chakra.div, {
    "aria-current": isCurrentStep,
    __css: _extends({
      display: 'flex',
      flexDir: 'column',
      justifyContent: 'center',
      alignItems: 'flex-start'
    }, labelContainer)
  }, !!labelProp && React.createElement(system.chakra.span, {
    __css: _extends({
      mx: 2,
      opacity: opacity
    }, labelStyles)
  }, labelProp), !!descriptionProp && React.createElement(system.chakra.span, {
    __css: _extends({
      mx: 2,
      opacity: opacity
    }, descriptionStyles)
  }, descriptionProp))), React.createElement(Connector, {
    colorScheme: c,
    isLastStep: isLastStep,
    isVertical: isVertical,
    isCompletedStep: isCompletedStep || false,
    hasLabel: !!labelProp || !!descriptionProp
  }, React.createElement(transition.Collapse, {
    style: {
      width: '100%'
    },
    "in": isCurrentStep
  }, (isCurrentStep || isCompletedStep) && children))));
});

var _excluded$1 = ["className", "activeStep", "children", "orientation", "state", "responsive", "checkIcon", "onClickStep"];
var Steps = /*#__PURE__*/system.forwardRef(function (props, ref) {
  var styles = system.useMultiStyleConfig('Steps', props);

  var stepsStyles = _extends({
    fontFamily: 'heading',
    textAlign: 'center',
    width: '100%',
    display: 'flex',
    flex: 1
  }, styles.steps);

  var _omitThemingProps = system.omitThemingProps(props),
      className = _omitThemingProps.className,
      activeStep = _omitThemingProps.activeStep,
      children = _omitThemingProps.children,
      orientationProp = _omitThemingProps.orientation,
      state = _omitThemingProps.state,
      responsive = _omitThemingProps.responsive,
      checkIcon = _omitThemingProps.checkIcon,
      onClickStep = _omitThemingProps.onClickStep,
      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);

  var childArr = React.Children.toArray(children);
  var stepCount = childArr.length;

  var renderHorizontalContent = function renderHorizontalContent() {
    if (activeStep <= childArr.length) {
      return React.Children.map(childArr[activeStep], function (node) {
        if (!React.isValidElement(node)) return;
        return React.Children.map(node.props.children, function (childNode) {
          return childNode;
        });
      });
    }

    return null;
  };

  var clickable = !!onClickStep;

  var _useMediaQuery = react.useMediaQuery('(max-width: 43em)'),
      isMobile = _useMediaQuery[0];

  var orientation = isMobile && responsive ? 'vertical' : orientationProp;
  return React.createElement(system.StylesProvider, {
    value: styles
  }, React.createElement(system.chakra.div, Object.assign({
    ref: ref,
    __css: _extends({
      justifyContent: stepCount === 1 ? 'flex-end' : 'space-between',
      flexDir: orientation === 'vertical' ? 'column' : 'row'
    }, stepsStyles),
    className: utils.cx('chakra-steps', className)
  }, rest), React.Children.map(children, function (child, i) {
    var _ref;

    var isCompletedStep = (_ref = React.isValidElement(child) && child.props.isCompletedStep) != null ? _ref : i < activeStep;
    var isLastStep = i === stepCount - 1;
    var isCurrentStep = i === activeStep;
    var stepProps = {
      index: i,
      colorScheme: props.colorScheme,
      isCompletedStep: isCompletedStep,
      isCurrentStep: isCurrentStep,
      isLastStep: isLastStep,
      orientation: orientation,
      state: state,
      checkIcon: checkIcon,
      clickable: clickable,
      onClickStep: onClickStep
    };
    return React.isValidElement(child) ? React.cloneElement(child, stepProps) : null;
  })), orientation === 'horizontal' && renderHorizontalContent());
});
Steps.defaultProps = {
  activeStep: 0,
  colorScheme: 'green',
  orientation: 'horizontal',
  responsive: true
};

function useSteps(_ref) {
  var initialStep = _ref.initialStep;

  var _React$useState = React.useState(initialStep),
      activeStep = _React$useState[0],
      setActiveStep = _React$useState[1];

  var nextStep = function nextStep() {
    setActiveStep(function (prev) {
      return prev + 1;
    });
  };

  var prevStep = function prevStep() {
    setActiveStep(function (prev) {
      return prev - 1;
    });
  };

  var reset = function reset() {
    setActiveStep(initialStep);
  };

  var setStep = function setStep(step) {
    setActiveStep(step);
  };

  return {
    nextStep: nextStep,
    prevStep: prevStep,
    reset: reset,
    setStep: setStep,
    activeStep: activeStep
  };
}

var parts = /*#__PURE__*/themeTools.anatomy('steps').parts('connector', 'description', 'icon', 'label', 'labelContainer', 'step', 'stepContainer', 'stepIconContainer', 'steps');
var baseStyleIcon = {
  strokeWidth: '2px'
};

var baseStyleLabel = function baseStyleLabel(props) {
  return {
    color: themeTools.mode("gray.900", "gray.100")(props)
  };
};

var baseStyleDescription = function baseStyleDescription(props) {
  return {
    color: themeTools.mode("gray.800", "gray.200")(props)
  };
};

var baseStyleConnector = function baseStyleConnector(props) {
  var c = props.colorScheme;
  var inactiveColor = themeTools.mode('gray.200', 'gray.700')(props);
  var activeColor = themeTools.mode(c + ".500", c + ".200")(props);
  return {
    borderColor: inactiveColor,
    transitionProperty: 'border-color',
    transitionDuration: 'normal',
    _highlighted: {
      borderColor: activeColor
    }
  };
};

var baseStyleStepIconContainer = function baseStyleStepIconContainer(props) {
  var c = props.colorScheme;
  var inactiveColor = themeTools.mode('gray.200', 'gray.700')(props);
  var activeColor = c + ".500";
  return {
    bg: inactiveColor,
    borderColor: inactiveColor,
    transitionProperty: 'background, border-color',
    transitionDuration: 'normal',
    _activeStep: {
      bg: themeTools.mode(themeTools.darken(inactiveColor, 0.5), themeTools.lighten(inactiveColor, 0.5))(props),
      borderColor: activeColor,
      _invalid: {
        bg: 'red.500',
        borderColor: 'red.500'
      }
    },
    _highlighted: {
      bg: activeColor,
      borderColor: activeColor
    },
    '&[data-clickable]:hover': {
      borderColor: activeColor
    }
  };
};

var baseStyle = function baseStyle(props) {
  return {
    connector: baseStyleConnector(props),
    description: baseStyleDescription(props),
    icon: baseStyleIcon,
    label: baseStyleLabel(props),
    labelContainer: {},
    step: {},
    stepContainer: {},
    stepIconContainer: baseStyleStepIconContainer(props),
    steps: {}
  };
};

var sizes = {
  sm: {
    stepIconContainer: {
      width: '32px',
      height: '32px',
      borderWidth: '2px'
    },
    icon: {
      width: '14px',
      height: '14px'
    },
    label: {
      fontWeight: 'medium',
      textAlign: 'center',
      fontSize: 'sm'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'xs'
    }
  },
  md: {
    stepIconContainer: {
      width: '40px',
      height: '40px',
      borderWidth: '2px'
    },
    icon: {
      width: '18px',
      height: '18px'
    },
    label: {
      fontWeight: 'medium',
      textAlign: 'center',
      fontSize: 'md'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'sm'
    }
  },
  lg: {
    stepIconContainer: {
      width: '48px',
      height: '48px',
      borderWidth: '2px'
    },
    icon: {
      width: '22px',
      height: '22px'
    },
    label: {
      fontWeight: 'bold',
      textAlign: 'center',
      fontSize: 'lg'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'md'
    }
  }
};
var defaultProps = {
  size: 'md',
  colorScheme: 'green'
};
var StepsStyleConfig = {
  parts: parts.keys,
  baseStyle: baseStyle,
  sizes: sizes,
  defaultProps: defaultProps
};

exports.Step = Step;
exports.Steps = Steps;
exports.StepsStyleConfig = StepsStyleConfig;
exports.useSteps = useSteps;
//# sourceMappingURL=chakra-ui-steps.cjs.development.js.map
