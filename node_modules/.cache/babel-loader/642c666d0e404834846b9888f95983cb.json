{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport var getSigningKey = function getSigningKey(sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n    var e_1, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4 /*yield*/, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n          if (cacheKey in signingKeyCache) {\n            return [2 /*return*/, signingKeyCache[cacheKey]];\n          }\n          cacheQueue.push(cacheKey);\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n        case 3:\n          if (!!_b.done) return [3 /*break*/, 6];\n          signable = _b.value;\n          return [4 /*yield*/, hmac(sha256Constructor, key, signable)];\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n        case 5:\n          _b = _a.next();\n          return [3 /*break*/, 3];\n        case 6:\n          return [3 /*break*/, 9];\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3 /*break*/, 9];\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n          return [7 /*endfinally*/];\n        case 9:\n          return [2 /*return*/, signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":{"version":3,"sources":["../../src/credentialDerivation.ts"],"names":[],"mappings":";AACA,SAAS,KAAK,QAAQ,4BAA4B;AAElD,SAAS,mBAAmB,EAAE,cAAc,QAAQ,aAAa;AAEjE,IAAM,eAAe,GAAkC,CAAA,CAAE;AACzD,IAAM,UAAU,GAAkB,EAAE;AAEpC;;;;;;AAMG;AACH,OAAM,SAAU,WAAW,CAAC,SAAiB,EAAE,MAAc,EAAE,OAAe,EAAA;EAC5E,OAAU,SAAS,GAAA,GAAA,GAAI,MAAM,GAAA,GAAA,GAAI,OAAO,GAAA,GAAA,GAAI,mBAAqB;AACnE;AAEA;;;;;;;;;;;AAWG;AACH,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAa,CACxB,iBAAkC,EAClC,WAAwB,EACxB,SAAiB,EACjB,MAAc,EACd,OAAe,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;UAEG,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,iBAAiB,EAAE,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,WAAW,CAAC,CAAA;;UAA/F,SAAS,GAAG,EAAA,CAAA,IAAA,EAAmF;UAC/F,QAAQ,GAAM,SAAS,GAAA,GAAA,GAAI,MAAM,GAAA,GAAA,GAAI,OAAO,GAAA,GAAA,GAAI,KAAK,CAAC,SAAS,CAAC,GAAA,GAAA,GAAI,WAAW,CAAC,YAAc;UACpG,IAAI,QAAQ,IAAI,eAAe,EAAE;YAC/B,OAAA,CAAA,CAAA,CAAA,YAAO,eAAe,CAAC,QAAQ,CAAC,CAAA;UACjC;UAED,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;UACzB,OAAO,UAAU,CAAC,MAAM,GAAG,cAAc,EAAE;YACzC,OAAO,eAAe,CAAC,UAAU,CAAC,KAAK,EAAY,CAAC;UACrD;UAEG,GAAG,GAAe,MAAA,GAAO,WAAW,CAAC,eAAiB;;;;UACnC,EAAA,GAAA,QAAA,CAAA,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA;;;;UAA7D,QAAQ,GAAA,EAAA,CAAA,KAAA;UACX,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAA;;UAAlD,GAAG,GAAG,EAAA,CAAA,IAAA,EAA4C;;;;;;;;;;;;;;;;;;;;;UAEpD,OAAA,CAAA,CAAA,CAAA,YAAQ,eAAe,CAAC,QAAQ,CAAC,GAAG,GAAiB,CAAC;MAAC;;;CACxD;AAED;;AAEG;AACH,OAAM,SAAU,oBAAoB,GAAA;EAClC,UAAU,CAAC,MAAM,GAAG,CAAC;EACrB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAA;IAC5C,OAAO,eAAe,CAAC,QAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AAEA,SAAS,IAAI,CAAC,IAAqB,EAAE,MAAkB,EAAE,IAAgB,EAAA;EACvE,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC;EAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;EACjB,OAAO,IAAI,CAAC,MAAM,EAAE;AACtB","sourcesContent":["import { Credentials, HashConstructor, SourceData } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\n\nconst signingKeyCache: { [key: string]: Uint8Array } = {};\nconst cacheQueue: Array<string> = [];\n\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate: string, region: string, service: string): string {\n  return `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\n}\n\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport const getSigningKey = async (\n  sha256Constructor: HashConstructor,\n  credentials: Credentials,\n  shortDate: string,\n  region: string,\n  service: string\n): Promise<Uint8Array> => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift() as string];\n  }\n\n  let key: SourceData = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return (signingKeyCache[cacheKey] = key as Uint8Array);\n};\n\n/**\n * @internal\n */\nexport function clearCredentialCache(): void {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach((cacheKey) => {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor: HashConstructor, secret: SourceData, data: SourceData): Promise<Uint8Array> {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}