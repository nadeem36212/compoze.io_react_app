{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\nvar IndexedDbStorage = /** @class */function () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n    this.dbName = dbName;\n  }\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = function () {\n        return db.close();\n      };\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n  return IndexedDbStorage;\n}();\nexport { IndexedDbStorage };","map":{"version":3,"sources":["../../src/IndexedDbStorage.ts"],"names":[],"mappings":"AAEA,IAAM,UAAU,GAAG,aAAa;AAEhC,IAAA,gBAAA,GAAA,aAAA,YAAA;EACE,SAAA,gBAAA,CAA6B,MAA2C,EAAA;IAA3C,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,0BAA2C;IAAA;IAA3C,IAAA,CAAA,MAAM,GAAN,MAAM;EAAwC;EAE3E,gBAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,GAAW,EAAA;IACjB,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,UAAC,KAAK,EAAA;MAC5C,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MAE1B,OAAO,IAAI,OAAO,CAAgB,UAAC,OAAO,EAAA;QACxC,GAAG,CAAC,OAAO,GAAG,YAAA;UAAM,OAAA,OAAO,CAAC,IAAI,CAAC;QAAb,CAAa;QAEjC,GAAG,CAAC,SAAS,GAAG,YAAA;UAAM,OAAA,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QAA7C,CAA6C;MACrE,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,KAAK,CAAC,YAAA;MAAM,OAAA,IAAI;IAAJ,CAAI,CAAC;EACtB,CAAC;EAED,gBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,GAAW,EAAA;IACpB,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,UAAC,KAAK,EAAA;MAC7C,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;MAE7B,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM,EAAA;QACvC,GAAG,CAAC,OAAO,GAAG,YAAA;UAAM,OAAA,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;QAAjB,CAAiB;QAErC,GAAG,CAAC,SAAS,GAAG,YAAA;UAAM,OAAA,OAAO,EAAE;QAAT,CAAS;MACjC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,gBAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,EAAU,EAAE,KAAa,EAAA;IAC/B,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,UAAC,KAAK,EAAA;MAC7C,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAAE,EAAE,EAAA,EAAA;QAAE,KAAK,EAAA;MAAA,CAAE,CAAC;MAEpC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM,EAAA;QACvC,GAAG,CAAC,OAAO,GAAG,YAAA;UAAM,OAAA,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;QAAjB,CAAiB;QAErC,GAAG,CAAC,SAAS,GAAG,YAAA;UAAM,OAAA,OAAO,EAAE;QAAT,CAAS;MACjC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAEO,gBAAA,CAAA,SAAA,CAAA,KAAK,GAAb,YAAA;IACE,IAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACzD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MACjC,aAAa,CAAC,SAAS,GAAG,YAAA;QACxB,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC;MAC/B,CAAC;MAED,aAAa,CAAC,OAAO,GAAG,YAAA;QACtB,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;MAC7B,CAAC;MAED,aAAa,CAAC,SAAS,GAAG,YAAA;QACxB,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;MAC1C,CAAC;MAED,aAAa,CAAC,eAAe,GAAG,YAAA;QAC9B,IAAM,EAAE,GAAG,aAAa,CAAC,MAAM;QAC/B,EAAE,CAAC,OAAO,GAAG,YAAA;UACX,MAAM,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACpD,CAAC;QAED,EAAE,CAAC,iBAAiB,CAAC,UAAU,EAAE;UAAE,OAAO,EAAE;QAAI,CAAE,CAAC;MACrD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEO,gBAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAA2B,IAAwB,EAAE,MAA6C,EAAA;IAChG,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAC,EAAE,EAAA;MAC1B,IAAM,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC;MAC3C,EAAE,CAAC,UAAU,GAAG,YAAA;QAAM,OAAA,EAAE,CAAC,KAAK,EAAE;MAAV,CAAU;MAEhC,OAAO,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM,EAAA;QACpC,EAAE,CAAC,OAAO,GAAG,YAAA;UAAM,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC;QAAhB,CAAgB;QAEnC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG,EAAA;QACX,EAAE,CAAC,KAAK,EAAE;QACV,MAAM,GAAG;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,gBAAC;AAAD,CAAC,EAAA","sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}