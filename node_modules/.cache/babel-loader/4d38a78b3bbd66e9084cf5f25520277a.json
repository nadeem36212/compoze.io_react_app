{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getCompliance } from './complianceAPI';\nvar initialState = {\n  accountsCompliances: undefined\n};\nexport var fetchCompliance = createAsyncThunk('compliance/fetch', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n  var compliances;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getCompliance();\n        case 2:\n          compliances = _context.sent;\n          return _context.abrupt(\"return\", compliances);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport var selectCompliance = function selectCompliance(state) {\n  return state.compliance.accountsCompliances;\n};\nexport var complianceSlice = createSlice({\n  name: 'compliance',\n  initialState: initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchCompliance.fulfilled, function (state, action) {\n      state.accountsCompliances = action.payload;\n    });\n  }\n});\nexport default complianceSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getCompliance","initialState","accountsCompliances","undefined","fetchCompliance","compliances","selectCompliance","state","compliance","complianceSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","reducer"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/compliance/compliantSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { getCompliance } from './complianceAPI';\n\nexport interface AccountComplianceSummary {\n  accountId: string;\n  id: string;\n  nickName: string;\n  complianceSummary: ComplianceSummary\n}\n\nexport interface ComplianceSummary {\n  ruleCompliance: Summary\n  resourceCompliance: Summary\n}\nexport interface Summary {\n  compliantResources: number;\n  compliantExceeded: boolean;\n  nonComplianceResources: number;\n  nonComplianceExeeded: boolean;\n}\n\nexport interface ComplianceState {\n  accountsCompliances: AccountComplianceSummary[] | undefined\n}\n\nconst initialState: ComplianceState = {\n  accountsCompliances: undefined\n};\n\nexport const fetchCompliance = createAsyncThunk(\n  'compliance/fetch',\n  async () => {\n    const compliances: AccountComplianceSummary[] = await getCompliance()\n    // const response = await getCosts(orgId);\n\n    // The value we return becomes the `fulfilled` action payload\n    return compliances;\n  }\n);\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCompliance = (state: RootState) => state.compliance.accountsCompliances;\n\n\nexport const complianceSlice = createSlice({\n  name: 'compliance',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompliance.fulfilled, (state, action) => {\n        state.accountsCompliances = action.payload;\n      });\n  },\n\n});\n\n\nexport default complianceSlice.reducer;\n"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,aAAa,QAAQ,iBAAiB;AAwB/C,IAAMC,YAA6B,GAAG;EACpCC,mBAAmB,EAAEC;AACvB,CAAC;AAED,OAAO,IAAMC,eAAe,GAAGN,gBAAgB,CAC7C,kBAAkB,0EAClB;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,OACwDE,aAAa,EAAE;QAAA;UAA/DK,WAAuC;UAAA,iCAItCA,WAAW;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CACnB,GACF;AACD;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,KAAgB;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACN,mBAAmB;AAAA;AAG1F,OAAO,IAAMO,eAAe,GAAGV,WAAW,CAAC;EACzCW,IAAI,EAAE,YAAY;EAClBT,YAAY,EAAZA,YAAY;EACZ;EACAU,QAAQ,EAAE,CAEV,CAAC;EACD;EACA;EACAC,aAAa,EAAE,uBAACC,OAAO,EAAK;IAC1BA,OAAO,CACJC,OAAO,CAACV,eAAe,CAACW,SAAS,EAAE,UAACR,KAAK,EAAES,MAAM,EAAK;MACrDT,KAAK,CAACL,mBAAmB,GAAGc,MAAM,CAACC,OAAO;IAC5C,CAAC,CAAC;EACN;AAEF,CAAC,CAAC;AAGF,eAAeR,eAAe,CAACS,OAAO"},"metadata":{},"sourceType":"module"}