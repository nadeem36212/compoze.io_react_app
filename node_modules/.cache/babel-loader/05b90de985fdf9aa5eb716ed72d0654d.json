{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar isEmptyData_1 = require(\"./isEmptyData\");\nvar constants_1 = require(\"./constants\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  }\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.finish();\n      });\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"sources":["../src/ie11Sha256.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}