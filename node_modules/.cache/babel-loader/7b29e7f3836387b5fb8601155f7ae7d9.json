{"ast":null,"code":"/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar Mutex = /** @class */function () {\n  function Mutex() {\n    this._queue = [];\n    this._pending = false;\n  }\n  Mutex.prototype.isLocked = function () {\n    return this._pending;\n  };\n  Mutex.prototype.acquire = function () {\n    var _this = this;\n    var ticket = new Promise(function (resolve) {\n      return _this._queue.push(resolve);\n    });\n    if (!this._pending) {\n      this._dispatchNext();\n    }\n    return ticket;\n  };\n  Mutex.prototype.runExclusive = function (callback) {\n    return this.acquire().then(function (release) {\n      var result;\n      try {\n        result = callback();\n      } catch (e) {\n        release();\n        throw e;\n      }\n      return Promise.resolve(result).then(function (x) {\n        return release(), x;\n      }, function (e) {\n        release();\n        throw e;\n      });\n    });\n  };\n  Mutex.prototype._dispatchNext = function () {\n    if (this._queue.length > 0) {\n      this._pending = true;\n      this._queue.shift()(this._dispatchNext.bind(this));\n    } else {\n      this._pending = false;\n    }\n  };\n  return Mutex;\n}();\nexport default Mutex;","map":{"version":3,"sources":["../../src/Util/Mutex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBG;AAoBH,IAAA,KAAA,GAAA,aAAA,YAAA;EAAA,SAAA,KAAA,GAAA;IA+CS,IAAA,CAAA,MAAM,GAAsD,EAAE;IAC9D,IAAA,CAAA,QAAQ,GAAG,KAAK;EACzB;EAhDC,KAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACC,OAAO,IAAI,CAAC,QAAQ;EACrB,CAAC;EAED,KAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACC,IAAM,MAAM,GAAG,IAAI,OAAO,CAA0B,UAAA,OAAO,EAAA;MAC1D,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IAAzB,CAAyB,CACzB;IAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,IAAI,CAAC,aAAa,EAAE;IACpB;IAED,OAAO,MAAM;EACd,CAAC;EAED,KAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAgB,QAAkC,EAAA;IACjD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO,EAAA;MACjC,IAAI,MAAsB;MAE1B,IAAI;QACH,MAAM,GAAG,QAAQ,EAAE;OACnB,CAAC,OAAO,CAAC,EAAE;QACX,OAAO,EAAE;QACT,MAAM,CAAC;MACP;MAED,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAClC,UAAC,CAAI,EAAA;QAAK,OAAC,OAAO,EAAE,EAAE,CAAC;MAAb,CAAc,EACxB,UAAA,CAAC,EAAA;QACA,OAAO,EAAE;QACT,MAAM,CAAC;MACR,CAAC,CACD;IACF,CAAC,CAAC;EACH,CAAC;EAEO,KAAA,CAAA,SAAA,CAAA,aAAa,GAArB,YAAA;IACC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI;MACpB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAG,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnD,MAAM;MACN,IAAI,CAAC,QAAQ,GAAG,KAAK;IACrB;EACF,CAAC;EAIF,OAAA,KAAC;AAAD,CAAC,EAAA;AAED,eAAe,KAAK","sourceRoot":"","sourcesContent":["/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar Mutex = /** @class */ (function () {\n    function Mutex() {\n        this._queue = [];\n        this._pending = false;\n    }\n    Mutex.prototype.isLocked = function () {\n        return this._pending;\n    };\n    Mutex.prototype.acquire = function () {\n        var _this = this;\n        var ticket = new Promise(function (resolve) {\n            return _this._queue.push(resolve);\n        });\n        if (!this._pending) {\n            this._dispatchNext();\n        }\n        return ticket;\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this.acquire().then(function (release) {\n            var result;\n            try {\n                result = callback();\n            }\n            catch (e) {\n                release();\n                throw e;\n            }\n            return Promise.resolve(result).then(function (x) { return (release(), x); }, function (e) {\n                release();\n                throw e;\n            });\n        });\n    };\n    Mutex.prototype._dispatchNext = function () {\n        if (this._queue.length > 0) {\n            this._pending = true;\n            this._queue.shift()(this._dispatchNext.bind(this));\n        }\n        else {\n            this._pending = false;\n        }\n    };\n    return Mutex;\n}());\nexport default Mutex;\n//# sourceMappingURL=Mutex.js.map"]},"metadata":{},"sourceType":"module"}