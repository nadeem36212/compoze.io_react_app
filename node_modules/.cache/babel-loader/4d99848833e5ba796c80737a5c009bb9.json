{"ast":null,"code":"/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */function () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function get() {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n    if (scope === void 0) {\n      scope = '/';\n    }\n    this._logger.debug(\"registering \" + filePath);\n    this._logger.debug(\"registering service worker with scope \" + scope);\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n          _this._registration = registration;\n          _this._setupListeners();\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n  return ServiceWorkerClass;\n}();\nexport { ServiceWorkerClass };\n/**\n * @deprecated use named import\n */\nexport default ServiceWorkerClass;","map":{"version":3,"sources":["../../src/ServiceWorker/ServiceWorker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */ (function () {\n    function ServiceWorkerClass() {\n        // The AWS Amplify logger\n        this._logger = new Logger('ServiceWorker');\n    }\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n        /**\n         * Get the currently active service worker\n         */\n        get: function () {\n            return this._serviceWorker;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\n        var _this = this;\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\n        if (scope === void 0) { scope = '/'; }\n        this._logger.debug(\"registering \" + filePath);\n        this._logger.debug(\"registering service worker with scope \" + scope);\n        return new Promise(function (resolve, reject) {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker\n                    .register(filePath, {\n                    scope: scope,\n                })\n                    .then(function (registration) {\n                    if (registration.installing) {\n                        _this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        _this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        _this._serviceWorker = registration.active;\n                    }\n                    _this._registration = registration;\n                    _this._setupListeners();\n                    _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n                    return resolve(registration);\n                })\n                    .catch(function (error) {\n                    _this._logger.debug(\"Service Worker Registration Failed \" + error);\n                    return reject(error);\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n        var _this = this;\n        if (!this._registration)\n            throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise(function (resolve, reject) {\n            if (browserOrNode().isBrowser) {\n                _this._registration.pushManager.getSubscription().then(function (subscription) {\n                    if (subscription) {\n                        _this._subscription = subscription;\n                        _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n                        resolve(subscription);\n                    }\n                    else {\n                        _this._logger.debug(\"User is NOT subscribed to push\");\n                        return _this._registration.pushManager\n                            .subscribe({\n                            userVisibleOnly: true,\n                            applicationServerKey: _this._urlB64ToUint8Array(publicKey),\n                        })\n                            .then(function (subscription) {\n                            _this._subscription = subscription;\n                            _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n                            resolve(subscription);\n                        })\n                            .catch(function (error) {\n                            _this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (var i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    };\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n     *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    ServiceWorkerClass.prototype.send = function (message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    };\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    ServiceWorkerClass.prototype._setupListeners = function () {\n        var _this = this;\n        this._serviceWorker.addEventListener('statechange', function (event) {\n            var currentState = _this._serviceWorker.state;\n            _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n            if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n                Amplify.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        state: currentState,\n                    },\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', function (event) {\n            _this._logger.debug(\"ServiceWorker message event: \" + event);\n        });\n    };\n    return ServiceWorkerClass;\n}());\nexport { ServiceWorkerClass };\n/**\n * @deprecated use named import\n */\nexport default ServiceWorkerClass;\n//# sourceMappingURL=ServiceWorker.js.map"]},"metadata":{},"sourceType":"module"}