{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\nvar FetchHttpHandler = /** @class */function () {\n  function FetchHttpHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      requestTimeout = _b.requestTimeout;\n    this.requestTimeout = requestTimeout;\n  }\n  FetchHttpHandler.prototype.destroy = function () {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  };\n  FetchHttpHandler.prototype.handle = function (request, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      abortSignal = _b.abortSignal;\n    var requestTimeoutInMs = this.requestTimeout;\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n    var path = request.path;\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n    var port = request.port,\n      method = request.method;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    var body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    var requestOptions = {\n      body: body,\n      headers: new Headers(request.headers),\n      method: method\n    };\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var hasReadableStream = response.body !== undefined;\n      // Return the response with buffered body\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      }\n      // Return the response with streaming body\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n    return Promise.race(raceOfPromises);\n  };\n  return FetchHttpHandler;\n}();\nexport { FetchHttpHandler };","map":{"version":3,"sources":["../../src/fetch-http-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface FetchHttpHandlerOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  private readonly requestTimeout?: number;\n\n  constructor({ requestTimeout }: FetchHttpHandlerOptions = {}) {\n    this.requestTimeout = requestTimeout;\n  }\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  }\n\n  handle(request: HttpRequest, { abortSignal }: HttpHandlerOptions = {}): Promise<{ response: HttpResponse }> {\n    const requestTimeoutInMs = this.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const { port, method } = request;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions: RequestInit = {\n      body,\n      headers: new Headers(request.headers),\n      method: method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}