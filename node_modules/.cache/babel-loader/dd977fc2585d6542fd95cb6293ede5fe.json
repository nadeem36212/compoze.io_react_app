{"ast":null,"code":"import { __assign, __read, __rest, __spread } from \"tslib\";\n/**\n * @internal\n */\nexport function cloneRequest(_a) {\n  var headers = _a.headers,\n    query = _a.query,\n    rest = __rest(_a, [\"headers\", \"query\"]);\n  return __assign(__assign({}, rest), {\n    headers: __assign({}, headers),\n    query: query ? cloneQuery(query) : undefined\n  });\n}\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce(function (carry, paramName) {\n    var _a;\n    var param = query[paramName];\n    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));\n  }, {});\n}","map":{"version":3,"sources":["../../src/cloneRequest.ts"],"names":[],"mappings":";AAEA;;AAEG;AACH,OAAM,SAAU,YAAY,CAAC,EAAwC,EAAA;EAAtC,IAAA,OAAO,GAAA,EAAA,CAAA,OAAA;IAAE,KAAK,GAAA,EAAA,CAAA,KAAA;IAAK,IAAI,GAAA,MAAA,CAAA,EAAA,EAAzB,CAAA,SAAA,EAAA,OAAA,CAA2B,CAAF;EACpD,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,IAAI,CAAA,EAAA;IACP,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EAAO,OAAO,CAAA;IACrB,KAAK,EAAE,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG;EAAS,CAAA,CAAA;AAEhD;AAEA,SAAS,UAAU,CAAC,KAAwB,EAAA;EAC1C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAwB,EAAE,SAAiB,EAAA;;IAC3E,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;IAC9B,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CACP,SAAS,CAAA,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAE,QAAA,CAAK,KAAK,CAAA,GAAI,KAAK,EAAA,EAAA,EAAA;EAE1D,CAAC,EAAE,CAAA,CAAE,CAAC;AACR","sourcesContent":["import { HttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\n/**\n * @internal\n */\nexport function cloneRequest({ headers, query, ...rest }: HttpRequest): HttpRequest {\n  return {\n    ...rest,\n    headers: { ...headers },\n    query: query ? cloneQuery(query) : undefined,\n  };\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}