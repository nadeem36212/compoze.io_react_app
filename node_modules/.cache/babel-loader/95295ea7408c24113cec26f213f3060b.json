{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetCredentialsForIdentityInput, GetCredentialsForIdentityResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCredentialsForIdentityCommand, serializeAws_json1_1GetCredentialsForIdentityCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns credentials for the provided identity ID. Any provided logins will be\n *          validated against supported login providers. If the token is for\n *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service\n *          with the appropriate role for the token.</p>\n *          <p>This is a public API. You do not need any credentials to call this API.</p>\n */\nvar GetCredentialsForIdentityCommand = /** @class */function (_super) {\n  __extends(GetCredentialsForIdentityCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetCredentialsForIdentityCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetCredentialsForIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"GetCredentialsForIdentityCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetCredentialsForIdentityCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);\n  };\n  GetCredentialsForIdentityCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);\n  };\n  return GetCredentialsForIdentityCommand;\n}($Command);\nexport { GetCredentialsForIdentityCommand };","map":{"version":3,"sources":["../../../commands/GetCredentialsForIdentityCommand.ts"],"names":[],"mappings":";AACA,SAAS,8BAA8B,EAAE,iCAAiC,QAAQ,oBAAoB;AACtG,SACE,sDAAsD,EACtD,oDAAoD,QAC/C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;AAMG;AACH,IAAA,gCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsD,SAAA,CAAA,gCAAA,EAAA,MAAA,CAAA;EAKpD;EACA;EAEA,SAAA,gCAAA,CAAqB,KAA4C,EAAA;IAAjE,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,gCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAkD,EAClD,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,uBAAuB;IAC1C,IAAM,WAAW,GAAG,kCAAkC;IACtD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,8BAA8B,CAAC,kBAAkB;MAC1E,wBAAwB,EAAE,iCAAiC,CAAC;KAC7D;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,gCAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA4C,EAAE,OAAuB,EAAA;IACrF,OAAO,oDAAoD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC7E,CAAC;EAEO,gCAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,MAAsB,EACtB,OAAuB,EAAA;IAEvB,OAAO,sDAAsD,CAAC,MAAM,EAAE,OAAO,CAAC;EAChF,CAAC;EAIH,OAAA,gCAAC;AAAD,CAAC,CAzDqD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetCredentialsForIdentityInput, GetCredentialsForIdentityResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCredentialsForIdentityCommand, serializeAws_json1_1GetCredentialsForIdentityCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns credentials for the provided identity ID. Any provided logins will be\n *          validated against supported login providers. If the token is for\n *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service\n *          with the appropriate role for the token.</p>\n *          <p>This is a public API. You do not need any credentials to call this API.</p>\n */\nvar GetCredentialsForIdentityCommand = /** @class */ (function (_super) {\n    __extends(GetCredentialsForIdentityCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetCredentialsForIdentityCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetCredentialsForIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"CognitoIdentityClient\";\n        var commandName = \"GetCredentialsForIdentityCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,\n            outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetCredentialsForIdentityCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);\n    };\n    GetCredentialsForIdentityCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);\n    };\n    return GetCredentialsForIdentityCommand;\n}($Command));\nexport { GetCredentialsForIdentityCommand };\n//# sourceMappingURL=GetCredentialsForIdentityCommand.js.map"]},"metadata":{},"sourceType":"module"}