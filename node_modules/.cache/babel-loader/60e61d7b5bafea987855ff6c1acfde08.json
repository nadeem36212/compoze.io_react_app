{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar CONTENT_LENGTH_HEADER = \"content-length\";\nexport function contentLengthMiddleware(bodyLengthChecker) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, length;\n        var _a;\n        return __generator(this, function (_b) {\n          request = args.request;\n          if (HttpRequest.isInstance(request)) {\n            body = request.body, headers = request.headers;\n            if (body && Object.keys(headers).map(function (str) {\n              return str.toLowerCase();\n            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {\n              length = bodyLengthChecker(body);\n              if (length !== undefined) {\n                request.headers = __assign(__assign({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));\n              }\n            }\n          }\n          return [2 /*return*/, next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var contentLengthMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true\n};\nexport var getContentLengthPlugin = function getContentLengthPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAQ,wBAAwB;AAYpD,IAAM,qBAAqB,GAAG,gBAAgB;AAE9C,OAAM,SAAU,uBAAuB,CAAC,iBAAuC,EAAA;EAA/E,IAAA,KAAA,GAAA,IAAA;EACE,OAAO,UAAgC,IAA+B,EAAA;IAAgC,OAAA,UACpG,IAAgC,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;UAE1B,OAAO,GAAG,IAAI,CAAC,OAAO;UAC5B,IAAI,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YAC3B,IAAI,GAAc,OAAO,CAAA,IAArB,EAAE,OAAO,GAAK,OAAO,CAAA,OAAZ;YACrB,IACE,IAAI,IACJ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CACjB,GAAG,CAAC,UAAC,GAAG,EAAA;cAAK,OAAA,GAAG,CAAC,WAAW,EAAE;YAAjB,CAAiB,CAAC,CAC/B,OAAO,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EACxC;cACM,MAAM,GAAG,iBAAiB,CAAC,IAAI,CAAC;cACtC,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,OAAO,CAAC,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACV,OAAO,CAAC,OAAO,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CACjB,qBAAqB,CAAA,GAAG,MAAM,CAAC,MAAM,CAAC,EAAA,EAAA,EACxC;cACF;YACF;UACF;UAED,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACN,IAAI,CAAA,EAAA;YACP,OAAO,EAAA;UAAA,CAAA,CAAA,CACP,CAAA;;;KACH;EA1BqG,CA0BrG;AACH;AAEA,OAAO,IAAM,8BAA8B,GAAwB;EACjE,IAAI,EAAE,OAAO;EACb,IAAI,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;EAC9C,IAAI,EAAE,yBAAyB;EAC/B,QAAQ,EAAE;CACX;AAED,OAAO,IAAM,sBAAsB,GAAG,SAAzB,sBAAsB,CAAI,OAAoD,EAAA;EAA0B,OAAC;IACpH,YAAY,EAAE,sBAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,8BAA8B,CAAC;IACrG;GACD;AAJoH,CAInH","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BodyLengthCalculator,\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\n\nexport function contentLengthMiddleware(bodyLengthChecker: BodyLengthCalculator): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const request = args.request;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (\n        body &&\n        Object.keys(headers)\n          .map((str) => str.toLowerCase())\n          .indexOf(CONTENT_LENGTH_HEADER) === -1\n      ) {\n        const length = bodyLengthChecker(body);\n        if (length !== undefined) {\n          request.headers = {\n            ...request.headers,\n            [CONTENT_LENGTH_HEADER]: String(length),\n          };\n        }\n      }\n    }\n\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const contentLengthMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true,\n};\n\nexport const getContentLengthPlugin = (options: { bodyLengthChecker: BodyLengthCalculator }): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}