{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { browserOrNode } from '../JS';\nimport { StorageHelper } from '../StorageHelper';\nexport var Linking = {};\nexport var AppState = {\n  addEventListener: function addEventListener(action, handler) {\n    return undefined;\n  }\n};\n// if not in react native, just use local storage\nexport var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : undefined;","map":{"version":3,"sources":["../../src/RNComponents/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AAEH,SAAS,aAAa,QAAQ,OAAO;AACrC,SAAS,aAAa,QAAQ,kBAAkB;AAEhD,OAAO,IAAM,OAAO,GAAG,CAAA,CAAE;AACzB,OAAO,IAAM,QAAQ,GAAG;EACvB,gBAAgB,EAAE,0BAAC,MAAM,EAAE,OAAO,EAAA;IAAK,OAAA,SAAS;EAAT;CACvC;AAED;AACA,OAAO,IAAM,YAAY,GAAG,aAAa,EAAE,CAAC,SAAS,GAClD,IAAI,aAAa,EAAE,CAAC,UAAU,EAAE,GAChC,SAAS","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { browserOrNode } from '../JS';\nimport { StorageHelper } from '../StorageHelper';\nexport var Linking = {};\nexport var AppState = {\n    addEventListener: function (action, handler) { return undefined; },\n};\n// if not in react native, just use local storage\nexport var AsyncStorage = browserOrNode().isBrowser\n    ? new StorageHelper().getStorage()\n    : undefined;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}