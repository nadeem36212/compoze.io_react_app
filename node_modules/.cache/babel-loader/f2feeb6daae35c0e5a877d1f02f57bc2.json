{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nvar initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport var incrementAsync = createAsyncThunk('counter/fetchCount', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(amount) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchCount(amount);\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: function increment(state) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(incrementAsync.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, function (state, action) {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nvar _counterSlice$actions = counterSlice.actions,\n  increment = _counterSlice$actions.increment,\n  decrement = _counterSlice$actions.decrement,\n  incrementByAmount = _counterSlice$actions.incrementByAmount;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport { increment, decrement, incrementByAmount };\nexport var selectCount = function selectCount(state) {\n  return state.counter.value;\n};\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport var incrementIfOdd = function incrementIfOdd(amount) {\n  return function (dispatch, getState) {\n    var currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/counter/counterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAE/E,SAASC,UAAU,QAAQ,cAAc;AAOzC,IAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAAoB;EAAA,sEACpB,iBAAOO,MAAc;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACIL,UAAU,CAACK,MAAM,CAAC;UAAA;YAAnCC,QAAQ;YAAA,iCAEPA,QAAQ,CAACC,IAAI;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACrB;EAAA;IAAA;EAAA;AAAA,IACF;AAED,OAAO,IAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,SAAS;EACfR,YAAY,EAAZA,YAAY;EACZ;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAE,mBAACC,KAAK,EAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACV,KAAK,IAAI,CAAC;IAClB,CAAC;IACDW,SAAS,EAAE,mBAACD,KAAK,EAAK;MACpBA,KAAK,CAACV,KAAK,IAAI,CAAC;IAClB,CAAC;IACD;IACAY,iBAAiB,EAAE,2BAACF,KAAK,EAAEG,MAA6B,EAAK;MAC3DH,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACD;EACA;EACAC,aAAa,EAAE,uBAACC,OAAO,EAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAE,UAACR,KAAK,EAAK;MAC1CA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACf,cAAc,CAACiB,SAAS,EAAE,UAACT,KAAK,EAAEG,MAAM,EAAK;MACpDH,KAAK,CAACT,MAAM,GAAG,MAAM;MACrBS,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEK,4BAAoDR,YAAY,CAACc,OAAO;EAAhEX,SAAS,yBAATA,SAAS;EAAEE,SAAS,yBAATA,SAAS;EAAEC,iBAAiB,yBAAjBA,iBAAiB;;AAEtD;AACA;AACA;AAAA;AACA,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAW,CAAIX,KAAgB;EAAA,OAAKA,KAAK,CAACY,OAAO,CAACtB,KAAK;AAAA;;AAEpE;AACA;AACA,OAAO,IAAMuB,cAAc,GAAG,SAAjBA,cAAc,CAAIpB,MAAc;EAAA,OAAe,UAC1DqB,QAAQ,EACRC,QAAQ,EACL;IACH,IAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAE,CAAC;IAC5C,IAAIC,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;MAC1BF,QAAQ,CAACZ,iBAAiB,CAACT,MAAM,CAAC,CAAC;IACrC;EACF,CAAC;AAAA;AAED,eAAeG,YAAY,CAACqB,OAAO"},"metadata":{},"sourceType":"module"}