{"ast":null,"code":"import _slicedToArray from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/component/create/template/EC2FromTemplateCreationPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"../../../../app/hooks\";\nimport { fetchAccountMetaData, selectAccountMetaData } from \"../../../account/accountSlice\";\nimport CreateForm from \"../../../products/create/CreateForm\";\nimport { getTemplates, selectTemplates } from \"../../../templates/templateSlice\";\nimport SelectAMIName from \"../selections/AMISelection\";\nimport PortSelection from \"../selections/PortSelection\";\nimport SelectComponentName from \"../selections/SelectComponentName\";\nimport SelectionForm from \"../selections/SelectionForm\";\nimport SubnetSelection from \"../selections/SubnetSelection\";\nimport VolumeSelectionSize from \"../selections/VolumeSizeSelection\";\nimport VPCSelection from \"../selections/VPCSelection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EC2FromTemplateCreationPage(_ref) {\n  _s();\n  var _finishForm = _ref.finishForm,\n    setName = _ref.setName,\n    setAttributes = _ref.setAttributes,\n    template = _ref.template;\n  var meta = useAppSelector(selectAccountMetaData);\n  var dispatch = useAppDispatch();\n  var params = useParams();\n  var templates = useAppSelector(selectTemplates);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedVpcSubents = _useState2[0],\n    setSelectedVpcSubents = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    vpc = _useState4[0],\n    setVPC = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    subnet = _useState6[0],\n    setSubnet = _useState6[1];\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    ports = _useState8[0],\n    setPorts = _useState8[1];\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    key = _useState10[0],\n    setKey = _useState10[1];\n  var _useState11 = useState(),\n    _useState12 = _slicedToArray(_useState11, 2),\n    volume = _useState12[0],\n    setVolume = _useState12[1];\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    ami = _useState14[0],\n    setAmi = _useState14[1];\n  var _useState15 = useState(),\n    _useState16 = _slicedToArray(_useState15, 2),\n    instanceTypeIdentifier = _useState16[0],\n    setInstanceTypeIdentifier = _useState16[1];\n  useEffect(function () {\n    dispatch(fetchAccountMetaData({\n      productName: params.name\n    }));\n    dispatch(getTemplates({\n      productName: params.name\n    }));\n  }, []);\n\n  //select template by templateid from templates\n\n  var templateVPCId = template.attributes['vpcId'];\n  var templateSubnetId = template.attributes['subnetId'];\n  var templateAvailabilityZone = template.attributes['availabilityZone'];\n  var templatePorts = template.attributes['ports'];\n  var templateKeyName = template.attributes['keyName'];\n  var templateAMI = template.attributes['ami'];\n  var templateVolumeSize = template.attributes['volumeSize'];\n  var templateInstanceTypeId = template.attributes['instanceTypeIdentifier'];\n  var vpcOptions = meta ? meta.vpcs.map(function (vpc) {\n    return {\n      value: vpc.vpcId,\n      displayName: vpc.vpcName\n    };\n  }) : [];\n  var vpcSelection = /*#__PURE__*/_jsxDEV(VPCSelection, {\n    vpcOptions: vpcOptions,\n    onChange: function onChange(event) {\n      var selectedOption = vpcOptions.find(function (option) {\n        return option.displayName === event.target.value;\n      });\n      var subnets = meta.vpcs.find(function (vpc) {\n        return vpc.vpcId === selectedOption.value;\n      }).subnets;\n      setVPC(selectedOption);\n      setSelectedVpcSubents(subnets);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 26\n  }, this);\n  var subnetOptions = selectedVpcSubents ? selectedVpcSubents.map(function (subnet) {\n    return {\n      value: subnet.subnetId,\n      displayName: subnet.subnetName\n    };\n  }) : [];\n  var subnetSelection = /*#__PURE__*/_jsxDEV(SubnetSelection, {\n    subnetOptions: subnetOptions,\n    onChange: function onChange(event) {\n      var selectedOption = subnetOptions.find(function (option) {\n        return option.displayName === event.target.value;\n      });\n      //find subnet from selectedVpcSubents\n      var subnet = selectedVpcSubents.find(function (subnet) {\n        return subnet.subnetId === selectedOption.value;\n      });\n      setSubnet(subnet);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 29\n  }, this);\n  var keyOptions = meta ? meta.keyNames.map(function (key) {\n    return {\n      value: key.keyName,\n      displayName: key.keyName\n    };\n  }) : [];\n  var selectComponentName = /*#__PURE__*/_jsxDEV(SelectComponentName, {\n    label: \"What would you like to name your EC2 Instance?\",\n    setName: setName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 33\n  }, this);\n  var amiOptions = meta ? meta.amis.map(function (ami) {\n    return {\n      value: ami.amiId,\n      displayName: ami.name\n    };\n  }) : [];\n  var instanceTypeOptions = meta ? meta.instanceTypes.map(function (instanceType) {\n    return {\n      value: instanceType.instanceType,\n      displayName: instanceType.instanceType\n    };\n  }) : [];\n  var steps = [];\n  steps.push({\n    label: 'Provide a Name',\n    content: selectComponentName\n  });\n  if (!templateVPCId) {\n    steps.push({\n      label: 'Select a VPC',\n      content: vpcSelection\n    });\n  }\n  if (!templateSubnetId) {\n    steps.push({\n      label: 'Select a Subnet',\n      content: subnetSelection\n    });\n  }\n  if (!templatePorts) {\n    steps.push({\n      label: 'Ports',\n      content: /*#__PURE__*/_jsxDEV(PortSelection, {\n        setPorts: setPorts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 47\n      }, this)\n    });\n  }\n  if (!templateKeyName) {\n    steps.push({\n      label: 'Key Name',\n      content: /*#__PURE__*/_jsxDEV(SelectionForm, {\n        label: \"Which key name would you like to use?\",\n        placeHolder: \"EC2 Key name\",\n        options: keyOptions,\n        helperText: \"This is the key you will use to ssh into your instance\",\n        onChange: function onChange(event) {\n          var selectedOption = keyOptions.find(function (option) {\n            return option.displayName === event.target.value;\n          });\n          setKey(selectedOption);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 41\n      }, this)\n    });\n  }\n  if (!templateAMI) {\n    steps.push({\n      label: 'AMI',\n      content: /*#__PURE__*/_jsxDEV(SelectAMIName, {\n        amiOptions: amiOptions,\n        onChange: function onChange(event) {\n          var selectedOption = amiOptions.find(function (option) {\n            return option.displayName === event.target.value;\n          });\n          setAmi(selectedOption);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 36\n      }, this)\n    });\n  }\n  if (!templateVolumeSize) {\n    steps.push({\n      label: 'Volume',\n      content: /*#__PURE__*/_jsxDEV(VolumeSelectionSize, {\n        onChange: setVolume\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 48\n      }, this)\n    });\n  }\n  if (!templateInstanceTypeId) {\n    steps.push({\n      label: 'Instance Size',\n      content: /*#__PURE__*/_jsxDEV(SelectionForm, {\n        label: \"Which instance type would you like to use?\",\n        placeHolder: \"Instance Type\",\n        options: instanceTypeOptions,\n        helperText: \"Confirm pricing for your instance type to ensure you do not exceed your budget\",\n        onChange: function onChange(event) {\n          var selectedOption = instanceTypeOptions.find(function (option) {\n            return option.displayName === event.target.value;\n          });\n          setInstanceTypeIdentifier(selectedOption);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 46\n      }, this)\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(CreateForm, {\n    heading: \"Create Your EC2 Instance\",\n    steps: steps,\n    finishForm: function finishForm() {\n      setAttributes({\n        singleDeployment: \"true\",\n        vpcId: templateVPCId !== null && templateVPCId !== void 0 ? templateVPCId : vpc.value,\n        subnetId: templateSubnetId !== null && templateSubnetId !== void 0 ? templateSubnetId : subnet === null || subnet === void 0 ? void 0 : subnet.subnetId,\n        availabilityZone: templateAvailabilityZone !== null && templateAvailabilityZone !== void 0 ? templateAvailabilityZone : subnet === null || subnet === void 0 ? void 0 : subnet.availabilityZone,\n        numberOfInstances: \"1\",\n        ports: templatePorts !== null && templatePorts !== void 0 ? templatePorts : ports,\n        ami: templateAMI !== null && templateAMI !== void 0 ? templateAMI : ami === null || ami === void 0 ? void 0 : ami.value,\n        keyName: templateKeyName !== null && templateKeyName !== void 0 ? templateKeyName : key === null || key === void 0 ? void 0 : key.value,\n        volumeSize: templateVolumeSize !== null && templateVolumeSize !== void 0 ? templateVolumeSize : volume,\n        instanceTypeIdentifier: templateInstanceTypeId !== null && templateInstanceTypeId !== void 0 ? templateInstanceTypeId : instanceTypeIdentifier.value\n      });\n      _finishForm();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n\n// numberOfInstances, DEFAULT 1\n// vpcId, stubbed\n// subnetId, stubbed\n// availabilityZone, to be stubbed\n// ports, \n// keyName,\n// ami,\n// volumeSize,\n// singleDeployment: String(!singleDeployment),\n// instanceTypeIdentifier\n_s(EC2FromTemplateCreationPage, \"X7G+Uqdj7e0NZDNS3VhybZGDvgw=\", false, function () {\n  return [useAppSelector, useAppDispatch, useParams, useAppSelector];\n});\n_c = EC2FromTemplateCreationPage;\nvar _c;\n$RefreshReg$(_c, \"EC2FromTemplateCreationPage\");","map":{"version":3,"names":["useEffect","useState","useParams","useAppDispatch","useAppSelector","fetchAccountMetaData","selectAccountMetaData","CreateForm","getTemplates","selectTemplates","SelectAMIName","PortSelection","SelectComponentName","SelectionForm","SubnetSelection","VolumeSelectionSize","VPCSelection","EC2FromTemplateCreationPage","finishForm","setName","setAttributes","template","meta","dispatch","params","templates","selectedVpcSubents","setSelectedVpcSubents","vpc","setVPC","subnet","setSubnet","ports","setPorts","key","setKey","volume","setVolume","ami","setAmi","instanceTypeIdentifier","setInstanceTypeIdentifier","productName","name","templateVPCId","attributes","templateSubnetId","templateAvailabilityZone","templatePorts","templateKeyName","templateAMI","templateVolumeSize","templateInstanceTypeId","vpcOptions","vpcs","map","value","vpcId","displayName","vpcName","vpcSelection","event","selectedOption","find","option","target","subnets","subnetOptions","subnetId","subnetName","subnetSelection","keyOptions","keyNames","keyName","selectComponentName","amiOptions","amis","amiId","instanceTypeOptions","instanceTypes","instanceType","steps","push","label","content","singleDeployment","availabilityZone","numberOfInstances","volumeSize"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/component/create/template/EC2FromTemplateCreationPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useAppDispatch, useAppSelector } from \"../../../../app/hooks\"\nimport { CompozeFormOption } from \"../../../../components/form/CompozeFormOption\"\nimport { fetchAccountMetaData, selectAccountMetaData } from \"../../../account/accountSlice\"\nimport CreateForm from \"../../../products/create/CreateForm\"\nimport { getTemplates, selectTemplates, Template } from \"../../../templates/templateSlice\"\nimport { Subnet } from \"../ec2/EC2ComponentCreation\"\nimport SelectAMIName from \"../selections/AMISelection\"\nimport PortSelection from \"../selections/PortSelection\"\nimport SelectComponentName from \"../selections/SelectComponentName\"\nimport SelectionForm from \"../selections/SelectionForm\"\nimport SubnetSelection from \"../selections/SubnetSelection\"\nimport VolumeSelectionSize from \"../selections/VolumeSizeSelection\"\nimport VPCSelection from \"../selections/VPCSelection\"\n\ninterface EC2ComponentCreationProps {\n    finishForm: () => void\n    setName: (name: string) => void\n    setAttributes: (attributes: any) => void\n    template: Template\n}\n\nexport default function EC2FromTemplateCreationPage({ finishForm, setName, setAttributes, template }: EC2ComponentCreationProps) {\n    const meta = useAppSelector(selectAccountMetaData);\n    const dispatch = useAppDispatch();\n    const params = useParams<{ name: string, templateId: string }>();\n    const templates = useAppSelector(selectTemplates);\n    const [selectedVpcSubents, setSelectedVpcSubents] = useState<Subnet[]>([])\n    const [vpc, setVPC] = useState<CompozeFormOption>()\n    const [subnet, setSubnet] = useState<Subnet>()\n    const [ports, setPorts] = useState<string>()\n    const [key, setKey] = useState<CompozeFormOption>()\n    const [volume, setVolume] = useState<string>()\n    const [ami, setAmi] = useState<CompozeFormOption>()\n    const [instanceTypeIdentifier, setInstanceTypeIdentifier] = useState<CompozeFormOption>()\n\n    useEffect(() => {\n        dispatch(fetchAccountMetaData({ productName: params.name }));\n        dispatch(getTemplates({ productName: params.name }));\n    }, []);\n\n    //select template by templateid from templates\n\n    const templateVPCId = template.attributes['vpcId']\n    const templateSubnetId = template.attributes['subnetId']\n    const templateAvailabilityZone = template.attributes['availabilityZone']\n    const templatePorts = template.attributes['ports']\n    const templateKeyName = template.attributes['keyName']\n    const templateAMI = template.attributes['ami']\n    const templateVolumeSize = template.attributes['volumeSize']\n    const templateInstanceTypeId = template.attributes['instanceTypeIdentifier']\n\n    const vpcOptions: CompozeFormOption[] = meta ? meta.vpcs.map((vpc: any) => { return { value: vpc.vpcId, displayName: vpc.vpcName } }) : []\n\n    const vpcSelection = <VPCSelection vpcOptions={vpcOptions} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n        const selectedOption = vpcOptions.find(option => option.displayName === event.target.value)!\n        const subnets = meta.vpcs.find((vpc: any) => vpc.vpcId === selectedOption.value)!.subnets\n        setVPC(selectedOption)\n        setSelectedVpcSubents(subnets)\n\n    }} />\n\n    const subnetOptions: CompozeFormOption[] = selectedVpcSubents ? selectedVpcSubents.map(subnet => { return { value: subnet.subnetId, displayName: subnet.subnetName } }) : []\n\n    const subnetSelection = <SubnetSelection subnetOptions={subnetOptions} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n        const selectedOption = subnetOptions.find(option => option.displayName === event.target.value)!\n        //find subnet from selectedVpcSubents\n        const subnet = selectedVpcSubents.find((subnet: any) => subnet.subnetId === selectedOption.value)!\n        setSubnet(subnet)\n    }} />\n\n    const keyOptions: CompozeFormOption[] = meta ? meta.keyNames.map((key: any) => { return { value: key.keyName, displayName: key.keyName } }) : []\n\n    const selectComponentName = <SelectComponentName label=\"What would you like to name your EC2 Instance?\"\n        setName={setName} />\n\n    const amiOptions: CompozeFormOption[] = meta ? meta.amis.map((ami: any) => { return { value: ami.amiId, displayName: ami.name } }) : []\n    const instanceTypeOptions: CompozeFormOption[] = meta ? meta.instanceTypes.map((instanceType: any) => { return { value: instanceType.instanceType, displayName: instanceType.instanceType } }) : []\n    const steps = []\n    steps.push({ label: 'Provide a Name', content: selectComponentName })\n\n    if (!templateVPCId) {\n        steps.push({ label: 'Select a VPC', content: vpcSelection })\n    }\n    if (!templateSubnetId) {\n        steps.push({ label: 'Select a Subnet', content: subnetSelection })\n    }\n\n    if (!templatePorts) {\n        steps.push({ label: 'Ports', content: <PortSelection setPorts={setPorts} /> })\n    }\n\n    if (!templateKeyName) {\n        steps.push({\n            label: 'Key Name', content: <SelectionForm label=\"Which key name would you like to use?\"\n                placeHolder=\"EC2 Key name\"\n                options={keyOptions}\n                helperText=\"This is the key you will use to ssh into your instance\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    const selectedOption = keyOptions.find(option => option.displayName === event.target.value)!\n                    setKey(selectedOption)\n                }} />\n        })\n    }\n    if (!templateAMI) {\n        steps.push({\n            label: 'AMI', content: <SelectAMIName amiOptions={amiOptions} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                const selectedOption = amiOptions.find(option => option.displayName === event.target.value)!\n                setAmi(selectedOption)\n            }} />\n        })\n    }\n    if (!templateVolumeSize) {\n        steps.push({ label: 'Volume', content: <VolumeSelectionSize onChange={setVolume} /> })\n    }\n    if (!templateInstanceTypeId) {\n        steps.push({\n            label: 'Instance Size', content: <SelectionForm label=\"Which instance type would you like to use?\"\n                placeHolder=\"Instance Type\"\n                options={instanceTypeOptions}\n                helperText=\"Confirm pricing for your instance type to ensure you do not exceed your budget\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    const selectedOption = instanceTypeOptions.find(option => option.displayName === event.target.value)!\n                    setInstanceTypeIdentifier(selectedOption)\n                }} />\n        })\n    }\n\n    return (\n        <CreateForm heading=\"Create Your EC2 Instance\" steps={steps} finishForm={() => {\n            setAttributes({\n                singleDeployment: \"true\",\n                vpcId: templateVPCId ?? vpc!.value,\n                subnetId: templateSubnetId ?? subnet?.subnetId,\n                availabilityZone: templateAvailabilityZone ?? subnet?.availabilityZone,\n                numberOfInstances: \"1\",\n                ports: templatePorts ?? ports,\n                ami: templateAMI ?? ami?.value,\n                keyName: templateKeyName ?? key?.value,\n                volumeSize: templateVolumeSize ?? volume,\n                instanceTypeIdentifier: templateInstanceTypeId ?? instanceTypeIdentifier!.value,\n            })\n            finishForm()\n        }} />\n    )\n}\n\n// numberOfInstances, DEFAULT 1\n// vpcId, stubbed\n// subnetId, stubbed\n// availabilityZone, to be stubbed\n// ports, \n// keyName,\n// ami,\n// volumeSize,\n// singleDeployment: String(!singleDeployment),\n// instanceTypeIdentifier"],"mappings":"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"},"metadata":{},"sourceType":"module"}