{"ast":null,"code":"export default function (e, n) {\n  return n = n || {}, new Promise(function (t, r) {\n    var s = new XMLHttpRequest(),\n      o = [],\n      u = [],\n      i = {},\n      a = function a() {\n        return {\n          ok: 2 == (s.status / 100 | 0),\n          statusText: s.statusText,\n          status: s.status,\n          url: s.responseURL,\n          text: function text() {\n            return Promise.resolve(s.responseText);\n          },\n          json: function json() {\n            return Promise.resolve(s.responseText).then(JSON.parse);\n          },\n          blob: function blob() {\n            return Promise.resolve(new Blob([s.response]));\n          },\n          clone: a,\n          headers: {\n            keys: function keys() {\n              return o;\n            },\n            entries: function entries() {\n              return u;\n            },\n            get: function get(e) {\n              return i[e.toLowerCase()];\n            },\n            has: function has(e) {\n              return e.toLowerCase() in i;\n            }\n          }\n        };\n      };\n    for (var l in s.open(n.method || \"get\", e, !0), s.onload = function () {\n      s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (e, n, t) {\n        o.push(n = n.toLowerCase()), u.push([n, t]), i[n] = i[n] ? i[n] + \",\" + t : t;\n      }), t(a());\n    }, s.onerror = r, s.withCredentials = \"include\" == n.credentials, n.headers) {\n      s.setRequestHeader(l, n.headers[l]);\n    }\n    s.send(n.body || null);\n  });\n}","map":{"version":3,"sources":["../src/index.mjs"],"names":["url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","then","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","const","i","setRequestHeader","send","body"],"mappings":"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","sourcesContent":["export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}