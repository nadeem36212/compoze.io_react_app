{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nexport var retryMiddleware = function retryMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var _a;\n        return __generator(this, function (_b) {\n          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode) context.userAgent = __spread(context.userAgent || [], [[\"cfg/retry-mode\", options.retryStrategy.mode]]);\n          return [2 /*return*/, options.retryStrategy.retry(next, args)];\n        });\n      });\n    };\n  };\n};\nexport var retryMiddlewareOptions = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true\n};\nexport var getRetryPlugin = function getRetryPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/retryMiddleware.ts"],"names":[],"mappings":";AAaA,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,OAA4B,EAAA;EAAK,OAAA,UAC/D,IAAkC,EAClC,OAAgC,EAAA;IACC,OAAA,UACjC,IAAmC,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;UAEnC,IAAA,CAAA,EAAA,GAAI,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAC9B,OAAO,CAAC,SAAS,GAAA,QAAA,CAAQ,OAAO,CAAC,SAAS,IAAI,EAAE,EAAC,CAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA,CAAC;UACpG,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;;;KAC/C;EANkC,CAMlC;AATgE,CAShE;AAED,OAAO,IAAM,sBAAsB,GAAqD;EACtF,IAAI,EAAE,iBAAiB;EACvB,IAAI,EAAE,CAAC,OAAO,CAAC;EACf,IAAI,EAAE,iBAAiB;EACvB,QAAQ,EAAE,MAAM;EAChB,QAAQ,EAAE;CACX;AAED,OAAO,IAAM,cAAc,GAAG,SAAjB,cAAc,CAAI,OAA4B,EAAA;EAA0B,OAAC;IACpF,YAAY,EAAE,sBAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,sBAAsB,CAAC;IACnE;GACD;AAJoF,CAInF","sourcesContent":["import {\n  AbsoluteLocation,\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestHandlerOptions,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { RetryResolvedConfig } from \"./configurations\";\n\nexport const retryMiddleware = (options: RetryResolvedConfig) => <Output extends MetadataBearer = MetadataBearer>(\n  next: FinalizeHandler<any, Output>,\n  context: HandlerExecutionContext\n): FinalizeHandler<any, Output> => async (\n  args: FinalizeHandlerArguments<any>\n): Promise<FinalizeHandlerOutput<Output>> => {\n  if (options?.retryStrategy?.mode)\n    context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", options.retryStrategy.mode]];\n  return options.retryStrategy.retry(next, args);\n};\n\nexport const retryMiddlewareOptions: FinalizeRequestHandlerOptions & AbsoluteLocation = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true,\n};\n\nexport const getRetryPlugin = (options: RetryResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}