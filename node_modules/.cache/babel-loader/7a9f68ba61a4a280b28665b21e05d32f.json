{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n      var _j;\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3 /*break*/, 2];\n            return [4 /*yield*/, resolveLogins(parameters.logins)];\n          case 1:\n            _h = _k.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n          case 3:\n            return [4 /*yield*/, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2 /*return*/, {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"sources":["../../src/fromCognitoIdentity.ts"],"names":[],"mappings":";AAAA,SAAS,gCAAgC,QAAQ,kCAAkC;AACnF,SAAS,aAAa,QAAQ,4BAA4B;AAI1D,SAAS,aAAa,QAAQ,iBAAiB;AAS/C;;;;;AAKG;AACH,OAAM,SAAU,mBAAmB,CAAC,UAAyC,EAAA;EAA7E,IAAA,KAAA,GAAA,IAAA;EACE,OAAO,YAAA;IAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;YAQK,EAAA,GAAA,CAAA,EAAA,GAAA,UAAU,CAAC,MAAM,EAAC,IAAI;iBAC1B,gCAAgC,CAAA,IAAA;;cAClC,aAAa,EAAE,UAAU,CAAC,aAAa;cACvC,UAAU,EAAE,UAAU,CAAC;;iBACf,UAAU,CAAC,MAAM,EAAjB,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YAAoB,OAAA,CAAA,CAAA,CAAA,WAAM,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;;YAAtC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAsC;;;YAAG,EAAA,GAAA,SAAS;;;YAJ9E,OAAA,CAAA,CAAA,CAAA,WAAM,EAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CACR,KAAA,EAAA,CAAA,KAAA,CAAI,gCAAgC,EAAA,CAAA,KAAA,CAAA,GAGlC,EAAA,CAAA,MAAM,GAAA,EAAwE,E,QAC9E,CAAA,CACH,CAAA;;YAZC,EAAA,GAME,EAAA,CAAA,IAAA,EAMH,CAAA,WAPgC,EAL/B,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAKI,yBAAyB,EAAE,GAAA,EAAA,EAJ7B,EAAA,GAAA,EAAA,CAAA,WAAyC,EAAzC,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,yBAAyB,EAAE,GAAA,EAAA,EACzC,UAAU,GAAA,EAAA,CAAA,UAAA,EACV,EAAA,GAAA,EAAA,CAAA,SAAqC,EAArC,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,uBAAuB,EAAE,GAAA,EAAA,EACrC,YAAY,GAAA,EAAA,CAAA,YAAA;YAUhB,OAAA,CAAA,CAAA,CAAA,YAAO;cACL,UAAU,EAAE,UAAU,CAAC,UAAU;cACjC,WAAW,EAAE,WAAW;cACxB,eAAe,EAAE,SAAS;cAC1B,YAAY,EAAE,YAAY;cAC1B,UAAU,EAAE;aACb,CAAA;QAAC;;;GACH;AACH;AAUA,SAAS,yBAAyB,GAAA;EAChC,MAAM,IAAI,aAAa,CAAC,yDAAyD,CAAC;AACpF;AAEA,SAAS,yBAAyB,GAAA;EAChC,MAAM,IAAI,aAAa,CAAC,uDAAuD,CAAC;AAClF;AAEA,SAAS,uBAAuB,GAAA;EAC9B,MAAM,IAAI,aAAa,CAAC,sDAAsD,CAAC;AACjF","sourcesContent":["import { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider, Credentials } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { resolveLogins } from \"./resolveLogins\";\n\nexport interface CognitoIdentityCredentials extends Credentials {\n  /**\n   * The Cognito ID returned by the last call to AWS.CognitoIdentity.getOpenIdToken().\n   */\n  identityId: string;\n}\n\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters: FromCognitoIdentityParameters): CredentialProvider {\n  return async (): Promise<CognitoIdentityCredentials> => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken,\n      } = throwOnMissingCredentials(),\n    } = await parameters.client.send(\n      new GetCredentialsForIdentityCommand({\n        CustomRoleArn: parameters.customRoleArn,\n        IdentityId: parameters.identityId,\n        Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n      })\n    );\n\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration,\n    };\n  };\n}\n\nexport interface FromCognitoIdentityParameters extends CognitoProviderParameters {\n  /**\n   * The unique identifier for the identity against which credentials will be\n   * issued.\n   */\n  identityId: string;\n}\n\nfunction throwOnMissingAccessKeyId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}