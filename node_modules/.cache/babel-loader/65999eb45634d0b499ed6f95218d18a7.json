{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\n/**\n * Build user agent header sections from:\n * 1. runtime-specific default user agent provider;\n * 2. custom user agent from `customUserAgent` client config;\n * 3. handler execution context set by internal SDK components;\n * The built user agent will be set to `x-amz-user-agent` header for ALL the\n * runtimes.\n * Please note that any override to the `user-agent` or `x-amz-user-agent` header\n * in the HTTP request is discouraged. Please use `customUserAgent` client\n * config or middleware setting the `userAgent` context to generate desired user\n * agent.\n */\nexport var userAgentMiddleware = function userAgentMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, headers, userAgent, defaultUserAgent, customUserAgent, normalUAValue;\n        var _a, _b;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [2 /*return*/, next(args)];\n              headers = request.headers;\n              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];\n              return [4 /*yield*/, options.defaultUserAgentProvider()];\n            case 1:\n              defaultUserAgent = _c.sent().map(escapeUserAgent);\n              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];\n              // Set value to AWS-specific user agent header\n              headers[X_AMZ_USER_AGENT] = __spread(defaultUserAgent, userAgent, customUserAgent).join(SPACE);\n              normalUAValue = __spread(defaultUserAgent.filter(function (section) {\n                return section.startsWith(\"aws-sdk-\");\n              }), customUserAgent).join(SPACE);\n              if (options.runtime !== \"browser\" && normalUAValue) {\n                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + \" \" + normalUAValue : normalUAValue;\n              }\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.\n * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.\n * @private\n */\nvar escapeUserAgent = function escapeUserAgent(_a) {\n  var _b = __read(_a, 2),\n    name = _b[0],\n    version = _b[1];\n  var prefixSeparatorIndex = name.indexOf(\"/\");\n  var prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just \"\"\n  var uaName = name.substring(prefixSeparatorIndex + 1);\n  if (prefix === \"api\") {\n    uaName = uaName.toLowerCase();\n  }\n  return [prefix, uaName, version].filter(function (item) {\n    return item && item.length > 0;\n  }).map(function (item) {\n    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, \"_\");\n  }).join(\"/\");\n};\nexport var getUserAgentMiddlewareOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n  override: true\n};\nexport var getUserAgentPlugin = function getUserAgentPlugin(config) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/user-agent-middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  UserAgentPair,\n} from \"@aws-sdk/types\";\n\nimport { UserAgentResolvedConfig } from \"./configurations\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\n\n/**\n * Build user agent header sections from:\n * 1. runtime-specific default user agent provider;\n * 2. custom user agent from `customUserAgent` client config;\n * 3. handler execution context set by internal SDK components;\n * The built user agent will be set to `x-amz-user-agent` header for ALL the\n * runtimes.\n * Please note that any override to the `user-agent` or `x-amz-user-agent` header\n * in the HTTP request is discouraged. Please use `customUserAgent` client\n * config or middleware setting the `userAgent` context to generate desired user\n * agent.\n */\nexport const userAgentMiddleware = (options: UserAgentResolvedConfig) => <Output extends MetadataBearer>(\n  next: BuildHandler<any, any>,\n  context: HandlerExecutionContext\n): BuildHandler<any, any> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request)) return next(args);\n  const { headers } = request;\n  const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n  const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n  const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n  // Set value to AWS-specific user agent header\n  headers[X_AMZ_USER_AGENT] = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(SPACE);\n  // Get value to be sent with non-AWS-specific user agent header.\n  const normalUAValue = [\n    ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n    ...customUserAgent,\n  ].join(SPACE);\n  if (options.runtime !== \"browser\" && normalUAValue) {\n    headers[USER_AGENT] = headers[USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;\n  }\n\n  return next({\n    ...args,\n    request,\n  });\n};\n\n/**\n * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.\n * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.\n * @private\n */\nconst escapeUserAgent = ([name, version]: UserAgentPair): string => {\n  const prefixSeparatorIndex = name.indexOf(\"/\");\n  const prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just \"\"\n  let uaName = name.substring(prefixSeparatorIndex + 1);\n  if (prefix === \"api\") {\n    uaName = uaName.toLowerCase();\n  }\n  return [prefix, uaName, version]\n    .filter((item) => item && item.length > 0)\n    .map((item) => item?.replace(UA_ESCAPE_REGEX, \"_\"))\n    .join(\"/\");\n};\n\nexport const getUserAgentMiddlewareOptions: BuildHandlerOptions & AbsoluteLocation = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n  override: true,\n};\n\nexport const getUserAgentPlugin = (config: UserAgentResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}