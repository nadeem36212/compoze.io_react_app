{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar CostsService = /*#__PURE__*/function () {\n  function CostsService(api) {\n    _classCallCheck(this, CostsService);\n    this.api = api;\n  }\n  _createClass(CostsService, [{\n    key: \"getCosts\",\n    value: function () {\n      var _getCosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(orgId) {\n        var costResponse;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.api.get(\"/organizations/\".concat(orgId, \"/accounts/costs\"));\n              case 2:\n                costResponse = _context.sent;\n                return _context.abrupt(\"return\", costResponse.filter(function (account) {\n                  return !isNaN(parseFloat(account.amount));\n                }).map(function (account) {\n                  var periodSplit = account.period.split(' - ');\n                  var amountSplit = account.amount.split('.');\n                  var amountShortened = amountSplit[0] === \"0\" ? \"0.00\" : amountSplit[0] + '.' + amountSplit[1].slice(0, 2);\n                  var forecastAmountSplit = account.forecastAmount.split('.');\n                  var forecastAmountShortened = forecastAmountSplit[0] + '.' + forecastAmountSplit[1].slice(0, 2);\n                  return {\n                    accountId: account.accountId,\n                    periodStart: periodSplit[0],\n                    periodEnd: periodSplit[1],\n                    nickName: account.nickName,\n                    totalCost: \"\".concat(account.unit, \" $\").concat(amountShortened),\n                    forecastedAmount: \"\".concat(account.unit, \" $\").concat(forecastAmountShortened)\n                  };\n                }));\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getCosts(_x) {\n        return _getCosts.apply(this, arguments);\n      }\n      return getCosts;\n    }()\n  }]);\n  return CostsService;\n}();\nexport { CostsService as default };","map":{"version":3,"names":["CostsService","api","orgId","get","costResponse","filter","account","isNaN","parseFloat","amount","map","periodSplit","period","split","amountSplit","amountShortened","slice","forecastAmountSplit","forecastAmount","forecastAmountShortened","accountId","periodStart","periodEnd","nickName","totalCost","unit","forecastedAmount"],"sources":["/Users/naeem/syntaxroot/compoze.io_react_app/src/service/CostService.ts"],"sourcesContent":["import { AccountCost } from '../features/costs/costSlice';\nimport RestService from './RestService';\n\nexport default class CostsService {\n  constructor(protected readonly api: RestService) { }\n\n  async getCosts(orgId: string): Promise<AccountCost[]> {\n\n    const costResponse: CostResponse[] = await this.api.get<CostResponse[]>(\n      `/organizations/${orgId}/accounts/costs`\n    );\n\n    return costResponse\n      .filter((account) => {\n        return !isNaN(parseFloat(account.amount))\n      })\n      .map((account: CostResponse) => {\n\n        const periodSplit = account.period.split(' - ');\n        const amountSplit = account.amount.split('.');\n        const amountShortened = amountSplit[0] === \"0\" ? \"0.00\" : amountSplit[0] + '.' + amountSplit[1].slice(0, 2);\n        const forecastAmountSplit = account.forecastAmount.split('.');\n        const forecastAmountShortened =\n          forecastAmountSplit[0] + '.' + forecastAmountSplit[1].slice(0, 2);\n\n        return {\n          accountId: account.accountId,\n          periodStart: periodSplit[0],\n          periodEnd: periodSplit[1],\n          nickName: account.nickName,\n          totalCost: `${account.unit} $${amountShortened}`,\n          forecastedAmount: `${account.unit} $${forecastAmountShortened}`,\n        };\n      });\n  }\n}\n\ninterface CostResponse {\n  amount: string;\n  forecastAmount: string;\n  accountId: string;\n  nickName: string;\n  unit: string;\n  period: string;\n  granularity: string;\n}\n"],"mappings":";;;;IAGqBA,YAAY;EAC/B,sBAA+BC,GAAgB,EAAE;IAAA;IAAA,KAAlBA,GAAgB,GAAhBA,GAAgB;EAAI;EAAC;IAAA;IAAA;MAAA,2EAEpD,iBAAeC,KAAa;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEiB,IAAI,CAACD,GAAG,CAACE,GAAG,0BACnCD,KAAK,qBACxB;cAAA;gBAFKE,YAA4B;gBAAA,iCAI3BA,YAAY,CAChBC,MAAM,CAAC,UAACC,OAAO,EAAK;kBACnB,OAAO,CAACC,KAAK,CAACC,UAAU,CAACF,OAAO,CAACG,MAAM,CAAC,CAAC;gBAC3C,CAAC,CAAC,CACDC,GAAG,CAAC,UAACJ,OAAqB,EAAK;kBAE9B,IAAMK,WAAW,GAAGL,OAAO,CAACM,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;kBAC/C,IAAMC,WAAW,GAAGR,OAAO,CAACG,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC;kBAC7C,IAAME,eAAe,GAAGD,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,MAAM,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,WAAW,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;kBAC3G,IAAMC,mBAAmB,GAAGX,OAAO,CAACY,cAAc,CAACL,KAAK,CAAC,GAAG,CAAC;kBAC7D,IAAMM,uBAAuB,GAC3BF,mBAAmB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,mBAAmB,CAAC,CAAC,CAAC,CAACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;kBAEnE,OAAO;oBACLI,SAAS,EAAEd,OAAO,CAACc,SAAS;oBAC5BC,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC;oBAC3BW,SAAS,EAAEX,WAAW,CAAC,CAAC,CAAC;oBACzBY,QAAQ,EAAEjB,OAAO,CAACiB,QAAQ;oBAC1BC,SAAS,YAAKlB,OAAO,CAACmB,IAAI,eAAKV,eAAe,CAAE;oBAChDW,gBAAgB,YAAKpB,OAAO,CAACmB,IAAI,eAAKN,uBAAuB;kBAC/D,CAAC;gBACH,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACL;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAAA,SA/BkBnB,YAAY"},"metadata":{},"sourceType":"module"}