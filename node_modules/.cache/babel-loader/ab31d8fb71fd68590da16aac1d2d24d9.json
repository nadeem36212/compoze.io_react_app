{"ast":null,"code":"import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport var defaultDelayDecider = function defaultDelayDecider(delayBase, attempts) {\n  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};","map":{"version":3,"sources":["../../src/delayDecider.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAmB,QAAQ,aAAa;AAEjD;;AAEG;AACH,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAI,SAAiB,EAAE,QAAgB,EAAA;EACrE,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAA,CAAA,GAAA,CAAA,CAAC,EAAI,QAAQ,CAAA,GAAG,SAAS,CAAC,CAAC;AAApF,CAAoF","sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}