{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  configFileSelector: function configFileSelector(profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function resolveRetryConfig(input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts)\n  });\n};\nvar normalizeMaxAttempts = function normalizeMaxAttempts(maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return maxAttempts;\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"sources":["../../src/configurations.ts"],"names":[],"mappings":";AAGA,SAAS,oBAAoB,EAAE,kBAAkB,EAAE,qBAAqB,QAAQ,mBAAmB;AAEnG,OAAO,IAAM,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAM,mBAAmB,GAAG,cAAc;AAEjD,OAAO,IAAM,+BAA+B,GAAkC;EAC5E,2BAA2B,EAAE,qCAAC,GAAG,EAAA;IAC/B,IAAM,KAAK,GAAG,GAAG,CAAC,gBAAgB,CAAC;IACnC,IAAI,CAAC,KAAK,EAAE,OAAO,SAAS;IAC5B,IAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC;IAClC,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,uBAAA,GAAwB,gBAAgB,GAAA,2BAAA,GAA2B,KAAK,GAAA,IAAG,CAAC;IAC7F;IACD,OAAO,UAAU;EACnB,CAAC;EACD,kBAAkB,EAAE,4BAAC,OAAO,EAAA;IAC1B,IAAM,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC;IAC1C,IAAI,CAAC,KAAK,EAAE,OAAO,SAAS;IAC5B,IAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC;IAClC,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,2BAAA,GAA4B,mBAAmB,GAAA,2BAAA,GAA2B,KAAK,GAAA,IAAG,CAAC;IACpG;IACD,OAAO,UAAU;EACnB,CAAC;EACD,OAAO,EAAE;CACV;AAmBD,OAAO,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAO,KAAgD,EAAA;EACpF,IAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAW,CAAC;EAC3D,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;IACR,WAAW,EAAA,WAAA;IACX,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,IAAI,qBAAqB,CAAC,WAAW;EAAC,CAAA,CAAA;AAEhF,CAAC;AAED,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAAI,WAA6D,EAAA;EAA7D,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,oBAA6D;EAAA;EACzF,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;IACnC,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;IAChD,OAAO,YAAA;MAAM,OAAA,aAAW;IAAX,CAAW;EACzB;EACD,OAAO,WAAW;AACpB,CAAC;AAED,OAAO,IAAM,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAM,iBAAiB,GAAG,YAAY;AAE7C,OAAO,IAAM,8BAA8B,GAAkC;EAC3E,2BAA2B,EAAE,qCAAC,GAAG,EAAA;IAAK,OAAA,GAAG,CAAC,cAAc,CAAC;EAAnB,CAAmB;EACzD,kBAAkB,EAAE,4BAAC,OAAO,EAAA;IAAK,OAAA,OAAO,CAAC,iBAAiB,CAAC;EAA1B,CAA0B;EAC3D,OAAO,EAAE;CACV","sourcesContent":["import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\n\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS: LoadedConfigSelectors<number> = {\n  environmentVariableSelector: (env) => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: (profile) => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS,\n};\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number | Provider<number>;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\n\ninterface PreviouslyResolved {}\nexport interface RetryResolvedConfig {\n  maxAttempts: Provider<number>;\n  retryStrategy: RetryStrategy;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts: number | Provider<number> = DEFAULT_MAX_ATTEMPTS): Provider<number> => {\n  if (typeof maxAttempts === \"number\") {\n    const promisified = Promise.resolve(maxAttempts);\n    return () => promisified;\n  }\n  return maxAttempts;\n};\n\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\n\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n  configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}