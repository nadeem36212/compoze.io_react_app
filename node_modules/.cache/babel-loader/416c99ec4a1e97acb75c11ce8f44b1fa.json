{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\n\n/**\n * Returns a Buffer with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Buffer} fixed-length sequence of random bytes\n */\n\nfunction randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n}\nimport BigInteger from './BigInteger';\n\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\nvar HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  var _proto = AuthenticationHelper.prototype;\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */;\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */;\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    // This will be interpreted as a postive 128-bit integer\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n\n    return randomBigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */;\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */;\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */;\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */;\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */;\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n\n    // The random hex will be unambiguously represented as a postive integer\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */;\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n      callback(null, A);\n    });\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */;\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */;\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */;\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\n      callback(null, hkdf);\n    });\n  }\n\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */;\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n\n  /**\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n   *\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n   *\n   * Examples showing how ambiguity is avoided by left padding with:\n   * \t\"00\" (for positive values where the most-significant-bit is set)\n   *  \"FF\" (for negative values where the most-significant-bit is set)\n   *\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n   * padHex(bigInteger.fromInt(20))    === \"14\"\n   *\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n   * padHex(bigInteger.fromInt(56))    === \"38\"\n   *\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\n   *\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\n   *\n   * @param {BigInteger} bigInt Number to encode.\n   * @returns {String} even-length hex string of the two's complement encoding.\n   */;\n  _proto.padHex = function padHex(bigInt) {\n    if (!(bigInt instanceof BigInteger)) {\n      throw new Error('Not a BigInteger');\n    }\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n\n    /* Get a hex string for abs(bigInt) */\n    var hexStr = bigInt.abs().toString(16);\n\n    /* Pad hex to even length if needed */\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n\n    /* Prepend \"00\" if the most significant bit is set */\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n    if (isNegative) {\n      /* Flip the bits of the representation */\n      var invertedNibbles = hexStr.split('').map(function (x) {\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\n        return '0123456789ABCDEF'.charAt(invertedNibble);\n      }).join('');\n\n      /* After flipping the bits, add one to get the 2's complement representation */\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n      hexStr = flippedBitsBI.toString(16);\n\n      /*\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\n      without changing the represented value.\n      \t\tThis only happens in the case when the input is 80...00\n      */\n      if (hexStr.toUpperCase().startsWith('FF8')) {\n        hexStr = hexStr.substring(2);\n      }\n    }\n    return hexStr;\n  };\n  return AuthenticationHelper;\n}();\nexport { AuthenticationHelper as default };","map":{"version":3,"names":["Buffer","CryptoJS","SHA256","HmacSHA256","WordArray","randomBytes","nBytes","from","random","toString","BigInteger","HEX_MSB_REGEX","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","padHex","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","_proto","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","modPow","verifierDevicesNotPadded","a","_this3","A","mod","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","str","lib","create","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsWordArray","concat","String","fromCharCode","ikmWordArray","saltWordArray","prk","hmac","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","isNegative","compareTo","abs","test","invertedNibbles","split","map","x","invertedNibble","parseInt","charAt","flippedBitsBI","ONE","toUpperCase","startsWith","substring","default"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\n\n/**\n * Returns a Buffer with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Buffer} fixed-length sequence of random bytes\n */\n\nfunction randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n}\nimport BigInteger from './BigInteger';\n\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\nvar HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  var _proto = AuthenticationHelper.prototype;\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */;\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */;\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    // This will be interpreted as a postive 128-bit integer\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n\n    return randomBigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */;\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */;\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */;\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */;\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */;\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n\n    // The random hex will be unambiguously represented as a postive integer\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */;\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n      callback(null, A);\n    });\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */;\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */;\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */;\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\n      callback(null, hkdf);\n    });\n  }\n\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */;\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n\n  /**\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n   *\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n   *\n   * Examples showing how ambiguity is avoided by left padding with:\n   * \t\"00\" (for positive values where the most-significant-bit is set)\n   *  \"FF\" (for negative values where the most-significant-bit is set)\n   *\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n   * padHex(bigInteger.fromInt(20))    === \"14\"\n   *\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n   * padHex(bigInteger.fromInt(56))    === \"38\"\n   *\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\n   *\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\n   *\n   * @param {BigInteger} bigInt Number to encode.\n   * @returns {String} even-length hex string of the two's complement encoding.\n   */;\n  _proto.padHex = function padHex(bigInt) {\n    if (!(bigInt instanceof BigInteger)) {\n      throw new Error('Not a BigInteger');\n    }\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n\n    /* Get a hex string for abs(bigInt) */\n    var hexStr = bigInt.abs().toString(16);\n\n    /* Pad hex to even length if needed */\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n\n    /* Prepend \"00\" if the most significant bit is set */\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n    if (isNegative) {\n      /* Flip the bits of the representation */\n      var invertedNibbles = hexStr.split('').map(function (x) {\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\n        return '0123456789ABCDEF'.charAt(invertedNibble);\n      }).join('');\n\n      /* After flipping the bits, add one to get the 2's complement representation */\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n      hexStr = flippedBitsBI.toString(16);\n\n      /*\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\n      without changing the represented value.\n      \t\tThis only happens in the case when the input is 80...00\n      */\n      if (hexStr.toUpperCase().startsWith('FF8')) {\n        hexStr = hexStr.substring(2);\n      }\n    }\n    return hexStr;\n  };\n  return AuthenticationHelper;\n}();\nexport { AuthenticationHelper as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}