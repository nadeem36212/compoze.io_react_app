{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\n/**\n * @internal\n */\nexport function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {\n  var e_1, _b;\n  var headers = _a.headers;\n  var canonical = {};\n  try {\n    for (var _c = __values(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      var canonicalHeaderName = headerName.toLowerCase();\n      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n          continue;\n        }\n      }\n      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return canonical;\n}","map":{"version":3,"sources":["../../src/getCanonicalHeaders.ts"],"names":[],"mappings":";AAEA,SAAS,yBAAyB,EAAE,oBAAoB,EAAE,kBAAkB,QAAQ,aAAa;AAEjG;;AAEG;AACH,OAAM,SAAU,mBAAmB,CACjC,EAAwB,EACxB,iBAA+B,EAC/B,eAA6B,EAAA;;MAF3B,OAAO,GAAA,EAAA,CAAA,OAAA;EAIT,IAAM,SAAS,GAAc,CAAA,CAAE;;IAC/B,KAAyB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;MAAjD,IAAM,UAAU,GAAA,EAAA,CAAA,KAAA;MACnB,IAAM,mBAAmB,GAAG,UAAU,CAAC,WAAW,EAAE;MACpD,IACE,mBAAmB,IAAI,yBAAyB,KAChD,iBAAiB,KAAA,IAAA,IAAjB,iBAAiB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjB,iBAAiB,CAAE,GAAG,CAAC,mBAAmB,CAAA,CAAC,IAC3C,oBAAoB,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAC9C,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAC5C;QACA,IAAI,CAAC,eAAe,IAAK,eAAe,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,mBAAmB,CAAE,EAAE;UACtF;QACD;MACF;MAED,SAAS,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACjF;;;;;;;;;;;;EAED,OAAO,SAAS;AAClB","sourcesContent":["import { HeaderBag, HttpRequest } from \"@aws-sdk/types\";\n\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalHeaders(\n  { headers }: HttpRequest,\n  unsignableHeaders?: Set<string>,\n  signableHeaders?: Set<string>\n): HeaderBag {\n  const canonical: HeaderBag = {};\n  for (const headerName of Object.keys(headers).sort()) {\n    const canonicalHeaderName = headerName.toLowerCase();\n    if (\n      canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n      unsignableHeaders?.has(canonicalHeaderName) ||\n      PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n      SEC_HEADER_PATTERN.test(canonicalHeaderName)\n    ) {\n      if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n        continue;\n      }\n    }\n\n    canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n  }\n\n  return canonical;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}