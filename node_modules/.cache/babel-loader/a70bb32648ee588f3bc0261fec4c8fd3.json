{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nexport function resolveAwsAuthConfig(input) {\n  var _this = this;\n  var credentials = input.credentials || input.credentialDefaultProvider(input);\n  var normalizedCreds = normalizeProvider(credentials);\n  var _a = input.signingEscapePath,\n    signingEscapePath = _a === void 0 ? true : _a,\n    _b = input.systemClockOffset,\n    systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n    sha256 = input.sha256;\n  var signer;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = function signer() {\n      return normalizeProvider(input.region)().then(function (region) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4 /*yield*/, input.regionInfoProvider(region)];\n              case 1:\n                return [2 /*return*/, [_a.sent() || {}, region]];\n            }\n          });\n        });\n      }).then(function (_a) {\n        var _b = __read(_a, 2),\n          regionInfo = _b[0],\n          region = _b[1];\n        var signingRegion = regionInfo.signingRegion,\n          signingService = regionInfo.signingService;\n        //update client's singing region and signing service config if they are resolved.\n        //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n        input.signingRegion = input.signingRegion || signingRegion || region;\n        //signing name resolving order:\n        //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n        input.signingName = input.signingName || signingService || input.serviceId;\n        return new SignatureV4({\n          credentials: normalizedCreds,\n          region: input.signingRegion,\n          service: input.signingName,\n          sha256: sha256,\n          uriEscapePath: signingEscapePath\n        });\n      });\n    };\n  }\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n}\nfunction normalizeProvider(input) {\n  if (typeof input === \"object\") {\n    var promisified_1 = Promise.resolve(input);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return input;\n}","map":{"version":3,"sources":["../../src/configurations.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAQ,uBAAuB;AA4CnD,OAAM,SAAU,oBAAoB,CAAI,KAAkD,EAAA;EAA1F,IAAA,KAAA,GAAA,IAAA;EACE,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,yBAAyB,CAAC,KAAY,CAAC;EACtF,IAAM,eAAe,GAAG,iBAAiB,CAAC,WAAW,CAAC;EAC9C,IAAA,EAAA,GAAuF,KAAK,CAAA,iBAApE;IAAxB,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IAAE,EAAA,GAA6D,KAAK,CAAA,iBAAlB;IAAhD,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,CAAC,iBAAiB,IAAI,CAAC,GAAA,EAAA;IAAE,MAAM,GAAK,KAAK,CAAA,MAAV;EAC1F,IAAI,MAA+B;EACnC,IAAI,KAAK,CAAC,MAAM,EAAE;IAChB;IACA,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC;GACzC,MAAM;IACL;IACA,MAAM,GAAG,kBAAA;MACP,OAAA,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAC9B,IAAI,CAAC,UAAO,MAAM,EAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;UAAA,OAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;;;gBAAO,OAAA,CAAA,CAAA,CAAA,WAAM,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;;gBAAxC,OAAA,CAAA,CAAA,CAAA,YAAA,CAAE,EAAA,CAAA,IAAA,EAAsC,IAAK,CAAA,CAAE,EAAE,MAAM,CAAyB,CAAA;YAAA;;;OAAA,CAAC,CACxG,IAAI,CAAC,UAAC,EAAoB,EAAA;YAApB,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAoB;UAAnB,UAAU,GAAA,EAAA,CAAA,CAAA,CAAA;UAAE,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;QAChB,IAAA,aAAa,GAAqB,UAAU,CAAA,aAA/B;UAAE,cAAc,GAAK,UAAU,CAAA,cAAf;QACrC;QACA;QACA,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,IAAI,aAAa,IAAI,MAAM;QACpE;QACA;QACA,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,cAAc,IAAI,KAAK,CAAC,SAAS;QAE1E,OAAO,IAAI,WAAW,CAAC;UACrB,WAAW,EAAE,eAAe;UAC5B,MAAM,EAAE,KAAK,CAAC,aAAa;UAC3B,OAAO,EAAE,KAAK,CAAC,WAAW;UAC1B,MAAM,EAAA,MAAA;UACN,aAAa,EAAE;SAChB,CAAC;MACJ,CAAC,CAAC;IAlBJ,CAkBI;EACP;EAED,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;IACR,iBAAiB,EAAA,iBAAA;IACjB,iBAAiB,EAAA,iBAAA;IACjB,WAAW,EAAE,eAAe;IAC5B,MAAM,EAAA;EAAA,CAAA,CAAA;AAEV;AAEA,SAAS,iBAAiB,CAAI,KAAsB,EAAA;EAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;IAC1C,OAAO,YAAA;MAAM,OAAA,aAAW;IAAX,CAAW;EACzB;EACD,OAAO,KAAoB;AAC7B","sourcesContent":["import { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { Credentials, HashConstructor, Provider, RegionInfo, RegionInfoProvider, RequestSigner } from \"@aws-sdk/types\";\n\nexport interface AwsAuthInputConfig {\n  /**\n   * The credentials used to sign requests.\n   */\n  credentials?: Credentials | Provider<Credentials>;\n\n  /**\n   * The signer to use when signing requests.\n   */\n  signer?: RequestSigner | Provider<RequestSigner>;\n\n  /**\n   * Whether to escape request path when signing the request.\n   */\n  signingEscapePath?: boolean;\n\n  /**\n   * An offset value in milliseconds to apply to all signing times.\n   */\n  systemClockOffset?: number;\n\n  /**\n   * The region where you want to sign your request against. This\n   * can be different to the region in the endpoint.\n   */\n  signingRegion?: string;\n}\ninterface PreviouslyResolved {\n  credentialDefaultProvider: (input: any) => Provider<Credentials>;\n  region: string | Provider<string>;\n  regionInfoProvider: RegionInfoProvider;\n  signingName?: string;\n  serviceId: string;\n  sha256: HashConstructor;\n}\nexport interface AwsAuthResolvedConfig {\n  credentials: Provider<Credentials>;\n  signer: Provider<RequestSigner>;\n  signingEscapePath: boolean;\n  systemClockOffset: number;\n}\nexport function resolveAwsAuthConfig<T>(input: T & AwsAuthInputConfig & PreviouslyResolved): T & AwsAuthResolvedConfig {\n  const credentials = input.credentials || input.credentialDefaultProvider(input as any);\n  const normalizedCreds = normalizeProvider(credentials);\n  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n  let signer: Provider<RequestSigner>;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = () =>\n      normalizeProvider(input.region)()\n        .then(async (region) => [(await input.regionInfoProvider(region)) || {}, region] as [RegionInfo, string])\n        .then(([regionInfo, region]) => {\n          const { signingRegion, signingService } = regionInfo;\n          //update client's singing region and signing service config if they are resolved.\n          //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n          input.signingRegion = input.signingRegion || signingRegion || region;\n          //signing name resolving order:\n          //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n          input.signingName = input.signingName || signingService || input.serviceId;\n\n          return new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.signingRegion,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n          });\n        });\n  }\n\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer,\n  };\n}\n\nfunction normalizeProvider<T>(input: T | Provider<T>): Provider<T> {\n  if (typeof input === \"object\") {\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n  }\n  return input as Provider<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}