{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getComponents } from './productAPI';\n// import { fetchCount } from './counterAPI';\n\nvar initialState = {\n  components: []\n};\nexport var fetchProductDetails = createAsyncThunk('products/fetchProductDetails', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var productName;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            productName = _ref.productName;\n            _context.next = 3;\n            return getComponents(productName);\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport var selectComponents = function selectComponents(state) {\n  return state.productDetails.components;\n};\nexport var productDetailsSlice = createSlice({\n  name: 'productDetails',\n  initialState: initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchProductDetails.fulfilled, function (state, action) {\n      state.components = action.payload;\n    });\n  }\n});\nexport default productDetailsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getComponents","initialState","components","fetchProductDetails","productName","selectComponents","state","productDetails","productDetailsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","reducer"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/products/details/productDetailsSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\nimport { Component } from '../../component/componentSlice';\nimport { getComponents } from './productAPI';\n// import { fetchCount } from './counterAPI';\n\n\nexport interface ProductDetailsState {\n  components: Component[];\n}\n\ninterface GetProductComponentsThunkArgs {\n  productName: string;\n}\nconst initialState: ProductDetailsState = {\n  components: [],\n};\n\nexport const fetchProductDetails = createAsyncThunk(\n  'products/fetchProductDetails',\n  async ({ productName }: GetProductComponentsThunkArgs) => {\n\n    return await getComponents(productName)\n  }\n);\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectComponents = (state: RootState) => state.productDetails.components;\n\n\nexport const productDetailsSlice = createSlice({\n  name: 'productDetails',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchProductDetails.fulfilled, (state, action) => {\n      state.components = action.payload;\n    });\n  },\n});\n\nexport default productDetailsSlice.reducer;\n"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAGhE,SAASC,aAAa,QAAQ,cAAc;AAC5C;;AAUA,IAAMC,YAAiC,GAAG;EACxCC,UAAU,EAAE;AACd,CAAC;AAED,OAAO,IAAMC,mBAAmB,GAAGL,gBAAgB,CACjD,8BAA8B;EAAA,uEAC9B;IAAA;IAAA;MAAA;QAAA;UAAA;YAASM,WAAW,QAAXA,WAAW;YAAA;YAAA,OAELJ,aAAa,CAACI,WAAW,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACxC;EAAA;IAAA;EAAA;AAAA,IACF;AACD;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,KAAgB;EAAA,OAAKA,KAAK,CAACC,cAAc,CAACL,UAAU;AAAA;AAGrF,OAAO,IAAMM,mBAAmB,GAAGT,WAAW,CAAC;EAC7CU,IAAI,EAAE,gBAAgB;EACtBR,YAAY,EAAZA,YAAY;EACZ;EACAS,QAAQ,EAAE,CAAC,CAAC;EACZ;EACA;EACAC,aAAa,EAAE,uBAACC,OAAO,EAAK;IAC1BA,OAAO,CAACC,OAAO,CAACV,mBAAmB,CAACW,SAAS,EAAE,UAACR,KAAK,EAAES,MAAM,EAAK;MAChET,KAAK,CAACJ,UAAU,GAAGa,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeR,mBAAmB,CAACS,OAAO"},"metadata":{},"sourceType":"module"}