{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function loggerMiddleware() {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4 /*yield*/, next(args)];\n            case 1:\n              response = _b.sent();\n              if (!logger) {\n                return [2 /*return*/, response];\n              }\n              if (typeof logger.info === \"function\") {\n                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                logger.info({\n                  clientName: clientName,\n                  commandName: commandName,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata),\n                  metadata: $metadata\n                });\n              }\n              return [2 /*return*/, response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport var getLoggerPlugin = function getLoggerPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/loggerMiddleware.ts"],"names":[],"mappings":";AAYA,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,GAAG;EAAM,OAAA,UACpC,IAAoC,EACpC,OAAgC,EAAA;IACG,OAAA,UACnC,IAAqC,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;cAE7B,UAAU,GAA6E,OAAO,CAAA,UAApF,EAAE,WAAW,GAAgE,OAAO,CAAA,WAAvE,EAAE,uBAAuB,GAAuC,OAAO,CAAA,uBAA9C,EAAE,MAAM,GAA+B,OAAO,CAAA,MAAtC,EAAE,wBAAwB,GAAK,OAAO,CAAA,wBAAZ;cAEzE,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,IAAI,CAAC,CAAA;;cAA3B,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAgB;cAEjC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CAAA;cAChB;cAED,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC/B,EAAA,GAA0C,QAAQ,CAAC,MAAM,EAAvD,SAAS,GAAA,EAAA,CAAA,SAAA,EAAK,qBAAqB,GAAA,MAAA,CAAA,EAAA,EAArC,CAAA,WAAA,CAAuC,CAAF;gBAC3C,MAAM,CAAC,IAAI,CAAC;kBACV,UAAU,EAAA,UAAA;kBACV,WAAW,EAAA,WAAA;kBACX,KAAK,EAAE,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC;kBAC1C,MAAM,EAAE,wBAAwB,CAAC,qBAAqB,CAAC;kBACvD,QAAQ,EAAE;iBACX,CAAC;cACH;cAED,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CAAA;UAAC;;;KACjB;EAvBoC,CAuBpC;AA1BqC,CA0BrC;AAED,OAAO,IAAM,uBAAuB,GAAgD;EAClF,IAAI,EAAE,kBAAkB;EACxB,IAAI,EAAE,CAAC,QAAQ,CAAC;EAChB,IAAI,EAAE,YAAY;EAClB,QAAQ,EAAE;CACX;AAED;AACA,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,OAAY,EAAA;EAA0B,OAAC;IACrE,YAAY,EAAE,sBAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,uBAAuB,CAAC;IAC9D;GACD;AAJqE,CAIpE","sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  HandlerExecutionContext,\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: InitializeHandler<any, Output>,\n  context: HandlerExecutionContext\n): InitializeHandler<any, Output> => async (\n  args: InitializeHandlerArguments<any>\n): Promise<InitializeHandlerOutput<Output>> => {\n  const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  if (typeof logger.info === \"function\") {\n    const { $metadata, ...outputWithoutMetadata } = response.output;\n    logger.info({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n      metadata: $metadata,\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: InitializeHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}