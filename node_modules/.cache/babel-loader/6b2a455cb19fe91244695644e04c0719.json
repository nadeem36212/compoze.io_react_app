{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\nvar AmplifyClass = /** @class */function () {\n  function AmplifyClass() {\n    // Everything that is `register`ed is tracked here\n    this._components = [];\n    this._config = {};\n    // All modules (with `getModuleName()`) are stored here for dependency injection\n    this._modules = {};\n    // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n    this.Auth = null;\n    this.Analytics = null;\n    this.API = null;\n    this.Credentials = null;\n    this.Storage = null;\n    this.I18n = null;\n    this.Cache = null;\n    this.PubSub = null;\n    this.Interactions = null;\n    this.Pushnotification = null;\n    this.UI = null;\n    this.XR = null;\n    this.Predictions = null;\n    this.DataStore = null;\n    this.Geo = null;\n    this.Logger = LoggerClass;\n    this.ServiceWorker = null;\n  }\n  AmplifyClass.prototype.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n    this._components.push(comp);\n    if (typeof comp.getModuleName === 'function') {\n      this._modules[comp.getModuleName()] = comp;\n      this[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    }\n    // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n    comp.configure(this._config);\n  };\n  AmplifyClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config);\n    // Dependency Injection via property-setting.\n    // This avoids introducing a public method/interface/setter that's difficult to remove later.\n    // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n    Object.entries(this._modules).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        Name = _b[0],\n        comp = _b[1];\n      // e.g. Auth.*\n      Object.keys(comp).forEach(function (property) {\n        // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n        if (_this._modules[property]) {\n          comp[property] = _this._modules[property];\n        }\n      });\n    });\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n    return this._config;\n  };\n  AmplifyClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n  return AmplifyClass;\n}();\nexport { AmplifyClass };\nexport var Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\nexport default Amplify;","map":{"version":3,"sources":["../src/Amplify.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\nvar AmplifyClass = /** @class */ (function () {\n    function AmplifyClass() {\n        // Everything that is `register`ed is tracked here\n        this._components = [];\n        this._config = {};\n        // All modules (with `getModuleName()`) are stored here for dependency injection\n        this._modules = {};\n        // for backward compatibility to avoid breaking change\n        // if someone is using like Amplify.Auth\n        this.Auth = null;\n        this.Analytics = null;\n        this.API = null;\n        this.Credentials = null;\n        this.Storage = null;\n        this.I18n = null;\n        this.Cache = null;\n        this.PubSub = null;\n        this.Interactions = null;\n        this.Pushnotification = null;\n        this.UI = null;\n        this.XR = null;\n        this.Predictions = null;\n        this.DataStore = null;\n        this.Geo = null;\n        this.Logger = LoggerClass;\n        this.ServiceWorker = null;\n    }\n    AmplifyClass.prototype.register = function (comp) {\n        logger.debug('component registered in amplify', comp);\n        this._components.push(comp);\n        if (typeof comp.getModuleName === 'function') {\n            this._modules[comp.getModuleName()] = comp;\n            this[comp.getModuleName()] = comp;\n        }\n        else {\n            logger.debug('no getModuleName method for component', comp);\n        }\n        // Finally configure this new component(category) loaded\n        // With the new modularization changes in Amplify V3, all the Amplify\n        // component are not loaded/registered right away but when they are\n        // imported (and hence instantiated) in the client's app. This ensures\n        // that all new components imported get correctly configured with the\n        // configuration that Amplify.configure() was called with.\n        comp.configure(this._config);\n    };\n    AmplifyClass.prototype.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config;\n        this._config = Object.assign(this._config, config);\n        logger.debug('amplify config', this._config);\n        // Dependency Injection via property-setting.\n        // This avoids introducing a public method/interface/setter that's difficult to remove later.\n        // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n        Object.entries(this._modules).forEach(function (_a) {\n            var _b = __read(_a, 2), Name = _b[0], comp = _b[1];\n            // e.g. Auth.*\n            Object.keys(comp).forEach(function (property) {\n                // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n                if (_this._modules[property]) {\n                    comp[property] = _this._modules[property];\n                }\n            });\n        });\n        this._components.map(function (comp) {\n            comp.configure(_this._config);\n        });\n        return this._config;\n    };\n    AmplifyClass.prototype.addPluggable = function (pluggable) {\n        if (pluggable &&\n            pluggable['getCategory'] &&\n            typeof pluggable['getCategory'] === 'function') {\n            this._components.map(function (comp) {\n                if (comp['addPluggable'] &&\n                    typeof comp['addPluggable'] === 'function') {\n                    comp.addPluggable(pluggable);\n                }\n            });\n        }\n    };\n    return AmplifyClass;\n}());\nexport { AmplifyClass };\nexport var Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\nexport default Amplify;\n//# sourceMappingURL=Amplify.js.map"]},"metadata":{},"sourceType":"module"}