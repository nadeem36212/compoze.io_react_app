{"ast":null,"code":"export function requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = \"TimeoutError\";\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/request-timeout.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,cAAc,CAAC,WAAe,EAAA;EAAf,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,CAAe;EAAA;EAC5C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;IACjC,IAAI,WAAW,EAAE;MACf,UAAU,CAAC,YAAA;QACT,IAAM,YAAY,GAAG,IAAI,KAAK,CAAC,kCAAA,GAAmC,WAAW,GAAA,KAAK,CAAC;QACnF,YAAY,CAAC,IAAI,GAAG,cAAc;QAClC,MAAM,CAAC,YAAY,CAAC;MACtB,CAAC,EAAE,WAAW,CAAC;IAChB;EACH,CAAC,CAAC;AACJ","sourcesContent":["export function requestTimeout(timeoutInMs = 0): Promise<never> {\n  return new Promise((resolve, reject) => {\n    if (timeoutInMs) {\n      setTimeout(() => {\n        const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);\n        timeoutError.name = \"TimeoutError\";\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}