{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\nvar AWSCloudWatchProvider = /** @class */function () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n    this._initiateLogPushInterval();\n  }\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2 /*return*/, this._dataTracker.verifiedLogGroup];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n          case 3:\n            currGroups = _a.sent();\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2 /*return*/, foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            return [4 /*yield*/, this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n          case 2:\n            currStreams = _a.sent();\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2 /*return*/, foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            return [4 /*yield*/, this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 2:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2 /*return*/, this._nextSequenceToken];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n          case 2:\n            _a.sent();\n            this._nextSequenceToken = undefined;\n            return [4 /*yield*/, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n          case 3:\n            logStream = _a.sent();\n            if (logStream) {\n              this._nextSequenceToken = logStream.uploadSequenceToken;\n            }\n            return [2 /*return*/, this._nextSequenceToken];\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._sendLogEvents(putLogsPayload)];\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsResponse];\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            this._nextSequenceToken = undefined;\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4 /*yield*/, this._sendLogEvents(payload)];\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsRepsonse];\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              if (!this._getDocUploadPermissibility()) return [3 /*break*/, 2];\n              return [4 /*yield*/, this._safeUploadLogEvents()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              return [3 /*break*/, 4];\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, 2000);\n  };\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\nexport { AWSCloudWatchProvider };","map":{"version":3,"sources":["../../src/Providers/AWSCloudWatchProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand, } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES, } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\nvar AWSCloudWatchProvider = /** @class */ (function () {\n    function AWSCloudWatchProvider(config) {\n        this.configure(config);\n        this._dataTracker = {\n            eventUploadInProgress: false,\n            logEvents: [],\n        };\n        this._currentLogBatch = [];\n        this._initiateLogPushInterval();\n    }\n    AWSCloudWatchProvider.prototype.getProviderName = function () {\n        return AWSCloudWatchProvider.PROVIDER_NAME;\n    };\n    AWSCloudWatchProvider.prototype.getCategoryName = function () {\n        return AWSCloudWatchProvider.CATEGORY;\n    };\n    AWSCloudWatchProvider.prototype.getLogQueue = function () {\n        return this._dataTracker.logEvents;\n    };\n    AWSCloudWatchProvider.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);\n        this._config = conf;\n        return this._config;\n    };\n    AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n                        cmd = new CreateLogGroupCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.error(\"error creating log group - \" + error_1);\n                        throw error_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting list of log groups');\n                        cmd = new DescribeLogGroupsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.error(\"error getting log group - \" + error_2);\n                        throw error_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n                        cmd = new CreateLogStreamCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_3 = _a.sent();\n                        logger.error(\"error creating log stream - \" + error_3);\n                        throw error_3;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting list of log streams');\n                        cmd = new DescribeLogStreamsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_4 = _a.sent();\n                        logger.error(\"error getting log stream - \" + error_4);\n                        throw error_4;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting log events from stream - ', params.logStreamName);\n                        cmd = new GetLogEventsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_5 = _a.sent();\n                        logger.error(\"error getting log events - \" + error_5);\n                        throw error_5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n        logger.debug('pushing log events to Cloudwatch...');\n        this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n    };\n    AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, currGroups, foundGroups, err_1, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._dataTracker.verifiedLogGroup) {\n                            return [2 /*return*/, this._dataTracker.verifiedLogGroup];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        return [4 /*yield*/, this.getLogGroups({\n                                logGroupNamePrefix: logGroupName,\n                            })];\n                    case 3:\n                        currGroups = _a.sent();\n                        if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n                            foundGroups = currGroups.logGroups.filter(function (group) { return group.logGroupName === logGroupName; });\n                            if (foundGroups.length > 0) {\n                                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                                return [2 /*return*/, foundGroups[0]];\n                            }\n                        }\n                        /**\n                         * If we get to this point, it means that the specified log group does not exist\n                         * and we should create it.\n                         */\n                        return [4 /*yield*/, this.createLogGroup({ logGroupName: logGroupName })];\n                    case 4:\n                        /**\n                         * If we get to this point, it means that the specified log group does not exist\n                         * and we should create it.\n                         */\n                        _a.sent();\n                        return [2 /*return*/, null];\n                    case 5:\n                        err_1 = _a.sent();\n                        errString = \"failure during log group search: \" + err_1;\n                        logger.error(errString);\n                        throw err_1;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, currStreams, foundStreams, err_2, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        return [4 /*yield*/, this.getLogStreams({\n                                logGroupName: logGroupName,\n                                logStreamNamePrefix: logStreamName,\n                            })];\n                    case 2:\n                        currStreams = _a.sent();\n                        if (currStreams.logStreams) {\n                            foundStreams = currStreams.logStreams.filter(function (stream) { return stream.logStreamName === logStreamName; });\n                            if (foundStreams.length > 0) {\n                                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                                return [2 /*return*/, foundStreams[0]];\n                            }\n                        }\n                        /**\n                         * If we get to this point, it means that the specified stream does not\n                         * exist, and we should create it now.\n                         */\n                        return [4 /*yield*/, this.createLogStream({\n                                logGroupName: logGroupName,\n                                logStreamName: logStreamName,\n                            })];\n                    case 3:\n                        /**\n                         * If we get to this point, it means that the specified stream does not\n                         * exist, and we should create it now.\n                         */\n                        _a.sent();\n                        return [2 /*return*/, null];\n                    case 4:\n                        err_2 = _a.sent();\n                        errString = \"failure during log stream search: \" + err_2;\n                        logger.error(errString);\n                        throw err_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, cmd, client, output, err_3, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error(NO_CREDS_ERROR_STRING);\n                        }\n                        logger.debug('sending log events to stream - ', params.logStreamName);\n                        cmd = new PutLogEventsCommand(params);\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 2:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 3:\n                        err_3 = _a.sent();\n                        errString = \"failure during log push: \" + err_3;\n                        logger.error(errString);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n        return new CloudWatchLogsClient({\n            region: this._config.region,\n            credentials: this._config.credentials,\n            customUserAgent: getAmplifyUserAgent(),\n            endpoint: this._config.endpoint,\n        });\n    };\n    AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()\n                            .then(function (credentials) {\n                            if (!credentials)\n                                return false;\n                            var cred = Credentials.shear(credentials);\n                            logger.debug('set credentials for logging', cred);\n                            _this._config.credentials = cred;\n                            return true;\n                        })\n                            .catch(function (error) {\n                            logger.warn('ensure credentials error', error);\n                            return false;\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var logStream, err_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n                            return [2 /*return*/, this._nextSequenceToken];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n                    case 2:\n                        _a.sent();\n                        this._nextSequenceToken = undefined;\n                        return [4 /*yield*/, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n                    case 3:\n                        logStream = _a.sent();\n                        if (logStream) {\n                            this._nextSequenceToken = logStream.uploadSequenceToken;\n                        }\n                        return [2 /*return*/, this._nextSequenceToken];\n                    case 4:\n                        err_4 = _a.sent();\n                        logger.error(\"failure while getting next sequence token: \" + err_4);\n                        throw err_4;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this._getNextSequenceToken()];\n                    case 1:\n                        seqToken = _a.sent();\n                        logBatch = this._currentLogBatch.length === 0\n                            ? this._getBufferedBatchOfLogs()\n                            : this._currentLogBatch;\n                        putLogsPayload = {\n                            logGroupName: this._config.logGroupName,\n                            logStreamName: this._config.logStreamName,\n                            logEvents: logBatch,\n                            sequenceToken: seqToken,\n                        };\n                        this._dataTracker.eventUploadInProgress = true;\n                        return [4 /*yield*/, this._sendLogEvents(putLogsPayload)];\n                    case 2:\n                        sendLogEventsResponse = _a.sent();\n                        this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n                        this._dataTracker.eventUploadInProgress = false;\n                        this._currentLogBatch = [];\n                        return [2 /*return*/, sendLogEventsResponse];\n                    case 3:\n                        err_5 = _a.sent();\n                        logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n                        if (RETRY_ERROR_CODES.includes(err_5.name)) {\n                            this._getNewSequenceTokenAndSubmit({\n                                logEvents: this._currentLogBatch,\n                                logGroupName: this._config.logGroupName,\n                                logStreamName: this._config.logStreamName,\n                            });\n                        }\n                        else {\n                            this._dataTracker.eventUploadInProgress = false;\n                            throw err_5;\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n        /**\n         * CloudWatch has restrictions on the size of the log events that get sent up.\n         * We need to track both the size of each event and the total size of the batch\n         * of logs.\n         *\n         * We also need to ensure that the logs in the batch are sorted in chronological order.\n         * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n         */\n        var currentEventIdx = 0;\n        var totalByteSize = 0;\n        while (currentEventIdx < this._dataTracker.logEvents.length) {\n            var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n            var eventSize = currentEvent\n                ? new TextEncoder().encode(currentEvent.message).length +\n                    AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n                : 0;\n            if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n                var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n                logger.warn(errString);\n                currentEvent.message = currentEvent.message.substring(0, eventSize);\n            }\n            if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n                break;\n            totalByteSize += eventSize;\n            currentEventIdx++;\n        }\n        this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n        return this._currentLogBatch;\n    };\n    AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var seqToken, sendLogEventsRepsonse, err_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        this._nextSequenceToken = undefined;\n                        this._dataTracker.eventUploadInProgress = true;\n                        return [4 /*yield*/, this._getNextSequenceToken()];\n                    case 1:\n                        seqToken = _a.sent();\n                        payload.sequenceToken = seqToken;\n                        return [4 /*yield*/, this._sendLogEvents(payload)];\n                    case 2:\n                        sendLogEventsRepsonse = _a.sent();\n                        this._dataTracker.eventUploadInProgress = false;\n                        this._currentLogBatch = [];\n                        return [2 /*return*/, sendLogEventsRepsonse];\n                    case 3:\n                        err_6 = _a.sent();\n                        logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n                        this._dataTracker.eventUploadInProgress = false;\n                        throw err_6;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n        var _this = this;\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        this._timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {\n            var err_7;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        if (!this._getDocUploadPermissibility()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._safeUploadLogEvents()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [3 /*break*/, 4];\n                    case 3:\n                        err_7 = _a.sent();\n                        logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); }, 2000);\n    };\n    AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n        return ((this._dataTracker.logEvents.length !== 0 ||\n            this._currentLogBatch.length !== 0) &&\n            !this._dataTracker.eventUploadInProgress);\n    };\n    AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n    AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n    return AWSCloudWatchProvider;\n}());\nexport { AWSCloudWatchProvider };\n//# sourceMappingURL=AWSCloudWatchProvider.js.map"]},"metadata":{},"sourceType":"module"}