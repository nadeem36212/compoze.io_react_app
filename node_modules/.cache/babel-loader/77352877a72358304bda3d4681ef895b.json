{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport bowser from \"bowser\";\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport var defaultUserAgent = function defaultUserAgent(_a) {\n  var serviceId = _a.serviceId,\n    clientVersion = _a.clientVersion;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var parsedUA, sections;\n      var _a, _b, _c, _d, _e, _f, _g;\n      return __generator(this, function (_h) {\n        parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;\n        sections = [\n        // sdk-metadata\n        [\"aws-sdk-js\", clientVersion],\n        // os-metadata\n        [\"os/\" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || \"other\"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],\n        // language-metadata\n        // ECMAScript edition doesn't matter in JS.\n        [\"lang/js\"],\n        // browser vendor and version.\n        [\"md/browser\", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : \"unknown\") + \"_\" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : \"unknown\")]];\n        if (serviceId) {\n          // api-metadata\n          // service Id may not appear in non-AWS clients\n          sections.push([\"api/\" + serviceId, clientVersion]);\n        }\n        return [2 /*return*/, sections];\n      });\n    });\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AACA,OAAO,MAAM,MAAM,QAAQ;AAI3B;;;AAGG;AACH,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,EAGP,EAAA;MAFxB,SAAS,GAAA,EAAA,CAAA,SAAA;IACT,aAAa,GAAA,EAAA,CAAA,aAAA;EACqC,OAAA,YAAA;IAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;QAC5C,QAAQ,GAAG,CAAA,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,IAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS;QAC9F,QAAQ,GAAc;QAC1B;QACA,CAAC,YAAY,EAAE,aAAa,CAAC;QAC7B;QACA,CAAC,KAAA,IAAM,CAAA,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,KAAI,OAAO,CAAE,EAAA,CAAA,EAAA,GAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC;QAC9D;QACA;QACA,CAAC,SAAS,CAAC;QACX;QACA,CAAC,YAAY,EAAE,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,IAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAI,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,CAAE,CAAC,CACrG;QAED,IAAI,SAAS,EAAE;UACb;UACA;UACA,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAA,GAAO,SAAW,EAAE,aAAa,CAAC,CAAC;QACnD;QAED,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CAAA;;;GAChB;AArBmD,CAqBnD","sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nimport bowser from \"bowser\";\n\nimport { DefaultUserAgentOptions } from \"./configurations\";\n\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport const defaultUserAgent = ({\n  serviceId,\n  clientVersion,\n}: DefaultUserAgentOptions): Provider<UserAgent> => async () => {\n  const parsedUA = window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;\n  const sections: UserAgent = [\n    // sdk-metadata\n    [\"aws-sdk-js\", clientVersion],\n    // os-metadata\n    [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n    // language-metadata\n    // ECMAScript edition doesn't matter in JS.\n    [\"lang/js\"],\n    // browser vendor and version.\n    [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n  ];\n\n  if (serviceId) {\n    // api-metadata\n    // service Id may not appear in non-AWS clients\n    sections.push([`api/${serviceId}`, clientVersion]);\n  }\n\n  return sections;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}