{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TagResourceInput, TagResourceResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1TagResourceCommand, serializeAws_json1_1TagResourceCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can\n *          use to categorize and manage identity pools in different ways, such as by purpose, owner,\n *          environment, or other criteria.</p>\n *          <p>Each tag consists of a key and value, both of which you define. A key is a general\n *          category for more specific values. For example, if you have two versions of an identity\n *          pool, one for testing and another for production, you might assign an\n *             <code>Environment</code> tag key to both identity pools. The value of this key might be\n *             <code>Test</code> for one identity pool and <code>Production</code> for the\n *          other.</p>\n *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that\n *          they appear on the Billing and Cost Management console, where you can track the costs\n *          associated with your identity pools. In an IAM policy, you can constrain permissions for\n *          identity pools based on specific tags or tag values.</p>\n *          <p>You can use this action up to 5 times per second, per account. An identity pool can have\n *          as many as 50 tags.</p>\n */\nvar TagResourceCommand = /** @class */function (_super) {\n  __extends(TagResourceCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function TagResourceCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  TagResourceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"TagResourceCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,\n      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  TagResourceCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1TagResourceCommand(input, context);\n  };\n  TagResourceCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1TagResourceCommand(output, context);\n  };\n  return TagResourceCommand;\n}($Command);\nexport { TagResourceCommand };","map":{"version":3,"sources":["../../../commands/TagResourceCommand.ts"],"names":[],"mappings":";AACA,SAAS,gBAAgB,EAAE,mBAAmB,QAAQ,oBAAoB;AAC1E,SACE,wCAAwC,EACxC,sCAAsC,QACjC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAC1D,SAAS,gBAAgB,QAAQ,6BAA6B;AAE9D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;AAgBG;AACH,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwC,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;EAKtC;EACA;EAEA,SAAA,kBAAA,CAAqB,KAA8B,EAAA;IAAnD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,kBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAkD,EAClD,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IAEzD,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,uBAAuB;IAC1C,IAAM,WAAW,GAAG,oBAAoB;IACxC,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,gBAAgB,CAAC,kBAAkB;MAC5D,wBAAwB,EAAE,mBAAmB,CAAC;KAC/C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,kBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA8B,EAAE,OAAuB,EAAA;IACvE,OAAO,sCAAsC,CAAC,KAAK,EAAE,OAAO,CAAC;EAC/D,CAAC;EAEO,kBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,wCAAwC,CAAC,MAAM,EAAE,OAAO,CAAC;EAClE,CAAC;EAIH,OAAA,kBAAC;AAAD,CAAC,CAvDuC,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { TagResourceInput, TagResourceResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1TagResourceCommand, serializeAws_json1_1TagResourceCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can\n *          use to categorize and manage identity pools in different ways, such as by purpose, owner,\n *          environment, or other criteria.</p>\n *          <p>Each tag consists of a key and value, both of which you define. A key is a general\n *          category for more specific values. For example, if you have two versions of an identity\n *          pool, one for testing and another for production, you might assign an\n *             <code>Environment</code> tag key to both identity pools. The value of this key might be\n *             <code>Test</code> for one identity pool and <code>Production</code> for the\n *          other.</p>\n *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that\n *          they appear on the Billing and Cost Management console, where you can track the costs\n *          associated with your identity pools. In an IAM policy, you can constrain permissions for\n *          identity pools based on specific tags or tag values.</p>\n *          <p>You can use this action up to 5 times per second, per account. An identity pool can have\n *          as many as 50 tags.</p>\n */\nvar TagResourceCommand = /** @class */ (function (_super) {\n    __extends(TagResourceCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function TagResourceCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    TagResourceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getAwsAuthPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"CognitoIdentityClient\";\n        var commandName = \"TagResourceCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,\n            outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    TagResourceCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1TagResourceCommand(input, context);\n    };\n    TagResourceCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1TagResourceCommand(output, context);\n    };\n    return TagResourceCommand;\n}($Command));\nexport { TagResourceCommand };\n//# sourceMappingURL=TagResourceCommand.js.map"]},"metadata":{},"sourceType":"module"}