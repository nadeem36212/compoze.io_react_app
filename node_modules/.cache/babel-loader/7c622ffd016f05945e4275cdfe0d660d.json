{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateLogGroupRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateLogGroupCommand, serializeAws_json1_1CreateLogGroupCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>\n *          <p>You must use the following guidelines when naming a log group:</p>\n *          <ul>\n *             <li>\n *                <p>Log group names must be unique within a region for an AWS account.</p>\n *             </li>\n *             <li>\n *                <p>Log group names can be between 1 and 512 characters long.</p>\n *             </li>\n *             <li>\n *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),\n *           '/' (forward slash), '.' (period), and '#' (number sign)</p>\n *             </li>\n *          </ul>\n *          <p>When you create a log group, by default the log events in the log group never expire. To set\n *     a retention policy so that events expire and are deleted after a specified time, use\n *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\">PutRetentionPolicy</a>.</p>\n *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n *          <important>\n *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with\n *         your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n */\nvar CreateLogGroupCommand = /** @class */function (_super) {\n  __extends(CreateLogGroupCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function CreateLogGroupCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  CreateLogGroupCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"CreateLogGroupCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  CreateLogGroupCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateLogGroupCommand(input, context);\n  };\n  CreateLogGroupCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateLogGroupCommand(output, context);\n  };\n  return CreateLogGroupCommand;\n}($Command);\nexport { CreateLogGroupCommand };","map":{"version":3,"sources":["../../../commands/CreateLogGroupCommand.ts"],"names":[],"mappings":";AACA,SAAS,qBAAqB,QAAQ,oBAAoB;AAC1D,SACE,2CAA2C,EAC3C,yCAAyC,QACpC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACH,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2C,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;EAKzC;EACA;EAEA,SAAA,qBAAA,CAAqB,KAAiC,EAAA;IAAtD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,qBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAiD,EACjD,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,sBAAsB;IACzC,IAAM,WAAW,GAAG,uBAAuB;IAC3C,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,qBAAqB,CAAC,kBAAkB;MACjE,wBAAwB,EAAE,kCAAC,MAAW,EAAA;QAAK,OAAA,MAAM;MAAN;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,qBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAiC,EAAE,OAAuB,EAAA;IAC1E,OAAO,yCAAyC,CAAC,KAAK,EAAE,OAAO,CAAC;EAClE,CAAC;EAEO,qBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,2CAA2C,CAAC,MAAM,EAAE,OAAO,CAAC;EACrE,CAAC;EAIH,OAAA,qBAAC;AAAD,CAAC,CAtD0C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { CreateLogGroupRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateLogGroupCommand, serializeAws_json1_1CreateLogGroupCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>\n *          <p>You must use the following guidelines when naming a log group:</p>\n *          <ul>\n *             <li>\n *                <p>Log group names must be unique within a region for an AWS account.</p>\n *             </li>\n *             <li>\n *                <p>Log group names can be between 1 and 512 characters long.</p>\n *             </li>\n *             <li>\n *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),\n *           '/' (forward slash), '.' (period), and '#' (number sign)</p>\n *             </li>\n *          </ul>\n *          <p>When you create a log group, by default the log events in the log group never expire. To set\n *     a retention policy so that events expire and are deleted after a specified time, use\n *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\">PutRetentionPolicy</a>.</p>\n *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n *          <important>\n *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with\n *         your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n */\nvar CreateLogGroupCommand = /** @class */ (function (_super) {\n    __extends(CreateLogGroupCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function CreateLogGroupCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    CreateLogGroupCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"CloudWatchLogsClient\";\n        var commandName = \"CreateLogGroupCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    CreateLogGroupCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1CreateLogGroupCommand(input, context);\n    };\n    CreateLogGroupCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1CreateLogGroupCommand(output, context);\n    };\n    return CreateLogGroupCommand;\n}($Command));\nexport { CreateLogGroupCommand };\n//# sourceMappingURL=CreateLogGroupCommand.js.map"]},"metadata":{},"sourceType":"module"}