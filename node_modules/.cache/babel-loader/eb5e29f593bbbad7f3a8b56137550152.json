{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getCosts } from './costAPI';\nvar initialState = {\n  accounts: [],\n  failed: false,\n  failureReason: ''\n};\nexport var fetchCosts = createAsyncThunk('cost/fetchCosts', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var orgId, response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            orgId = _ref.orgId;\n            _context.next = 3;\n            return getCosts(orgId);\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport var selectCost = function selectCost(state) {\n  return state.cost.accounts;\n};\nexport var costSlice = createSlice({\n  name: 'cost',\n  initialState: initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchCosts.fulfilled, function (state, action) {\n      state.accounts = action.payload;\n    });\n    builder.addCase(fetchCosts.rejected, function (state, action) {\n      state.failed = true;\n      state.failureReason = action.error.message;\n    });\n  }\n});\nexport default costSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getCosts","initialState","accounts","failed","failureReason","fetchCosts","orgId","response","selectCost","state","cost","costSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","rejected","error","message","reducer"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/costs/costSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { getCosts } from './costAPI';\n\nexport interface AccountCost {\n  accountId: string;\n  nickName: string;\n  periodStart: string;\n  periodEnd: string;\n  totalCost: string;\n  forecastedAmount: string;\n}\n\nexport interface AccountCostState {\n  accounts: AccountCost[];\n  failed: boolean;\n  failureReason: string;\n}\n\ninterface GetCostsThunkArgs {\n  orgId: string;\n}\nconst initialState: AccountCostState = {\n  accounts: [],\n  failed: false,\n  failureReason: ''\n};\n\nexport const fetchCosts = createAsyncThunk(\n  'cost/fetchCosts',\n  async ({ orgId }: GetCostsThunkArgs) => {\n    \n    const response = await getCosts(orgId);\n\n    // The value we return becomes the `fulfilled` action payload\n    return response;\n  }\n);\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCost = (state: RootState) => state.cost.accounts;\n\nexport const costSlice = createSlice({\n  name: 'cost',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchCosts.fulfilled, (state, action) => {\n      state.accounts = action.payload;\n    });\n    builder.addCase(fetchCosts.rejected, (state, action) => {\n      state.failed = true;\n      state.failureReason = action.error.message!\n    });\n  },\n});\n\nexport default costSlice.reducer;\n"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,QAAQ,QAAQ,WAAW;AAoBpC,IAAMC,YAA8B,GAAG;EACrCC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,KAAK;EACbC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,IAAMC,UAAU,GAAGP,gBAAgB,CACxC,iBAAiB;EAAA,uEACjB;IAAA;IAAA;MAAA;QAAA;UAAA;YAASQ,KAAK,QAALA,KAAK;YAAA;YAAA,OAEWN,QAAQ,CAACM,KAAK,CAAC;UAAA;YAAhCC,QAAQ;YAAA,iCAGPA,QAAQ;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAChB;EAAA;IAAA;EAAA;AAAA,IACF;AACD;AACA;AACA;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAgB;EAAA,OAAKA,KAAK,CAACC,IAAI,CAACR,QAAQ;AAAA;AAEnE,OAAO,IAAMS,SAAS,GAAGZ,WAAW,CAAC;EACnCa,IAAI,EAAE,MAAM;EACZX,YAAY,EAAZA,YAAY;EACZ;EACAY,QAAQ,EAAE,CAAC,CAAC;EACZ;EACA;EACAC,aAAa,EAAE,uBAACC,OAAO,EAAK;IAC1BA,OAAO,CAACC,OAAO,CAACX,UAAU,CAACY,SAAS,EAAE,UAACR,KAAK,EAAES,MAAM,EAAK;MACvDT,KAAK,CAACP,QAAQ,GAAGgB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAACX,UAAU,CAACe,QAAQ,EAAE,UAACX,KAAK,EAAES,MAAM,EAAK;MACtDT,KAAK,CAACN,MAAM,GAAG,IAAI;MACnBM,KAAK,CAACL,aAAa,GAAGc,MAAM,CAACG,KAAK,CAACC,OAAQ;IAC7C,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeX,SAAS,CAACY,OAAO"},"metadata":{},"sourceType":"module"}