{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, Parser, browserOrNode, UniversalStorage, urlSafeDecode } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAuthEvent = function dispatchAuthEvent(event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nvar MAX_DEVICES = 60;\nvar MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n/**\n * Provide authentication steps\n */\nvar AuthClass = /** @class */function () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n    this.userPool = null;\n    this.user = null;\n    this.oAuthFlowInProgress = false;\n    this.autoSignInInitiated = false;\n    this.Credentials = Credentials;\n    this.wrapRefreshSessionCallback = function (callback) {\n      var wrapped = function wrapped(error, data) {\n        if (data) {\n          dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n        } else {\n          dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n        }\n        return callback(error, data);\n      };\n      return wrapped;\n    }; // prettier-ignore\n    this.configure(config);\n    this.currentCredentials = this.currentCredentials.bind(this);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n    Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n      switch (event) {\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n          break;\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n          break;\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n          break;\n      }\n    });\n  }\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, Parser.parseMobilehubConfig(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n      userPoolId = _a.userPoolId,\n      userPoolWebClientId = _a.userPoolWebClientId,\n      cookieStorage = _a.cookieStorage,\n      oauth = _a.oauth,\n      region = _a.region,\n      identityPoolId = _a.identityPoolId,\n      mandatorySignIn = _a.mandatorySignIn,\n      refreshHandlers = _a.refreshHandlers,\n      identityPoolRegion = _a.identityPoolRegion,\n      clientMetadata = _a.clientMetadata,\n      endpoint = _a.endpoint;\n    if (!this._config.storage) {\n      // backward compatability\n      if (cookieStorage) this._storage = new CookieStorage(cookieStorage);else {\n        this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n      this._storage = this._config.storage;\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId,\n        endpoint: endpoint\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n    }\n    this.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: identityPoolRegion || region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage\n    });\n    // initialize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n    var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener'],\n        clientMetadata: clientMetadata\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      });\n      // **NOTE** - Remove this in a future major release as it is a breaking change\n      // Prevents _handleAuthResponse from being called multiple times in Expo\n      // See https://github.com/aws-amplify/amplify-js/issues/4388\n      var usedResponseUrls_1 = {};\n      urlListener(function (_a) {\n        var url = _a.url;\n        if (usedResponseUrls_1[url]) {\n          return;\n        }\n        usedResponseUrls_1[url] = true;\n        _this._handleAuthResponse(url);\n      });\n    }\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    if (!this.autoSignInInitiated && typeof this._storage['getItem'] === 'function') {\n      var pollingInitiated = this.isTrueStorageValue('amplify-polling-started');\n      if (pollingInitiated) {\n        dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n        this._storage.removeItem('amplify-auto-sign-in');\n      }\n      this._storage.removeItem('amplify-polling-started');\n    }\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attributes like phone, email\n   * @param {String | object} params - The user attributes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n    var restOfAttrs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n    var _a, _b, _c;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n    var clientMetadata;\n    var autoSignIn = {\n      enabled: false\n    };\n    var autoSignInValidationData = {};\n    var autoSignInClientMetaData = {};\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push(new CognitoUserAttribute({\n        Name: 'email',\n        Value: email\n      }));\n      if (phone_number) attributes.push(new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone_number\n      }));\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n      if (params && params.clientMetadata) {\n        clientMetadata = params.clientMetadata;\n      } else if (this._config.clientMetadata) {\n        clientMetadata = this._config.clientMetadata;\n      }\n      var attrs_1 = params['attributes'];\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          attributes.push(new CognitoUserAttribute({\n            Name: key,\n            Value: attrs_1[key]\n          }));\n        });\n      }\n      var validationDataObject_1 = params['validationData'];\n      if (validationDataObject_1) {\n        validationData = [];\n        Object.keys(validationDataObject_1).map(function (key) {\n          validationData.push(new CognitoUserAttribute({\n            Name: key,\n            Value: validationDataObject_1[key]\n          }));\n        });\n      }\n      autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : {\n        enabled: false\n      };\n      if (autoSignIn.enabled) {\n        this._storage.setItem('amplify-auto-sign-in', 'true');\n        autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};\n        autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};\n      }\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.SignUpError);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          if (autoSignIn.enabled) {\n            _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.handleAutoSignIn = function (username, password, validationData, clientMetadata, data) {\n    this.autoSignInInitiated = true;\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (data.userConfirmed) {\n      this.signInAfterUserConfirmed(authDetails);\n    } else if (this._config.signUpVerificationMethod === 'link') {\n      this.handleLinkAutoSignIn(authDetails);\n    } else {\n      this.handleCodeAutoSignIn(authDetails);\n    }\n  };\n  AuthClass.prototype.handleCodeAutoSignIn = function (authDetails) {\n    var _this = this;\n    var listenEvent = function listenEvent(_a) {\n      var payload = _a.payload;\n      if (payload.event === 'confirmSignUp') {\n        _this.signInAfterUserConfirmed(authDetails, listenEvent);\n      }\n    };\n    Hub.listen('auth', listenEvent);\n  };\n  AuthClass.prototype.handleLinkAutoSignIn = function (authDetails) {\n    var _this = this;\n    this._storage.setItem('amplify-polling-started', 'true');\n    var start = Date.now();\n    var autoSignInPollingIntervalId = setInterval(function () {\n      if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n        clearInterval(autoSignInPollingIntervalId);\n        dispatchAuthEvent('autoSignIn_failure', null, 'Please confirm your account and use your credentials to sign in.');\n        _this._storage.removeItem('amplify-auto-sign-in');\n      } else {\n        _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);\n      }\n    }, 5000);\n  };\n  AuthClass.prototype.signInAfterUserConfirmed = function (authDetails, listenEvent, autoSignInPollingIntervalId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user, error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user = this.createCognitoUser(authDetails.getUsername());\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, user.authenticateUser(authDetails, this.authCallbacks(user, function (value) {\n              dispatchAuthEvent('autoSignIn', value, authDetails.getUsername() + \" has signed in successfully\");\n              if (listenEvent) {\n                Hub.remove('auth', listenEvent);\n              }\n              if (autoSignInPollingIntervalId) {\n                clearInterval(autoSignInPollingIntervalId);\n                _this._storage.removeItem('amplify-polling-started');\n              }\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }, function (error) {\n              logger.error(error);\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }))];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            logger.error(error_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Send the verification code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    var clientMetadata;\n    if (options && options.clientMetadata) {\n      clientMetadata = options.clientMetadata;\n    } else if (this._config.clientMetadata) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          dispatchAuthEvent('confirmSignUp', data, username + \" has been confirmed successfully\");\n          var autoSignIn = _this.isTrueStorageValue('amplify-auto-sign-in');\n          if (autoSignIn && !_this.autoSignInInitiated) {\n            dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n            _this._storage.removeItem('amplify-auto-sign-in');\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.isTrueStorageValue = function (value) {\n    var item = this._storage.getItem(value);\n    return item ? item === 'true' : false;\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n   * @return - A promise resolves code delivery details if successful\n   */\n  AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} pw - The password of the username\n   * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n   * @return - A promise resolves the CognitoUser\n   */\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var validationData = {};\n    // for backward compatibility\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n    var that = this;\n    return {\n      onSuccess: function onSuccess(session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n                return [4 /*yield*/, this.Credentials.clear()];\n              case 2:\n                _a.sent();\n                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3 /*break*/, 9];\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3 /*break*/, 9];\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n                return [4 /*yield*/, this.currentUserPoolUser()];\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3 /*break*/, 8];\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3 /*break*/, 8];\n              case 8:\n                return [7 /*endfinally*/];\n              case 9:\n                return [2 /*return*/];\n            }\n          });\n        });\n      },\n\n      onFailure: function onFailure(err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function customChallenge(challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function mfaRequired(challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function mfaSetup(challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function newPasswordRequired(userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function totpRequired(challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function selectMFAType(challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n    if (this.pendingSignIn) {\n      throw new Error('Pending sign-in attempt already in progress');\n    }\n    var user = this.createCognitoUser(authDetails.getUsername());\n    this.pendingSignIn = new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n        _this.pendingSignIn = null;\n        resolve(value);\n      }, function (error) {\n        _this.pendingSignIn = null;\n        reject(error);\n      }));\n    });\n    return this.pendingSignIn;\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_1, mfaType;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting preferred mfa failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_1 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_1.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                mfaType = that._getMfaTypeFromUserData(data);\n                if (!mfaType) {\n                  rej('invalid MFA Type');\n                  return [2 /*return*/];\n                } else {\n                  res(mfaType);\n                  return [2 /*return*/];\n                }\n\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, {\n        bypassCache: bypassCache,\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting;\n    // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n    return ret;\n  };\n  AuthClass.prototype._getUserData = function (user, params) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting user data failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_2 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_2.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                res(data);\n                _a.label = 6;\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            clientMetadata = this._config.clientMetadata;\n            return [4 /*yield*/, this._getUserData(user, {\n              bypassCache: true,\n              clientMetadata: clientMetadata\n            })];\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n            switch (_a) {\n              case 'TOTP':\n                return [3 /*break*/, 2];\n              case 'SOFTWARE_TOKEN_MFA':\n                return [3 /*break*/, 2];\n              case 'SMS':\n                return [3 /*break*/, 3];\n              case 'SMS_MFA':\n                return [3 /*break*/, 3];\n              case 'NOMFA':\n                return [3 /*break*/, 4];\n            }\n            return [3 /*break*/, 6];\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n          case 5:\n            currentMFAType = _b.sent();\n            if (currentMFAType === 'NOMFA') {\n              return [2 /*return*/, Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n            }\n            // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n            return [3 /*break*/, 7];\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];\n          case 7:\n            that = this;\n            return [2 /*return*/, new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local');\n                // cache the latest result into user data\n                user.getUserData(function (err, data) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_3;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('getting user data failed', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_3 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_3.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          return [2 /*return*/, res(result)];\n                      }\n                    });\n                  });\n                }, {\n                  bypassCache: true,\n                  clientMetadata: clientMetadata\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * disable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function onFailure(err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function associateSecretCode(secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verification totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function onFailure(err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function onSuccess(data) {\n          dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function onSuccess(session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function onFailure(err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType, clientMetadata);\n    });\n  };\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n    var _this = this;\n    if (requiredAttributes === void 0) {\n      requiredAttributes = {};\n    }\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function onSuccess(session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function onFailure(err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function mfaRequired(challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function mfaSetup(challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        totpRequired: function totpRequired(challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!challengeResponses) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n    });\n  };\n  /**\n   * Delete an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        user.deleteAttributes(attributeNames, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Delete the current authenticated user\n   * @return {Promise}\n   **/\n  // TODO: Check return type void\n  AuthClass.prototype.deleteUser = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_5, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw new Error(e_5);\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var user_1;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  if (this.userPool) {\n                    user_1 = this.userPool.getCurrentUser();\n                    if (!user_1) {\n                      logger.debug('Failed to get user from user pool');\n                      return [2 /*return*/, rej(new Error('No current user.'))];\n                    } else {\n                      user_1.getSession(function (err, session) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var cleanUpError_4;\n                          var _this = this;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                if (!err) return [3 /*break*/, 5];\n                                logger.debug('Failed to get the user session', err);\n                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                _a.label = 1;\n                              case 1:\n                                _a.trys.push([1, 3,, 4]);\n                                return [4 /*yield*/, this.cleanUpInvalidSession(user_1)];\n                              case 2:\n                                _a.sent();\n                                return [3 /*break*/, 4];\n                              case 3:\n                                cleanUpError_4 = _a.sent();\n                                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_4.message));\n                                return [2 /*return*/];\n                              case 4:\n                                return [2 /*return*/, rej(err)];\n                              case 5:\n                                user_1.deleteUser(function (err, result) {\n                                  if (err) {\n                                    rej(err);\n                                  } else {\n                                    dispatchAuthEvent('userDeleted', result, 'The authenticated user has been deleted.');\n                                    user_1.signOut();\n                                    _this.user = null;\n                                    try {\n                                      _this.cleanCachedItems(); // clean aws credentials\n                                    } catch (e) {\n                                      // TODO: change to rejects in refactor\n                                      logger.debug('failed to clear cached items');\n                                    }\n                                    if (isSignedInHostedUI) {\n                                      _this.oAuthSignOutRedirect(res, rej);\n                                    } else {\n                                      dispatchAuthEvent('signOut', _this.user, \"A user has been signed out\");\n                                      res(result);\n                                    }\n                                  }\n                                });\n                                _a.label = 6;\n                              case 6:\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      });\n                    }\n                  } else {\n                    logger.debug('no Congito User pool');\n                    rej(new Error('Cognito User pool does not exist'));\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              Name: key,\n              Value: attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n        user.updateAttributes(attributeList, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  AuthClass.prototype.isErrorWithMessage = function (err) {\n    return typeof err === 'object' && Object.prototype.hasOwnProperty.call(err, 'message');\n  };\n  // Session revoked by another app\n  AuthClass.prototype.isTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Access Token has been revoked';\n  };\n  AuthClass.prototype.isRefreshTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has been revoked';\n  };\n  AuthClass.prototype.isUserDisabledError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n  };\n  AuthClass.prototype.isUserDoesNotExistError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User does not exist.';\n  };\n  AuthClass.prototype.isRefreshTokenExpiredError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has expired';\n  };\n  AuthClass.prototype.isSignedInHostedUI = function () {\n    return this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n  };\n  AuthClass.prototype.isSessionInvalid = function (err) {\n    return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);\n  };\n  AuthClass.prototype.cleanUpInvalidSession = function (user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_6;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user.signOut();\n            this.user = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 2:\n            _a.sent(); // clean aws credentials\n            return [3 /*break*/, 4];\n          case 3:\n            e_6 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 4];\n          case 4:\n            if (this.isSignedInHostedUI()) {\n              return [2 /*return*/, new Promise(function (res, rej) {\n                _this.oAuthSignOutRedirect(res, rej);\n              })];\n            } else {\n              dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, clientMetadata;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];\n                logger.debug('OAuth signIn in progress, waiting for resolution...');\n                return [4 /*yield*/, new Promise(function (res) {\n                  var timeoutId = setTimeout(function () {\n                    logger.debug('OAuth signIn in progress timeout');\n                    Hub.remove('auth', hostedUISignCallback);\n                    res();\n                  }, OAUTH_FLOW_MS_TIMEOUT);\n                  Hub.listen('auth', hostedUISignCallback);\n                  function hostedUISignCallback(_a) {\n                    var payload = _a.payload;\n                    var event = payload.event;\n                    if (event === 'cognitoHostedUI' || event === 'cognitoHostedUI_failure') {\n                      logger.debug(\"OAuth signIn resolved: \" + event);\n                      clearTimeout(timeoutId);\n                      Hub.remove('auth', hostedUISignCallback);\n                      res();\n                    }\n                  }\n                })];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                user = this.userPool.getCurrentUser();\n                if (!user) {\n                  logger.debug('Failed to get user from user pool');\n                  rej('No current user');\n                  return [2 /*return*/];\n                }\n\n                clientMetadata = this._config.clientMetadata;\n                // refresh the session if the session expired.\n                user.getSession(function (err, session) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_5, bypassCache, clientMetadata, _a, scope;\n                    var _this = this;\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('Failed to get the user session', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _b.label = 1;\n                        case 1:\n                          _b.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _b.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_5 = _b.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_5.message));\n                          return [2 /*return*/];\n                        case 4:\n                          rej(err);\n                          return [2 /*return*/];\n                        case 5:\n                          bypassCache = params ? params.bypassCache : false;\n                          if (!bypassCache) return [3 /*break*/, 7];\n                          return [4 /*yield*/, this.Credentials.clear()];\n                        case 6:\n                          _b.sent();\n                          _b.label = 7;\n                        case 7:\n                          clientMetadata = this._config.clientMetadata;\n                          _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                          if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                            user.getUserData(function (err, data) {\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var cleanUpError_6, preferredMFA, attributeList, i, attribute, userAttribute, attributes;\n                                return __generator(this, function (_a) {\n                                  switch (_a.label) {\n                                    case 0:\n                                      if (!err) return [3 /*break*/, 7];\n                                      logger.debug('getting user data failed', err);\n                                      if (!this.isSessionInvalid(err)) return [3 /*break*/, 5];\n                                      _a.label = 1;\n                                    case 1:\n                                      _a.trys.push([1, 3,, 4]);\n                                      return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                    case 2:\n                                      _a.sent();\n                                      return [3 /*break*/, 4];\n                                    case 3:\n                                      cleanUpError_6 = _a.sent();\n                                      rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_6.message));\n                                      return [2 /*return*/];\n                                    case 4:\n                                      rej(err);\n                                      return [3 /*break*/, 6];\n                                    case 5:\n                                      res(user);\n                                      _a.label = 6;\n                                    case 6:\n                                      return [2 /*return*/];\n                                    case 7:\n                                      preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                                      attributeList = [];\n                                      for (i = 0; i < data.UserAttributes.length; i++) {\n                                        attribute = {\n                                          Name: data.UserAttributes[i].Name,\n                                          Value: data.UserAttributes[i].Value\n                                        };\n                                        userAttribute = new CognitoUserAttribute(attribute);\n                                        attributeList.push(userAttribute);\n                                      }\n                                      attributes = this.attributesToObject(attributeList);\n                                      Object.assign(user, {\n                                        attributes: attributes,\n                                        preferredMFA: preferredMFA\n                                      });\n                                      return [2 /*return*/, res(user)];\n                                  }\n                                });\n                              });\n                            }, {\n                              bypassCache: bypassCache,\n                              clientMetadata: clientMetadata\n                            });\n                          } else {\n                            logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n                            return [2 /*return*/, res(user)];\n                          }\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n  AuthClass.prototype.isOAuthInProgress = function () {\n    return this.oAuthFlowInProgress;\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_7, federatedInfo, user, e_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticated user');\n            federatedUser = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n          case 4:\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n              if (federatedInfo) {\n                federatedUser = __assign(__assign({}, federatedInfo.user), {\n                  token: federatedInfo.token\n                });\n              }\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n            if (!federatedUser) return [3 /*break*/, 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2 /*return*/, this.user];\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, this.currentUserPoolUser(params)];\n          case 7:\n            user = _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            e_8 = _a.sent();\n            if (e_8 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n            logger.debug('The user is not authenticated by the error', e_8);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 9:\n            this.user = user;\n            return [2 /*return*/, this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session');\n    // Purposely not calling the reject method here because we don't need a console error\n    if (!this.userPool) {\n      return Promise.reject(new Error('No User Pool in the configuration.'));\n    }\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n  AuthClass.prototype.userSession = function (user) {\n    var _this = this;\n    if (!user) {\n      logger.debug('the user is null');\n      return this.rejectAuthError(AuthErrorTypes.NoUserSession);\n    }\n    var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n    return new Promise(function (res, rej) {\n      logger.debug('Getting the session from this user:', user);\n      user.getSession(function (err, session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_7;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('Failed to get the session from user', user);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_7 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_7.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                logger.debug('Succeed to get the user session', session);\n                res(session);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, {\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  /**\n   * Get authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, federatedInfo;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_9 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_9);\n            throw e_9;\n          case 4:\n            federatedInfo = null;\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2 /*return*/, this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return _this.Credentials.set(session, 'session');\n              }).catch(function () {\n                logger.debug('getting guest credentials');\n                return _this.Credentials.set(null, 'guest');\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credentials');\n    return this.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function onSuccess(success) {\n          return resolve(success);\n        },\n        onFailure: function onFailure(err) {\n          return reject(err);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function onSuccess(data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function onFailure(err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_10, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_10 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_10);\n            throw e_10;\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user);\n                // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n                user.getSession(function (err, result) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_8;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('failed to get the user session', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_8 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_8.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          user.globalSignOut({\n                            onSuccess: function onSuccess(data) {\n                              logger.debug('global sign out success');\n                              if (isSignedInHostedUI) {\n                                _this.oAuthSignOutRedirect(res, rej);\n                              } else {\n                                return res();\n                              }\n                            },\n                            onFailure: function onFailure(err) {\n                              logger.debug('global sign out failed', err);\n                              return rej(err);\n                            }\n                          });\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut(function () {\n                  if (isSignedInHostedUI) {\n                    _this.oAuthSignOutRedirect(res, rej);\n                  } else {\n                    return res();\n                  }\n                });\n              }\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n    var isBrowser = browserOrNode().isBrowser;\n    if (isBrowser) {\n      this.oAuthSignOutRedirectOrReject(reject);\n    } else {\n      this.oAuthSignOutAndResolve(resolve);\n    }\n  };\n  AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n    this._oAuthHandler.signOut();\n    resolve();\n  };\n  AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n    this._oAuthHandler.signOut(); // this method redirects url\n    // App should be redirected to another url otherwise it will reject\n    setTimeout(function () {\n      return reject(Error('Signout timeout fail'));\n    }, 3000);\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_11, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_11 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 3];\n          case 3:\n            if (!this.userPool) return [3 /*break*/, 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            logger.debug('no Cognito User pool');\n            _a.label = 8;\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n             */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4 /*yield*/, this.Credentials.clear()];\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function onSuccess() {\n          resolve();\n          return;\n        },\n        onFailure: function onFailure(err) {\n          logger.debug('forgot password failure', err);\n          dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function inputVerificationCode(data) {\n          dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n          resolve(data);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function onSuccess(success) {\n          dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n          resolve(success);\n          return;\n        },\n        onFailure: function onFailure(err) {\n          dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n          reject(err);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_12, info, err_1, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = this.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n            return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {\n              return logger.error(err);\n            })];\n          case 1:\n            user = _a.sent();\n            if (!user) {\n              return [2 /*return*/, null];\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            return [4 /*yield*/, this.userAttributes(user)];\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, this.currentCredentials()];\n          case 5:\n            credentials = _a.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_12 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_12);\n            return [3 /*break*/, 7];\n          case 7:\n            info = {\n              id: credentials ? credentials.identityId : undefined,\n              username: user.getUsername(),\n              attributes: userAttrs\n            };\n            return [2 /*return*/, info];\n          case 8:\n            err_1 = _a.sent();\n            logger.error('currentUserInfo error', err_1);\n            return [2 /*return*/, {}];\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2 /*return*/, user ? user : {}];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            }\n            // Ensure backwards compatability\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n            if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = isFederatedSignInOptions(options) ? options.customState : options.customState;\n            if (this._config.userPoolId) {\n              client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n            return [3 /*break*/, 4];\n          case 1:\n            provider = providerOrOptions;\n            // To check if the user is already logged in\n            try {\n              loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n              if (loggedInUser) {\n                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n              }\n            } catch (e) {}\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4 /*yield*/, this.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n          case 2:\n            credentials = _a.sent();\n            return [4 /*yield*/, this.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2 /*return*/, credentials];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.oAuthFlowInProgress) {\n              logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n              return [2 /*return*/];\n            }\n\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 8, 9]);\n            this.oAuthFlowInProgress = true;\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];\n            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 6,, 7]);\n            return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n          case 3:\n            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new CognitoUserSession({\n              IdToken: new CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.Credentials.set(session, 'session')];\n          case 4:\n            credentials = _b.sent();\n            logger.debug('AWS credentials', credentials);\n            _b.label = 5;\n          case 5:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n            // This calls cacheTokens() in Cognito SDK\n            currentUser.setSignInUserSession(session);\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n            if (isCustomStateIncluded) {\n              customState = state.split('-').splice(1).join('-');\n              dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n            }\n            //#endregion\n            return [2 /*return*/, credentials];\n          case 6:\n            err_2 = _b.sent();\n            logger.debug('Error in cognito hosted auth response', err_2);\n            // Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n            // Otherwise, reloading the page will throw errors as the `code` has already been spent.\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n            return [3 /*break*/, 7];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            this.oAuthFlowInProgress = false;\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var _this = this;\n    var obj = {};\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Name === 'email_verified' || attribute.Name === 'phone_number_verified') {\n          obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n    return obj;\n  };\n  AuthClass.prototype.isTruthyString = function (value) {\n    return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n  };\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new CognitoUser(userData);\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n    return user;\n  };\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n  AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n    if (config) {\n      if (!config.userPoolId || !config.identityPoolId) {\n        return AuthErrorTypes.MissingAuthConfig;\n      }\n    }\n    return AuthErrorTypes.NoConfig;\n  };\n  AuthClass.prototype.rejectAuthError = function (type) {\n    return Promise.reject(new AuthError(type));\n  };\n  AuthClass.prototype.rejectNoUserPool = function () {\n    var type = this.noUserPoolErrorHandler(this._config);\n    return Promise.reject(new NoUserPoolError(type));\n  };\n  AuthClass.prototype.rememberDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_2 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_2);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.setDeviceStatusRemembered({\n                onSuccess: function onSuccess(data) {\n                  res(data);\n                },\n                onFailure: function onFailure(err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.forgetDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_3);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.forgetDevice({\n                onSuccess: function onSuccess(data) {\n                  res(data);\n                },\n                onFailure: function onFailure(err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.fetchDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_4 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_4);\n            throw new Error('The user is not authenticated');\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var cb = {\n                onSuccess: function onSuccess(data) {\n                  var deviceList = data.Devices.map(function (device) {\n                    var deviceName = device.DeviceAttributes.find(function (_a) {\n                      var Name = _a.Name;\n                      return Name === 'device_name';\n                    }) || {};\n                    var deviceInfo = {\n                      id: device.DeviceKey,\n                      name: deviceName.Value\n                    };\n                    return deviceInfo;\n                  });\n                  res(deviceList);\n                },\n                onFailure: function onFailure(err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              };\n              currUser.listDevices(MAX_DEVICES, null, cb);\n            })];\n        }\n      });\n    });\n  };\n  return AuthClass;\n}();\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);","map":{"version":3,"sources":["../src/Auth.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,SAUC,sBAAsB,EACtB,mBAAmB,EACnB,wBAAwB,EACxB,8BAA8B,EAC9B,cAAc,QAMR,SAAS;AAEhB,SACC,OAAO,EACP,aAAa,IAAI,MAAM,EACvB,WAAW,EACX,GAAG,EACH,aAAa,EAEb,MAAM,EACN,aAAa,EACb,gBAAgB,EAChB,aAAa,QAEP,mBAAmB;AAC1B,SACC,aAAa,EACb,eAAe,EACf,qBAAqB,EAIrB,WAAW,EAEX,kBAAkB,EAGlB,oBAAoB,EACpB,cAAc,EACd,mBAAmB,EACnB,kBAAkB,QAEZ,4BAA4B;AAEnC,SAAS,KAAK,QAAQ,KAAK;AAC3B,OAAO,KAAK,MAAM,eAAe;AACjC,SAAS,OAAO,IAAI,WAAW,QAAQ,eAAe;AACtD,SAAS,SAAS,EAAE,eAAe,QAAQ,UAAU;AACrD,SACC,cAAc,EAEd,+BAA+B,QAEzB,cAAc;AAErB,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC;AACtC,IAAM,gBAAgB,GAAG,+BAA+B;AAExD;AACA,IAAM,qBAAqB,GAAG,EAAE,GAAG,IAAI;AAEvC,IAAM,cAAc,GACnB,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,UAAU,GAC9D,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAC7B,mBACO;AAEX,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,KAAa,EAAE,IAAS,EAAE,OAAe,EAAA;EACnE,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE;IAAE,KAAK,EAAA,KAAA;IAAE,IAAI,EAAA,IAAA;IAAE,OAAO,EAAA;EAAA,CAAE,EAAE,MAAM,EAAE,cAAc,CAAC;AACvE,CAAC;AAED;AACA;AACA;AACA,IAAM,WAAW,GAAG,EAAE;AAEtB,IAAM,yBAAyB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAE/C;;AAEG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAaC;;;AAGG;EACH,SAAA,SAAA,CAAY,MAAmB,EAAA;IAA/B,IAAA,KAAA,GAAA,IAAA;IAfQ,IAAA,CAAA,QAAQ,GAAoB,IAAI;IAChC,IAAA,CAAA,IAAI,GAAQ,IAAI;IAIhB,IAAA,CAAA,mBAAmB,GAAY,KAAK;IAEpC,IAAA,CAAA,mBAAmB,GAAY,KAAK;IAE5C,IAAA,CAAA,WAAW,GAAG,WAAW;IA0KzB,IAAA,CAAA,0BAA0B,GAAG,UAAC,QAA0B,EAAA;MACvD,IAAM,OAAO,GAAqB,SAA5B,OAAO,CAAsB,KAAK,EAAE,IAAI,EAAA;QAC7C,IAAI,IAAI,EAAE;UACT,iBAAiB,CAAC,cAAc,EAAE,SAAS,EAAE,qBAAqB,CAAC;SACnE,MAAM;UACN,iBAAiB,CAChB,sBAAsB,EACtB,KAAK,EACL,8BAA8B,CAC9B;QACD;QACD,OAAO,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;MAC7B,CAAC;MACD,OAAO,OAAO;IACf,CAAC,CAAA,CAAC;IAjLD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC;IAEpE,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,EAAW,EAAA;UAAT,OAAA,GAAA,EAAA,CAAA,OAAO;MACpB,IAAA,KAAA,GAAA,OAAA,CAAA,KAAK;MACb,QAAQ,KAAK;QACZ,KAAK,QAAQ;UACZ,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,EAAE,OAAO,CAAC;UAC9D;QACD,KAAK,SAAS;UACb,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,8BAA8B,CAAC;UACxD;QACD,KAAK,iBAAiB;UACrB,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,EAAE,MAAM,CAAC;UAC7D;MAAM;IAET,CAAC,CAAC;EACH;EAEO,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,YAAA;IACC,OAAO,MAAM;EACd,CAAC;EAED,SAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,MAAO,EAAA;IAAjB,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,OAAO,IAAI,CAAA,CAAE;IACtC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC;IAC9B,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CACzB,CAAA,CAAE,EACF,IAAI,CAAC,OAAO,EACZ,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,IAAI,EACxC,MAAM,CACN;IACD,IAAI,CAAC,OAAO,GAAG,IAAI;IACb,IAAA,EAAA,GAAA,IAAA,CAAA,OAYU;MAXf,UAAA,GAAA,EAAA,CAAA,UAAU;MACV,mBAAA,GAAA,EAAA,CAAA,mBAAmB;MACnB,aAAA,GAAA,EAAA,CAAA,aAAa;MACb,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,cAAA,GAAA,EAAA,CAAA,cAAc;MACd,eAAA,GAAA,EAAA,CAAA,eAAe;MACf,eAAA,GAAA,EAAA,CAAA,eAAe;MACf,kBAAA,GAAA,EAAA,CAAA,kBAAkB;MAClB,cAAA,GAAA,EAAA,CAAA,cAAc;MACd,QAAA,GAAA,EAAA,CAAA,QACe;IAEhB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;MAC1B;MACA,IAAI,aAAa,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,aAAa,CAAC,CAAC,KAC/D;QACJ,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,GACvB,IAAI,gBAAgB,EAAE,GACtB,IAAI,aAAa,EAAE,CAAC,UAAU,EAAE;MACnC;KACD,MAAM;MACN,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACpD,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC;QAC5D,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC;MACvC;MACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;IACpC;IAED,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,OAAO,EAAE;IACrC,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;MAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC3C;IAED,IAAI,UAAU,EAAE;MACf,IAAM,YAAY,GAAyB;QAC1C,UAAU,EAAE,UAAU;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAA;OACR;MACD,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ;MAEpC,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,CAClC,YAAY,EACZ,IAAI,CAAC,0BAA0B,CAC/B;IACD;IAED,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;MAC1B,eAAe,EAAA,eAAA;MACf,MAAM,EAAE,kBAAkB,IAAI,MAAM;MACpC,UAAU,EAAA,UAAA;MACV,cAAc,EAAA,cAAA;MACd,eAAe,EAAA,eAAA;MACf,OAAO,EAAE,IAAI,CAAC;KACd,CAAC;IAEF;IACA;IACA,IAAM,qBAAqB,GAAG,KAAK,GAChC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GACtC,KAAK,GACC,KAAM,CAAC,UAAU,GACxB,SAAS;IAEZ,IAAI,qBAAqB,EAAE;MAC1B,IAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CACtC;QACC,eAAe,EAAE,mBAAmB;QACpC,UAAU,EAAE,UAAU;QACtB,MAAM,EAAE,qBAAqB,CAAC,QAAQ,CAAC;QACvC,MAAM,EAAE,qBAAqB,CAAC,OAAO,CAAC;QACtC,cAAc,EAAE,qBAAqB,CAAC,gBAAgB,CAAC;QACvD,eAAe,EAAE,qBAAqB,CAAC,iBAAiB,CAAC;QACzD,YAAY,EAAE,qBAAqB,CAAC,cAAc,CAAC;QACnD,OAAO,EAAE,IAAI,CAAC,QAAQ;QACtB,SAAS,EAAE,qBAAqB,CAAC,WAAW,CAAC;QAC7C,cAAc,EAAA;OACd,EACD,qBAAqB,CAAC,SAAS,CAAC,CAChC;MAED,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,CAAC;QAC9B,MAAM,EAAE,iBAAiB,CAAC,MAAM;QAChC,MAAM,EAAE,iBAAiB;QACzB,eAAe,EAAE,iBAAiB,CAAC;OACnC,CAAC;MAEF;MACA;MACA;MACA,IAAM,kBAAgB,GAAG,CAAA,CAAE;MAC3B,WAAW,CAAC,UAAC,EAAO,EAAA;YAAL,GAAA,GAAA,EAAA,CAAA,GAAG;QACjB,IAAI,kBAAgB,CAAC,GAAG,CAAC,EAAE;UAC1B;QACA;QAED,kBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI;QAC5B,KAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;MAC9B,CAAC,CAAC;IACF;IAED,iBAAiB,CAChB,YAAY,EACZ,IAAI,EACJ,oDAAoD,CACpD;IAED,IACC,CAAC,IAAI,CAAC,mBAAmB,IACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,UAAU,EAC7C;MACD,IAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAC/C,yBAAyB,CACzB;MACD,IAAI,gBAAgB,EAAE;QACrB,iBAAiB,CAChB,oBAAoB,EACpB,IAAI,EACJ,cAAc,CAAC,eAAe,CAC9B;QACD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC;MAChD;MACD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,yBAAyB,CAAC;IACnD;IACD,OAAO,IAAI,CAAC,OAAO;EACpB,CAAC;EAkBD;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UACC,MAA6B,EAAA;IAD9B,IAAA,KAAA,GAAA,IAAA;IAEC,IAAA,WAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAwB,EAAxB,EAAA,GAAA,SAAA,CAAA,MAAwB,EAAxB,EAAA,EAAwB,EAAA;MAAxB,WAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;IAEA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IAED,IAAI,QAAQ,GAAW,IAAI;IAC3B,IAAI,QAAQ,GAAW,IAAI;IAC3B,IAAM,UAAU,GAA2B,EAAE;IAC7C,IAAI,cAAc,GAA2B,IAAI;IACjD,IAAI,cAAc;IAClB,IAAI,UAAU,GAAsB;MAAE,OAAO,EAAE;IAAK,CAAE;IACtD,IAAI,wBAAwB,GAAG,CAAA,CAAE;IACjC,IAAI,wBAAwB,GAAmB,CAAA,CAAE;IAEjD,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;MACzC,QAAQ,GAAG,MAAM;MACjB,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI;MAC9C,IAAM,KAAK,GAAW,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI;MACzD,IAAM,YAAY,GAAW,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI;MAEhE,IAAI,KAAK,EACR,UAAU,CAAC,IAAI,CACd,IAAI,oBAAoB,CAAC;QAAE,IAAI,EAAE,OAAO;QAAE,KAAK,EAAE;MAAK,CAAE,CAAC,CACzD;MAEF,IAAI,YAAY,EACf,UAAU,CAAC,IAAI,CACd,IAAI,oBAAoB,CAAC;QACxB,IAAI,EAAE,cAAc;QACpB,KAAK,EAAE;OACP,CAAC,CACF;KACF,MAAM,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;MAChD,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC;MAC7B,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC;MAE7B,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE;QACpC,cAAc,GAAG,MAAM,CAAC,cAAc;OACtC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;QACvC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;MAC5C;MAED,IAAM,OAAK,GAAG,MAAM,CAAC,YAAY,CAAC;MAClC,IAAI,OAAK,EAAE;QACV,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,EAAA;UACzB,UAAU,CAAC,IAAI,CACd,IAAI,oBAAoB,CAAC;YAAE,IAAI,EAAE,GAAG;YAAE,KAAK,EAAE,OAAK,CAAC,GAAG;UAAC,CAAE,CAAC,CAC1D;QACF,CAAC,CAAC;MACF;MAED,IAAM,sBAAoB,GAAG,MAAM,CAAC,gBAAgB,CAAC;MACrD,IAAI,sBAAoB,EAAE;QACzB,cAAc,GAAG,EAAE;QACnB,MAAM,CAAC,IAAI,CAAC,sBAAoB,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,EAAA;UACxC,cAAc,CAAC,IAAI,CAClB,IAAI,oBAAoB,CAAC;YACxB,IAAI,EAAE,GAAG;YACT,KAAK,EAAE,sBAAoB,CAAC,GAAG;WAC/B,CAAC,CACF;QACF,CAAC,CAAC;MACF;MAED,UAAU,GAAA,CAAA,EAAA,GAAG,MAAM,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI;QAAE,OAAO,EAAE;MAAK,CAAE;MACpD,IAAI,UAAU,CAAC,OAAO,EAAE;QACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;QACrD,wBAAwB,GAAA,CAAA,EAAA,GAAG,UAAU,CAAC,cAAc,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;QAC1D,wBAAwB,GAAA,CAAA,EAAA,GAAG,UAAU,CAAC,cAAc,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;MAC1D;KACD,MAAM;MACN,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,WAAW,CAAC;IACvD;IAED,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IAED,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,CAAC;IACzC,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,cAAc,CAAC;IAEvD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,KAAI,CAAC,QAAQ,CAAC,MAAM,CACnB,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,cAAc,EACd,UAAC,GAAG,EAAE,IAAI,EAAA;QACT,IAAI,GAAG,EAAE;UACR,iBAAiB,CAChB,gBAAgB,EAChB,GAAG,EACA,QAAQ,GAAA,mBAAmB,CAC9B;UACD,MAAM,CAAC,GAAG,CAAC;SACX,MAAM;UACN,iBAAiB,CAChB,QAAQ,EACR,IAAI,EACD,QAAQ,GAAA,6BAA6B,CACxC;UACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACvB,KAAI,CAAC,gBAAgB,CACpB,QAAQ,EACR,QAAQ,EACR,wBAAwB,EACxB,wBAAwB,EACxB,IAAI,CACJ;UACD;UACD,OAAO,CAAC,IAAI,CAAC;QACb;MACF,CAAC,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,UACC,QAAgB,EAChB,QAAgB,EAChB,cAAkB,EAClB,cAAmB,EACnB,IAAS,EAAA;IAET,IAAI,CAAC,mBAAmB,GAAG,IAAI;IAC/B,IAAM,WAAW,GAAG,IAAI,qBAAqB,CAAC;MAC7C,QAAQ,EAAE,QAAQ;MAClB,QAAQ,EAAE,QAAQ;MAClB,cAAc,EAAE,cAAc;MAC9B,cAAc,EAAE;KAChB,CAAC;IACF,IAAI,IAAI,CAAC,aAAa,EAAE;MACvB,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC;KAC1C,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,KAAK,MAAM,EAAE;MAC5D,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC;KACtC,MAAM;MACN,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC;IACtC;EACF,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UAA6B,WAAkC,EAAA;IAA/D,IAAA,KAAA,GAAA,IAAA;IACC,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,EAAW,EAAA;UAAT,OAAA,GAAA,EAAA,CAAA,OAAO;MAC7B,IAAI,OAAO,CAAC,KAAK,KAAK,eAAe,EAAE;QACtC,KAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,WAAW,CAAC;MACvD;IACF,CAAC;IACD,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC;EAChC,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UAA6B,WAAkC,EAAA;IAA/D,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,yBAAyB,EAAE,MAAM,CAAC;IACxD,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE;IACxB,IAAM,2BAA2B,GAAG,WAAW,CAAC,YAAA;MAC/C,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,yBAAyB,EAAE;QACnD,aAAa,CAAC,2BAA2B,CAAC;QAC1C,iBAAiB,CAChB,oBAAoB,EACpB,IAAI,EACJ,kEAAkE,CAClE;QACD,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC;OAChD,MAAM;QACN,KAAI,CAAC,wBAAwB,CAC5B,WAAW,EACX,IAAI,EACJ,2BAA2B,CAC3B;MACD;IACF,CAAC,EAAE,IAAI,CAAC;EACT,CAAC;EAEa,SAAA,CAAA,SAAA,CAAA,wBAAwB,GAAtC,UACC,WAAkC,EAClC,WAAyB,EACzB,2BAA4D,EAAA;;;;;;;YAEtD,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;;;;YAE7D,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,gBAAgB,CAC1B,WAAW,EACX,IAAI,CAAC,aAAa,CACjB,IAAI,EACJ,UAAA,KAAK,EAAA;cACJ,iBAAiB,CAChB,YAAY,EACZ,KAAK,EACF,WAAW,CAAC,WAAW,EAAE,GAAA,6BAA6B,CACzD;cACD,IAAI,WAAW,EAAE;gBAChB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC;cAC/B;cACD,IAAI,2BAA2B,EAAE;gBAChC,aAAa,CAAC,2BAA2B,CAAC;gBAC1C,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,yBAAyB,CAAC;cACnD;cACD,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC;YACjD,CAAC,EACD,UAAA,KAAK,EAAA;cACJ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;cACnB,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC;YACjD,CAAC,CACD,CACD,CAAA;;YAxBD,EAAA,CAAA,IAAA,EAwBC;;;;YAED,MAAM,CAAC,KAAK,CAAC,OAAK,CAAC;;;;;;;GAEpB;EAED;;;;;;AAMG;EACI,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UACC,QAAgB,EAChB,IAAY,EACZ,OAA8B,EAAA;IAH/B,IAAA,KAAA,GAAA,IAAA;IAKC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IACD,IAAI,CAAC,IAAI,EAAE;MACV,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC;IACrD;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IAC7C,IAAM,kBAAkB,GACvB,OAAO,IAAI,OAAO,OAAO,CAAC,kBAAkB,KAAK,SAAS,GACvD,OAAO,CAAC,kBAAkB,GAC1B,IAAI;IAER,IAAI,cAAc;IAClB,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc,EAAE;MACtC,cAAc,GAAG,OAAO,CAAC,cAAc;KACvC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;MACvC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;IAC5C;IACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,mBAAmB,CACvB,IAAI,EACJ,kBAAkB,EAClB,UAAC,GAAG,EAAE,IAAI,EAAA;QACT,IAAI,GAAG,EAAE;UACR,MAAM,CAAC,GAAG,CAAC;SACX,MAAM;UACN,iBAAiB,CAChB,eAAe,EACf,IAAI,EACD,QAAQ,GAAA,kCAAkC,CAC7C;UACD,IAAM,UAAU,GAAG,KAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC;UAClE,IAAI,UAAU,IAAI,CAAC,KAAI,CAAC,mBAAmB,EAAE;YAC5C,iBAAiB,CAChB,oBAAoB,EACpB,IAAI,EACJ,cAAc,CAAC,eAAe,CAC9B;YACD,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC;UAChD;UACD,OAAO,CAAC,IAAI,CAAC;QACb;MACF,CAAC,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,UAA2B,KAAa,EAAA;IACvC,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;IACzC,OAAO,IAAI,GAAG,IAAI,KAAK,MAAM,GAAG,KAAK;EACtC,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,UACC,QAAgB,EAChB,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IAC7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,sBAAsB,CAAC,UAAC,GAAG,EAAE,IAAI,EAAA;QACrC,IAAI,GAAG,EAAE;UACR,MAAM,CAAC,GAAG,CAAC;SACX,MAAM;UACN,OAAO,CAAC,IAAI,CAAC;QACb;MACF,CAAC,EAAE,cAAc,CAAC;IACnB,CAAC,CAAC;EACH,CAAC;EAED;;;;;;AAMG;EACI,SAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UACC,oBAAyC,EACzC,EAAW,EACX,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IAED,IAAI,QAAQ,GAAG,IAAI;IACnB,IAAI,QAAQ,GAAG,IAAI;IACnB,IAAI,cAAc,GAAG,CAAA,CAAE;IAEvB;IACA,IAAI,OAAO,oBAAoB,KAAK,QAAQ,EAAE;MAC7C,QAAQ,GAAG,oBAAoB;MAC/B,QAAQ,GAAG,EAAE;KACb,MAAM,IAAI,sBAAsB,CAAC,oBAAoB,CAAC,EAAE;MACxD,IAAI,OAAO,EAAE,KAAK,WAAW,EAAE;QAC9B,MAAM,CAAC,IAAI,CACV,kEAAkE,CAClE;MACD;MACD,QAAQ,GAAG,oBAAoB,CAAC,QAAQ;MACxC,QAAQ,GAAG,oBAAoB,CAAC,QAAQ;MACxC,cAAc,GAAG,oBAAoB,CAAC,cAAc;KACpD,MAAM;MACN,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC;IAC3D;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IACD,IAAM,WAAW,GAAG,IAAI,qBAAqB,CAAC;MAC7C,QAAQ,EAAE,QAAQ;MAClB,QAAQ,EAAE,QAAQ;MAClB,cAAc,EAAE,cAAc;MAC9B,cAAc,EAAE;KAChB,CAAC;IACF,IAAI,QAAQ,EAAE;MACb,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;KAC3C,MAAM;MACN,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC;IAC9C;EACF,CAAC;EAED;;;;;;AAMG;EACK,SAAA,CAAA,SAAA,CAAA,aAAa,GAArB,UACC,IAAiB,EACjB,OAA4C,EAC5C,MAA6B,EAAA;IAH9B,IAAA,KAAA,GAAA,IAAA;IAKC,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO;MACN,SAAS,EAAE,mBAAM,OAAO,EAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;gBACvB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;gBACrB,OAAO,IAAI,CAAC,eAAe,CAAC;gBAC5B,OAAO,IAAI,CAAC,gBAAgB,CAAC;;;;gBAE5B,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;;gBAA9B,EAAA,CAAA,IAAA,EAA8B;gBACjB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;;gBAArD,IAAI,GAAG,EAAA,CAAA,IAAA,EAA8C;gBAC3D,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,IAAI,CAAC;;;;gBAExD,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAC,CAAC;;;;gBAK5B,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;;gBAA9C,WAAW,GAAG,EAAA,CAAA,IAAA,EAAgC;gBACpD,IAAI,CAAC,IAAI,GAAG,WAAW;gBACvB,iBAAiB,CAChB,QAAQ,EACR,WAAW,EACX,SAAA,GAAU,IAAI,CAAC,WAAW,EAAE,GAAA,qBAAqB,CACjD;gBACD,OAAO,CAAC,WAAW,CAAC;;;;gBAEpB,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAC,CAAC;gBACnD,MAAM,CAAC,GAAC,CAAC;;;;;;;;;OAGX;;MACD,SAAS,EAAE,mBAAA,GAAG,EAAA;QACb,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAG,CAAC;QACnC,iBAAiB,CAChB,gBAAgB,EAChB,GAAG,EACA,IAAI,CAAC,WAAW,EAAE,GAAA,mBAAmB,CACxC;QACD,MAAM,CAAC,GAAG,CAAC;MACZ,CAAC;MACD,eAAe,EAAE,yBAAA,cAAc,EAAA;QAC9B,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC;QACvD,IAAI,CAAC,eAAe,CAAC,GAAG,kBAAkB;QAC1C,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;QACvC,OAAO,CAAC,IAAI,CAAC;MACd,CAAC;MACD,WAAW,EAAE,qBAAC,aAAa,EAAE,cAAc,EAAA;QAC1C,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;QACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;QACvC,OAAO,CAAC,IAAI,CAAC;MACd,CAAC;MACD,QAAQ,EAAE,kBAAC,aAAa,EAAE,cAAc,EAAA;QACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC;QAC/C,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;QACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;QACvC,OAAO,CAAC,IAAI,CAAC;MACd,CAAC;MACD,mBAAmB,EAAE,6BAAC,cAAc,EAAE,kBAAkB,EAAA;QACvD,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,GAAG,uBAAuB;QAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG;UACxB,cAAc,EAAA,cAAA;UACd,kBAAkB,EAAA;SAClB;QACD,OAAO,CAAC,IAAI,CAAC;MACd,CAAC;MACD,YAAY,EAAE,sBAAC,aAAa,EAAE,cAAc,EAAA;QAC3C,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;QACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;QACvC,OAAO,CAAC,IAAI,CAAC;MACd,CAAC;MACD,aAAa,EAAE,uBAAC,aAAa,EAAE,cAAc,EAAA;QAC5C,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,aAAa,CAAC;QACnD,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;QACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;QACvC,OAAO,CAAC,IAAI,CAAC;MACd;KACA;EACF,CAAC;EAED;;;;;AAKG;EACK,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,UACC,WAAkC,EAAA;IADnC,IAAA,KAAA,GAAA,IAAA;IAGC,IAAI,IAAI,CAAC,aAAa,EAAE;MACvB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC;IAC9D;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IAE9D,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAChD,IAAI,CAAC,gBAAgB,CACpB,WAAW,EACX,KAAI,CAAC,aAAa,CACjB,IAAI,EACJ,UAAA,KAAK,EAAA;QACJ,KAAI,CAAC,aAAa,GAAG,IAAI;QACzB,OAAO,CAAC,KAAK,CAAC;MACf,CAAC,EACD,UAAA,KAAK,EAAA;QACJ,KAAI,CAAC,aAAa,GAAG,IAAI;QACzB,MAAM,CAAC,KAAK,CAAC;MACd,CAAC,CACD,CACD;IACF,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC,aAAa;EAC1B,CAAC;EAED;;;;;AAKG;EACK,SAAA,CAAA,SAAA,CAAA,qBAAqB,GAA7B,UACC,WAAkC,EAAA;IADnC,IAAA,KAAA,GAAA,IAAA;IAGC,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IAC9D,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC;IAE7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC1E,CAAC,CAAC;EACH,CAAC;EAED;;;;;;;AAOG;EACI,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,IAAuB,EAAA;IAC3C,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,aAAa,CAAC,UAAC,GAAG,EAAE,UAAU,EAAA;QAClC,IAAI,GAAG,EAAE;UACR,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC;UAC3C,GAAG,CAAC,GAAG,CAAC;UACR;QACA;QACD,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,UAAU,CAAC;QACnD,GAAG,CAAC,UAAU,CAAC;QACf;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UACC,IAAuB,EACvB,MAA4B,EAAA;IAF7B,IAAA,KAAA,GAAA,IAAA;IAIC,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAM,cAAc,GAAG,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;MAEpD,IAAM,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK;MACvD,IAAI,CAAC,WAAW,CACf,UAAO,GAAG,EAAE,IAAI,EAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;qBACX,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;gBACH,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,GAAG,CAAC;qBAC7C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;gBAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;gBAAtC,EAAA,CAAA,IAAA,EAAsC;;;;gBAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;gBACD,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAGF,GAAG,CAAC,GAAG,CAAC;gBACR,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAGK,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC;gBAClD,IAAI,CAAC,OAAO,EAAE;kBACb,GAAG,CAAC,kBAAkB,CAAC;kBACvB,OAAA,CAAA,CAAA,CAAA,WAAA;iBACA,MAAM;kBACN,GAAG,CAAC,OAAO,CAAC;kBACZ,OAAA,CAAA,CAAA,CAAA,WAAA;gBACA;;;;;;OACD,EACD;QAAE,WAAW,EAAA,WAAA;QAAE,cAAc,EAAA;MAAA,CAAE,CAC/B;IACF,CAAC,CAAC;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,uBAAuB,GAA/B,UAAgC,IAAI,EAAA;IACnC,IAAI,GAAG,GAAG,IAAI;IACd,IAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB;IAC7C;IACA;IACA,IAAI,YAAY,EAAE;MACjB,GAAG,GAAG,YAAY;KAClB,MAAM;MACN;MACA,IAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB;MACvC,IAAI,CAAC,OAAO,EAAE;QACb;QACA;QACA;QACA;QACA,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU;QAClC,IAAI,UAAU,EAAE;UACf,GAAG,GAAG,SAAS;SACf,MAAM;UACN,GAAG,GAAG,OAAO;QACb;OACD,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,GAAG,GAAG,OAAO;OACb,MAAM;QACN,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,IAAI,CAAC;MACtD;IACD;IACD,OAAO,GAAG;EACX,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,IAAI,EAAE,MAAM,EAAA;IAAjC,IAAA,KAAA,GAAA,IAAA;IACC,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,WAAW,CAAC,UAAO,GAAG,EAAE,IAAI,EAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;qBAC5B,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;gBACH,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC;qBACzC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;gBAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;gBAAtC,EAAA,CAAA,IAAA,EAAsC;;;;gBAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;gBACD,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAGF,GAAG,CAAC,GAAG,CAAC;gBACR,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAEA,GAAG,CAAC,IAAI,CAAC;;;;;;;OAEV,EAAE,MAAM,CAAC;IACX,CAAC,CAAC;EACH,CAAC;EAED;;;;;AAKG;EACU,SAAA,CAAA,SAAA,CAAA,eAAe,GAA5B,UACC,IAAuB,EACvB,SAAsE,EAAA;;;;;;;YAEhE,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;YAEjC,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;cAC9C,WAAW,EAAE,IAAI;cACjB,cAAc,EAAA;aACd,CAAC,CAAA;;YAHI,QAAQ,GAAG,EAAA,CAAA,IAAA,EAGf;YACE,cAAc,GAAG,IAAI;YACrB,eAAe,GAAG,IAAI;YAElB,EAAA,GAAA,SAAS;;mBACX,MAAM;gBAAN,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;mBACA,oBAAoB;gBAApB,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;mBAMA,KAAK;gBAAL,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;mBACA,SAAS;gBAAT,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;mBAMA,OAAO;gBAAP,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YAAO;;;YAZX,eAAe,GAAG;cACjB,YAAY,EAAE,IAAI;cAClB,OAAO,EAAE;aACT;YACD,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;YAGA,cAAc,GAAG;cAChB,YAAY,EAAE,IAAI;cAClB,OAAO,EAAE;aACT;YACD,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;YAEM,OAAO,GAAG,QAAQ,CAAC,oBAAoB,CAAC;YACvB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAA;;YAA7D,cAAc,GAAG,EAAA,CAAA,IAAA,EAA4C;YACnE,IAAI,cAAc,KAAK,OAAO,EAAE;cAC/B,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAA;aAChD,MAAM,IAAI,cAAc,KAAK,SAAS,EAAE;cACxC,cAAc,GAAG;gBAChB,YAAY,EAAE,KAAK;gBACnB,OAAO,EAAE;eACT;aACD,MAAM,IAAI,cAAc,KAAK,oBAAoB,EAAE;cACnD,eAAe,GAAG;gBACjB,YAAY,EAAE,KAAK;gBACnB,OAAO,EAAE;eACT;aACD,MAAM;cACN,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;YACtD;YACD;YACA;YACA,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;cACpC;cACA,OAAO,CAAC,OAAO,CAAC,UAAA,OAAO,EAAA;gBACtB,IAAI,OAAO,KAAK,SAAS,EAAE;kBAC1B,cAAc,GAAG;oBAChB,YAAY,EAAE,KAAK;oBACnB,OAAO,EAAE;mBACT;iBACD,MAAM,IAAI,OAAO,KAAK,oBAAoB,EAAE;kBAC5C,eAAe,GAAG;oBACjB,YAAY,EAAE,KAAK;oBACnB,OAAO,EAAE;mBACT;gBACD;cACF,CAAC,CAAC;YACF;YACD,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;YAEA,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC;YAC3C,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;;YAG7C,IAAI,GAAG,IAAI;YACjB,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAS,UAAC,GAAG,EAAE,GAAG,EAAA;cACnC,IAAI,CAAC,oBAAoB,CACxB,cAAc,EACd,eAAe,EACf,UAAC,GAAG,EAAE,MAAM,EAAA;gBACX,IAAI,GAAG,EAAE;kBACR,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,GAAG,CAAC;kBAClD,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf;gBACD,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC;gBAC5C,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC;gBACvD;gBACA,IAAI,CAAC,WAAW,CACf,UAAO,GAAG,EAAE,IAAI,EAAA;kBAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;+BACX,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;0BACH,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC;+BACzC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;0BAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;0BAAtC,EAAA,CAAA,IAAA,EAAsC;;;;0BAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;0BACD,OAAA,CAAA,CAAA,CAAA,WAAA;;0BAGF,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,GAAG,CAAC,CAAA;;0BAEf,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,MAAM,CAAC,CAAA;sBAAC;;;iBAEpB,EACD;kBACC,WAAW,EAAE,IAAI;kBACjB,cAAc,EAAA;iBACd,CACD;cACF,CAAC,CACD;YACF,CAAC,CAAC,CAAA;QAAC;;;GACH;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UAAkB,IAAiB,EAAA;IAClC,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,UAAU,CAAC,UAAC,GAAG,EAAE,IAAI,EAAA;QACzB,IAAI,GAAG,EAAE;UACR,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC;UACvC,GAAG,CAAC,GAAG,CAAC;UACR;QACA;QACD,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,IAAI,CAAC;QACzC,GAAG,CAAC,IAAI,CAAC;QACT;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,IAAiB,EAAA;IACjC,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,SAAS,CAAC,UAAC,GAAG,EAAE,IAAI,EAAA;QACxB,IAAI,GAAG,EAAE;UACR,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,CAAC;UACtC,GAAG,CAAC,GAAG,CAAC;UACR;QACA;QACD,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC;QACT;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,IAAuB,EAAA;IACvC,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,sBAAsB,CAAC;QAC3B,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,GAAG,CAAC;UAClD,GAAG,CAAC,GAAG,CAAC;UACR;QACD,CAAC;QACD,mBAAmB,EAAE,6BAAA,UAAU,EAAA;UAC9B,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,UAAU,CAAC;UACzD,GAAG,CAAC,UAAU,CAAC;UACf;QACD;OACA,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UACC,IAAuB,EACvB,eAAuB,EAAA;IAEvB,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,IAAI,EAAE,eAAe,CAAC;IAC9D,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,gBAAgB,EAAE;QAC3D,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC;UAC3C,GAAG,CAAC,GAAG,CAAC;UACR;QACD,CAAC;QACD,SAAS,EAAE,mBAAA,IAAI,EAAA;UACd,iBAAiB,CAChB,QAAQ,EACR,IAAI,EACJ,SAAA,GAAU,IAAI,CAAC,WAAW,EAAE,GAAA,qBAAqB,CACjD;UACD,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC;UAC7C,GAAG,CAAC,IAAI,CAAC;UACT;QACD;OACA,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UACC,IAAuB,EACvB,IAAY,EACZ,OAAiD,EACjD,cAA4D,EAAA;IAJ7D,IAAA,KAAA,GAAA,IAAA;IAIC,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,EAAE;MACV,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC;IACrD;IAED,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,WAAW,CACf,IAAI,EACJ;QACC,SAAS,EAAE,mBAAM,OAAO,EAAA;UAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;kBACvB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;;;;kBAEpB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;;kBAA9B,EAAA,CAAA,IAAA,EAA8B;kBACjB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;;kBAArD,IAAI,GAAG,EAAA,CAAA,IAAA,EAA8C;kBAC3D,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,IAAI,CAAC;;;;kBAExD,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAC,CAAC;;;kBAEjD,IAAI,CAAC,IAAI,GAAG,IAAI;kBAEhB,iBAAiB,CAChB,QAAQ,EACR,IAAI,EACJ,SAAA,GAAU,IAAI,CAAC,WAAW,EAAE,GAAA,qBAAqB,CACjD;kBACD,OAAO,CAAC,IAAI,CAAC;;;;;;;SAEd;;QACD,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC;UAC3C,MAAM,CAAC,GAAG,CAAC;QACZ;OACA,EACD,OAAO,EACP,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UACC,IAAuB,EACvB,QAAgB,EAChB,kBAA4B,EAC5B,cAA4D,EAAA;IAJ7D,IAAA,KAAA,GAAA,IAAA;IAGC,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,kBAAA,GAAA,CAAA,CAA4B;IAAA;IAC5B,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IAED,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,4BAA4B,CAChC,QAAQ,EACR,kBAAkB,EAClB;QACC,SAAS,EAAE,mBAAM,OAAO,EAAA;UAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;kBACvB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;;;;kBAEpB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;;kBAA9B,EAAA,CAAA,IAAA,EAA8B;kBACjB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;;kBAArD,IAAI,GAAG,EAAA,CAAA,IAAA,EAA8C;kBAC3D,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,IAAI,CAAC;;;;kBAExD,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAC,CAAC;;;kBAEjD,IAAI,CAAC,IAAI,GAAG,IAAI;kBAChB,iBAAiB,CAChB,QAAQ,EACR,IAAI,EACJ,SAAA,GAAU,IAAI,CAAC,WAAW,EAAE,GAAA,qBAAqB,CACjD;kBACD,OAAO,CAAC,IAAI,CAAC;;;;;;;SAEd;;QACD,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC;UAChD,iBAAiB,CAChB,6BAA6B,EAC7B,GAAG,EACA,KAAI,CAAC,IAAI,GAAA,2CAA2C,CACvD;UACD,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QACD,WAAW,EAAE,qBAAC,aAAa,EAAE,cAAc,EAAA;UAC1C,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC;UACnC,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;UACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;UACvC,OAAO,CAAC,IAAI,CAAC;QACd,CAAC;QACD,QAAQ,EAAE,kBAAC,aAAa,EAAE,cAAc,EAAA;UACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC;UAC/C,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;UACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;UACvC,OAAO,CAAC,IAAI,CAAC;QACd,CAAC;QACD,YAAY,EAAE,sBAAC,aAAa,EAAE,cAAc,EAAA;UAC3C,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC;UAC/C,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa;UACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc;UACvC,OAAO,CAAC,IAAI,CAAC;QACd;OACA,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,yBAAyB,GAAhC,UACC,IAAuB,EACvB,kBAA0B,EAC1B,cAA4D,EAAA;IAH7D,IAAA,KAAA,GAAA,IAAA;IAGC,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,CAAC,kBAAkB,EAAE;MACxB,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,sBAAsB,CAAC;IAClE;IAED,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,yBAAyB,CAC7B,kBAAkB,EAClB,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,EACzC,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;;AAII;EACG,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,UACC,IAAuB,EACvB,cAAwB,EAAA;IAExB,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAA;QAClC,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,UAAC,GAAG,EAAE,MAAM,EAAA;UACjD,IAAI,GAAG,EAAE;YACR,OAAO,MAAM,CAAC,GAAG,CAAC;WAClB,MAAM;YACN,OAAO,OAAO,CAAC,MAAM,CAAC;UACtB;QACF,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;AAGI;EACJ;EACa,SAAA,CAAA,SAAA,CAAA,UAAU,GAAvB,YAAA;;;;;;;;YAEE,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAA;;YAAvB,EAAA,CAAA,IAAA,EAAuB;;;;YAEvB,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAC,CAAC;YACxD,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC;;YAGb,kBAAkB,GACvB,IAAI,CAAC,aAAa,IAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC,KAAK,MAAM;YAEjE,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAO,GAAG,EAAE,GAAG,EAAA;cAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;kBACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACZ,MAAA,GAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;oBAE3C,IAAI,CAAC,MAAI,EAAE;sBACV,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC;sBACjD,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAA;qBACzC,MAAM;sBACN,MAAI,CAAC,UAAU,CAAC,UAAO,GAAG,EAAE,OAAO,EAAA;wBAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;qCAC9B,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;gCACH,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAG,CAAC;qCAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;gCAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,MAAI,CAAC,CAAA;;gCAAtC,EAAA,CAAA,IAAA,EAAsC;;;;gCAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;gCACD,OAAA,CAAA,CAAA,CAAA,WAAA;;gCAGF,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,GAAG,CAAC,CAAA;;gCAEf,MAAI,CAAC,UAAU,CAAC,UAAC,GAAG,EAAE,MAAc,EAAA;kCACnC,IAAI,GAAG,EAAE;oCACR,GAAG,CAAC,GAAG,CAAC;mCACR,MAAM;oCACN,iBAAiB,CAChB,aAAa,EACb,MAAM,EACN,0CAA0C,CAC1C;oCACD,MAAI,CAAC,OAAO,EAAE;oCACd,KAAI,CAAC,IAAI,GAAG,IAAI;oCAChB,IAAI;sCACH,KAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;qCACzB,CAAC,OAAO,CAAC,EAAE;sCACX;sCACA,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC;oCAC5C;oCAED,IAAI,kBAAkB,EAAE;sCACvB,KAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC;qCACnC,MAAM;sCACN,iBAAiB,CAChB,SAAS,EACT,KAAI,CAAC,IAAI,EACT,4BAA4B,CAC5B;sCACD,GAAG,CAAC,MAAM,CAAC;oCACX;kCACD;gCACF,CAAC,CAAC;;;;;;;uBAEH,CAAC;oBACF;mBACD,MAAM;oBACN,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC;oBACpC,GAAG,CAAC,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;kBAClD;;;;aACD,CAAC,CAAA;QAAC;;;GACH;EAED;;;;AAII;EACG,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,UACC,IAAuB,EACvB,UAAkB,EAClB,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAM,aAAa,GAAgC,EAAE;IACrD,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAA;QAClC,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;UAC7B,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YAClD,IAAM,IAAI,GAA8B;cACvC,IAAI,EAAE,GAAG;cACT,KAAK,EAAE,UAAU,CAAC,GAAG;aACrB;YACD,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;UACxB;QACD;QACD,IAAI,CAAC,gBAAgB,CACpB,aAAa,EACb,UAAC,GAAG,EAAE,MAAM,EAAA;UACX,IAAI,GAAG,EAAE;YACR,OAAO,MAAM,CAAC,GAAG,CAAC;WAClB,MAAM;YACN,OAAO,OAAO,CAAC,MAAM,CAAC;UACtB;QACF,CAAC,EACD,cAAc,CACd;MACF,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EACD;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UACC,IAAuB,EAAA;IADxB,IAAA,KAAA,GAAA,IAAA;IAGC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAA;QAClC,IAAI,CAAC,iBAAiB,CAAC,UAAC,GAAG,EAAE,UAAU,EAAA;UACtC,IAAI,GAAG,EAAE;YACR,MAAM,CAAC,GAAG,CAAC;WACX,MAAM;YACN,OAAO,CAAC,UAAU,CAAC;UACnB;QACF,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,IAAuB,EAAA;IAC7C,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,UAAU,EAAA;MAC/C,IAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;MACjD,IAAM,UAAU,GAAG,CAAA,CAAE;MACrB,IAAM,QAAQ,GAAG,CAAA,CAAE;MACnB,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;QACnB,IAAI,KAAK,CAAC,gBAAgB,CAAC,EAAE;UAC5B,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;SAClC,MAAM;UACN,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;QACpC;MACD;MACD,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE;QAC1B,IAAI,KAAK,CAAC,uBAAuB,CAAC,EAAE;UACnC,QAAQ,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;SAChD,MAAM;UACN,UAAU,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;QAClD;MACD;MACD,OAAO;QACN,QAAQ,EAAA,QAAA;QACR,UAAU,EAAA;OACV;IACF,CAAC,CAAC;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,UAA2B,GAAQ,EAAA;IAClC,OACC,OAAO,GAAG,KAAK,QAAQ,IACvB,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC;EAEtD,CAAC;EAED;EACQ,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA3B,UACC,GAAQ,EAAA;IAER,OACC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAC5B,GAAG,CAAC,OAAO,KAAK,+BAA+B;EAEjD,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,0BAA0B,GAAlC,UACC,GAAQ,EAAA;IAER,OACC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAC5B,GAAG,CAAC,OAAO,KAAK,gCAAgC;EAElD,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA3B,UACC,GAAQ,EAAA;IAER,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,KAAK,mBAAmB;EAC3E,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,uBAAuB,GAA/B,UACC,GAAQ,EAAA;IAER,OACC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,KAAK,sBAAsB;EAExE,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,0BAA0B,GAAlC,UACC,GAAQ,EAAA;IAER,OACC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAC5B,GAAG,CAAC,OAAO,KAAK,2BAA2B;EAE7C,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,YAAA;IACC,OACC,IAAI,CAAC,aAAa,IAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC,KAAK,MAAM;EAElE,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,UAAyB,GAAQ,EAAA;IAChC,OACC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAC7B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IACjC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAC7B,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,IACpC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC;EAEtC,CAAC;EAEa,SAAA,CAAA,SAAA,CAAA,qBAAqB,GAAnC,UAAoC,IAAiB,EAAA;;;;;;;YACpD,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,IAAI;;;;YAEf,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;;YAA7B,EAAA,CAAA,IAAA,EAA6B,CAAC,CAAC;;;;YAE/B,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC;;;YAE7C,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE;cAC9B,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;gBAC3B,KAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC;cACpC,CAAC,CAAC,CAAA;aACF,MAAM;cACN,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC;YACrE;;;;;GACD;EAED;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UACC,MAAwB,EAAA;IADzB,IAAA,KAAA,GAAA,IAAA;IAGC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IAED,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,KAAI,CAAC,YAAY,CACf,IAAI,CAAC,YAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;qBACD,IAAI,CAAC,iBAAiB,EAAE,EAAxB,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;gBACH,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC;gBAEnE,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,OAAO,CAAC,UAAA,GAAG,EAAA;kBACpB,IAAM,SAAS,GAAG,UAAU,CAAC,YAAA;oBAC5B,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC;oBAEhD,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC;oBAExC,GAAG,EAAE;kBACN,CAAC,EAAE,qBAAqB,CAAC;kBAEzB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC;kBAExC,SAAS,oBAAoB,CAAC,EAAW,EAAA;wBAAT,OAAA,GAAA,EAAA,CAAA,OAAO;oBAC9B,IAAA,KAAA,GAAA,OAAA,CAAA,KAAK;oBAEb,IACC,KAAK,KAAK,iBAAiB,IAC3B,KAAK,KAAK,yBAAyB,EAClC;sBACD,MAAM,CAAC,KAAK,CAAC,yBAAA,GAA0B,KAAO,CAAC;sBAC/C,YAAY,CAAC,SAAS,CAAC;sBAEvB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC;sBAExC,GAAG,EAAE;oBACL;kBACF;gBACD,CAAC,CAAC,CAAA;;gBA1BF,EAAA,CAAA,IAAA,EA0BE;;;gBAGG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;gBAE3C,IAAI,CAAC,IAAI,EAAE;kBACV,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC;kBACjD,GAAG,CAAC,iBAAiB,CAAC;kBACtB,OAAA,CAAA,CAAA,CAAA,WAAA;gBACA;;gBAEK,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;gBAElD;gBACA,IAAI,CAAC,UAAU,CACd,UAAO,GAAG,EAAE,OAAO,EAAA;kBAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;+BACd,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;0BACH,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAG,CAAC;+BAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;0BAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;0BAAtC,EAAA,CAAA,IAAA,EAAsC;;;;0BAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;0BACD,OAAA,CAAA,CAAA,CAAA,WAAA;;0BAGF,GAAG,CAAC,GAAG,CAAC;0BACR,OAAA,CAAA,CAAA,CAAA,WAAA;;0BAIK,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK;+BAEnD,WAAW,EAAX,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;0BACH,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;;0BAA9B,EAAA,CAAA,IAAA,EAA8B;;;0BAGzB,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc;0BAG1C,EAAA,GAAe,OAAO,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,CAAA,KAA7C,EAAV,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;0BAClB,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;4BAChD,IAAI,CAAC,WAAW,CACf,UAAO,GAAG,EAAE,IAAI,EAAA;8BAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;2CACX,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;sCACH,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC;2CACzC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;sCAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;sCAAtC,EAAA,CAAA,IAAA,EAAsC;;;;sCAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;sCACD,OAAA,CAAA,CAAA,CAAA,WAAA;;sCAED,GAAG,CAAC,GAAG,CAAC;;;sCAER,GAAG,CAAC,IAAI,CAAC;;;sCAEV,OAAA,CAAA,CAAA,CAAA,WAAA;;sCAEK,YAAY,GAAG,IAAI,CAAC,mBAAmB,IAAI,OAAO;sCAClD,aAAa,GAAG,EAAE;sCAExB,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wCAC9C,SAAS,GAAG;0CACjB,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI;0CACjC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;yCAC9B;wCACK,aAAa,GAAG,IAAI,oBAAoB,CAAC,SAAS,CAAC;wCACzD,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC;sCACjC;sCAEK,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC;sCACzD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;wCAAE,UAAU,EAAA,UAAA;wCAAE,YAAY,EAAA;sCAAA,CAAE,CAAC;sCACjD,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,IAAI,CAAC,CAAA;kCAAC;;;6BACjB,EACD;8BAAE,WAAW,EAAA,WAAA;8BAAE,cAAc,EAAA;4BAAA,CAAE,CAC/B;2BACD,MAAM;4BACN,MAAM,CAAC,KAAK,CACX,0CAAA,GAA2C,gBAAgB,GAAA,GAAG,GAC7D,0CAA0C,CAC3C;4BACD,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,IAAI,CAAC,CAAA;0BAChB;;;;;iBACD,EACD;kBAAE,cAAc,EAAA;gBAAA,CAAE,CAClB;;;;;OACD,CAAC,CACD,KAAK,CAAC,UAAA,CAAC,EAAA;QACP,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,CAAC,CAAC;QACxD,OAAO,GAAG,CAAC,CAAC,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,iBAAiB,GAAzB,YAAA;IACC,OAAO,IAAI,CAAC,mBAAmB;EAChC,CAAC;EAED;;;;AAIG;EACU,SAAA,CAAA,SAAA,CAAA,wBAAwB,GAArC,UACC,MAAwB,EAAA;;;;;;YAExB,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC;YAC9C,aAAa,GAAG,IAAI;;;;YAEvB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAA;;YAAvB,EAAA,CAAA,IAAA,EAAuB;;;;YAEvB,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAC,CAAC;YACxD,MAAM,GAAC;;YAGR,IAAI;cACG,aAAa,GAAG,IAAI,CAAC,KAAK,CAC/B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAClD;cACD,IAAI,aAAa,EAAE;gBAClB,aAAa,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACT,aAAa,CAAC,IAAI,CAAA,EAAA;kBACrB,KAAK,EAAE,aAAa,CAAC;gBAAK,CAAA,CAC1B;cACD;aACD,CAAC,OAAO,CAAC,EAAE;cACX,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC;YAC5D;iBAEG,aAAa,EAAb,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACH,IAAI,CAAC,IAAI,GAAG,aAAa;YACzB,MAAM,CAAC,KAAK,CAAC,0CAA0C,EAAE,IAAI,CAAC,IAAI,CAAC;YACnE,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,IAAI,CAAA;;YAEhB,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC;YACnD,IAAI,GAAG,IAAI;;;;YAEP,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;;YAA7C,IAAI,GAAG,EAAA,CAAA,IAAA,EAAsC;;;;YAE7C,IAAI,GAAC,KAAK,aAAa,EAAE;cACxB,MAAM,CAAC,KAAK,CACX,gEAAgE,GAC/D,kFAAkF,CACnF;YACD;YACD,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,GAAC,CAAC;YAC7D,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAA;;YAEvD,IAAI,CAAC,IAAI,GAAG,IAAI;YAChB,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,IAAI,CAAA;QAAC;;;GAElB;EAED;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,YAAA;IACC,IAAM,IAAI,GAAG,IAAI;IACjB,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC;IACvC;IACA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACtE;IAED,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,IAAI,CACF,mBAAmB,EAAE,CACrB,IAAI,CAAC,UAAA,IAAI,EAAA;QACT,IAAI,CACF,WAAW,CAAC,IAAI,CAAC,CACjB,IAAI,CAAC,UAAA,OAAO,EAAA;UACZ,GAAG,CAAC,OAAO,CAAC;UACZ;QACD,CAAC,CAAC,CACD,KAAK,CAAC,UAAA,CAAC,EAAA;UACP,MAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,CAAC,CAAC;UACpD,GAAG,CAAC,CAAC,CAAC;UACN;QACD,CAAC,CAAC;MACJ,CAAC,CAAC,CACD,KAAK,CAAC,UAAA,CAAC,EAAA;QACP,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,CAAC,CAAC;QACjD,GAAG,CAAC,CAAC,CAAC;QACN;MACD,CAAC,CAAC;IACJ,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,IAAI,EAAA;IAAvB,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,CAAC,IAAI,EAAE;MACV,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC;MAChC,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IACD,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEpD,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;MAC3B,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,IAAI,CAAC;MACzD,IAAI,CAAC,UAAU,CACd,UAAO,GAAG,EAAE,OAAO,EAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;qBACd,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;gBACH,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,IAAI,CAAC;qBACrD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;gBAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;gBAAtC,EAAA,CAAA,IAAA,EAAsC;;;;gBAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;gBACD,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAGF,GAAG,CAAC,GAAG,CAAC;gBACR,OAAA,CAAA,CAAA,CAAA,WAAA;;gBAEA,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,OAAO,CAAC;gBACxD,GAAG,CAAC,OAAO,CAAC;gBACZ,OAAA,CAAA,CAAA,CAAA,WAAA;YAAO;;;OAER,EACD;QAAE,cAAc,EAAA;MAAA,CAAE,CAClB;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;AAGG;EACU,SAAA,CAAA,SAAA,CAAA,sBAAsB,GAAnC,YAAA;;;;;;;YACC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC;;;;YAG/C,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAA;;YAAvB,EAAA,CAAA,IAAA,EAAuB;;;;YAEvB,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAC,CAAC;YACxD,MAAM,GAAC;;YAIJ,aAAa,GAAG,IAAI;YACxB,IAAI;cACH,aAAa,GAAG,IAAI,CAAC,KAAK,CACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAClD;aACD,CAAC,OAAO,CAAC,EAAE;cACX,MAAM,CAAC,KAAK,CAAC,uDAAuD,EAAE,CAAC,CAAC;YACxE;YAED,IAAI,aAAa,EAAE;cAClB;cACA,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAA;aAC5D,MAAM;cACN,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,cAAc,EAAE,CAC1B,IAAI,CAAC,UAAA,OAAO,EAAA;gBACZ,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,CAAC;gBAChD,OAAO,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;cAChD,CAAC,CAAC,CACD,KAAK,CAAC,YAAA;gBACN,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC;gBACzC,OAAO,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC;cAC3C,CAAC,CAAC,CAAA;YACH;;;;;GACD;;EAEM,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,YAAA;IACC,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC;IAC3C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UACC,IAAuB,EACvB,IAAY,EACZ,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,4BAA4B,CAChC,IAAI,EACJ;QACC,SAAS,EAAA,mBAAC,OAAO,EAAA;UAChB,OAAO,OAAO,CAAC,OAAO,CAAC;QACxB,CAAC;QACD,SAAS,EAAA,mBAAC,GAAG,EAAA;UACZ,OAAO,MAAM,CAAC,GAAG,CAAC;QACnB;OACA,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;;;;AAMG;EACI,SAAA,CAAA,SAAA,CAAA,yBAAyB,GAAhC,UACC,IAAuB,EACvB,IAAY,EACZ,IAAY,EAAA;IAEZ,IAAI,CAAC,IAAI,EAAE;MACV,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC;IACrD;IAED,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE;QAChC,SAAS,EAAA,mBAAC,IAAI,EAAA;UACb,OAAO,CAAC,IAAI,CAAC;UACb;QACD,CAAC;QACD,SAAS,EAAA,mBAAC,GAAG,EAAA;UACZ,MAAM,CAAC,GAAG,CAAC;UACX;QACD;OACA,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,0BAA0B,GAAjC,UAAkC,IAAY,EAAA;IAC7C,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,CACT,mBAAmB,EAAE,CACrB,IAAI,CAAC,UAAA,IAAI,EAAA;MAAI,OAAA,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC;IAApC,CAAoC,CAAC;EACrD,CAAC;EAED;;;;;AAKG;EACH,SAAA,CAAA,SAAA,CAAA,gCAAgC,GAAhC,UACC,IAAY,EACZ,IAAY,EAAA;IAEZ,IAAM,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,CACT,mBAAmB,EAAE,CACrB,IAAI,CAAC,UAAA,IAAI,EAAA;MAAI,OAAA,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAhD,CAAgD,CAAC;EACjE,CAAC;EAEa,SAAA,CAAA,SAAA,CAAA,sBAAsB,GAApC,UACC,IAAiB,EACjB,IAAuB,EAAA;;;;;;;;YAGtB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAA;;YAAvB,EAAA,CAAA,IAAA,EAAuB;;;;YAEvB,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,IAAC,CAAC;YACxD,MAAM,IAAC;;YAGF,kBAAkB,GACvB,IAAI,CAAC,aAAa,IAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC,KAAK,MAAM;YAEjE,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;cAC3B,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;gBACxB,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC;gBAC1C;gBACA;gBACA,IAAM,cAAc,GAAG,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBAEpD,IAAI,CAAC,UAAU,CACd,UAAO,GAAG,EAAE,MAAM,EAAA;kBAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;+BACb,GAAG,EAAH,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;0BACH,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAG,CAAC;+BAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAA1B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;0BAEF,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;;0BAAtC,EAAA,CAAA,IAAA,EAAsC;;;;0BAEtC,GAAG,CACF,IAAI,KAAK,CACR,6BAAA,GAA8B,GAAG,CAAC,OAAO,GAAA,2CAAA,GAA4C,cAAY,CAAC,OAAS,CAC3G,CACD;0BACD,OAAA,CAAA,CAAA,CAAA,WAAA;;0BAGF,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAC,GAAG,CAAC,CAAA;;0BAEhB,IAAI,CAAC,aAAa,CAAC;4BAClB,SAAS,EAAE,mBAAA,IAAI,EAAA;8BACd,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC;8BACvC,IAAI,kBAAkB,EAAE;gCACvB,KAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC;+BACnC,MAAM;gCACN,OAAO,GAAG,EAAE;8BACZ;4BACF,CAAC;4BACD,SAAS,EAAE,mBAAA,GAAG,EAAA;8BACb,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC;8BAC3C,OAAO,GAAG,CAAC,GAAG,CAAC;4BAChB;2BACA,CAAC;;;;;iBACF,EACD;kBAAE,cAAc,EAAA;gBAAA,CAAE,CAClB;eACD,MAAM;gBACN,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,YAAA;kBACZ,IAAI,kBAAkB,EAAE;oBACvB,KAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC;mBACnC,MAAM;oBACN,OAAO,GAAG,EAAE;kBACZ;gBACF,CAAC,CAAC;cACF;YACF,CAAC,CAAC,CAAA;QAAC;;;GACH;EAEO,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UACC,OAAmB,EACnB,MAA8B,EAAA;IAEtB,IAAA,SAAA,GAAA,aAAA,EAAA,CAAA,SAAS;IAEjB,IAAI,SAAS,EAAE;MACd,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC;KACzC,MAAM;MACN,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;IACpC;EACF,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,sBAAsB,GAA9B,UAA+B,OAAmB,EAAA;IACjD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;IAC5B,OAAO,EAAE;EACV,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,4BAA4B,GAApC,UAAqC,MAA8B,EAAA;IAClE,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;IAE9B;IACA,UAAU,CAAC,YAAA;MAAM,OAAA,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAArC,CAAqC,EAAE,IAAI,CAAC;EAC9D,CAAC;EAED;;;;AAIG;EACU,SAAA,CAAA,SAAA,CAAA,OAAO,GAApB,UAAqB,IAAkB,EAAA;;;;;;;YAErC,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;;YAA7B,EAAA,CAAA,IAAA,EAA6B;;;;YAE7B,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC;;;iBAGzC,IAAI,CAAC,QAAQ,EAAb,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;iBACvC,IAAI,EAAJ,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACH,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;;YAA7C,EAAA,CAAA,IAAA,EAA6C;;;YAE7C,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC;;;;;YAGxC,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC;;;YAGrC;;;;;AAKG;YACH,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC;YACrE,IAAI,CAAC,IAAI,GAAG,IAAI;;;;;GAChB;;EAEa,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAA9B,YAAA;;;;;YACC;YACA,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;;YAD9B;YACA,EAAA,CAAA,IAAA,EAA8B;;;;;GAC9B;EAED;;;;;;AAMG;EACI,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UACC,IAAuB,EACvB,WAAmB,EACnB,WAAmB,EACnB,cAA4D,EAAA;IAJ7D,IAAA,KAAA,GAAA,IAAA;IAIC,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAA;QAClC,IAAI,CAAC,cAAc,CAClB,WAAW,EACX,WAAW,EACX,UAAC,GAAG,EAAE,IAAI,EAAA;UACT,IAAI,GAAG,EAAE;YACR,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC;YAC5C,OAAO,MAAM,CAAC,GAAG,CAAC;WAClB,MAAM;YACN,OAAO,OAAO,CAAC,IAAI,CAAC;UACpB;QACF,CAAC,EACD,cAAc,CACd;MACF,CAAC,CAAC;IACH,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UACC,QAAgB,EAChB,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IAC7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,cAAc,CAClB;QACC,SAAS,EAAE,qBAAA;UACV,OAAO,EAAE;UACT;QACD,CAAC;QACD,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC;UAC5C,iBAAiB,CAChB,wBAAwB,EACxB,GAAG,EACA,QAAQ,GAAA,wBAAwB,CACnC;UACD,MAAM,CAAC,GAAG,CAAC;UACX;QACD,CAAC;QACD,qBAAqB,EAAE,+BAAA,IAAI,EAAA;UAC1B,iBAAiB,CAChB,gBAAgB,EAChB,IAAI,EACD,QAAQ,GAAA,qCAAqC,CAChD;UACD,OAAO,CAAC,IAAI,CAAC;UACb;QACD;OACA,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;;;;AAMG;EACI,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,UACC,QAAgB,EAChB,IAAY,EACZ,QAAgB,EAChB,cAA4D,EAAA;IAA5D,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAiC,IAAI,CAAC,OAAO,CAAC,cAAc;IAAA;IAE5D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MACnB,OAAO,IAAI,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IACD,IAAI,CAAC,IAAI,EAAE;MACV,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC;IACrD;IACD,IAAI,CAAC,QAAQ,EAAE;MACd,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC;IACzD;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IAC7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MAClC,IAAI,CAAC,eAAe,CACnB,IAAI,EACJ,QAAQ,EACR;QACC,SAAS,EAAE,mBAAA,OAAO,EAAA;UACjB,iBAAiB,CAChB,sBAAsB,EACtB,IAAI,EACD,QAAQ,GAAA,kCAAkC,CAC7C;UACD,OAAO,CAAC,OAAO,CAAC;UAChB;QACD,CAAC;QACD,SAAS,EAAE,mBAAA,GAAG,EAAA;UACb,iBAAiB,CAChB,8BAA8B,EAC9B,GAAG,EACA,QAAQ,GAAA,8BAA8B,CACzC;UACD,MAAM,CAAC,GAAG,CAAC;UACX;QACD;OACA,EACD,cAAc,CACd;IACF,CAAC,CAAC;EACH,CAAC;EAED;;;;AAIG;EACU,SAAA,CAAA,SAAA,CAAA,eAAe,GAA5B,YAAA;;;;;;YACO,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;gBAE3C,EAAA,CAAC,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,UAAU,CAAA,EAApD,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACU,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,KAAK,CAAC,UAAA,GAAG,EAAA;cACtD,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;YAAjB,CAAiB,CACjB,CAAA;;YAFK,IAAI,GAAG,EAAA,CAAA,IAAA,EAEZ;YACD,IAAI,CAAC,IAAI,EAAE;cACV,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA;YACX;;;;YAGmB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;;YAA5C,UAAU,GAAG,EAAA,CAAA,IAAA,EAA+B;YAC5C,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACzD,WAAW,GAAG,IAAI;;;;YAEP,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;;YAA7C,WAAW,GAAG,EAAA,CAAA,IAAA,EAA+B;;;;YAE7C,MAAM,CAAC,KAAK,CACX,gEAAgE,EAChE,IAAC,CACD;;;YAGI,IAAI,GAAG;cACZ,EAAE,EAAE,WAAW,GAAG,WAAW,CAAC,UAAU,GAAG,SAAS;cACpD,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE;cAC5B,UAAU,EAAE;aACZ;YACD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA;;;YAEX,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAG,CAAC;YAC1C,OAAA,CAAA,CAAA,CAAA,YAAO,CAAA,CAAE,CAAA;;YAIX,IAAI,MAAM,KAAK,WAAW,EAAE;cACrB,IAAI,GAAG,IAAI,CAAC,IAAI;cACtB,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,GAAG,IAAI,GAAG,CAAA,CAAE,CAAA;YACvB;;;;;GACD;;EAaY,SAAA,CAAA,SAAA,CAAA,eAAe,GAA5B,UACC,iBAG+B,EAC/B,QAA4B,EAC5B,IAAoB,EAAA;;;;;;YAEpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;cAC7D,MAAM,IAAI,KAAK,CACd,mEAAmE,CACnE;YACD;YAED;YACA,IAAI,OAAO,iBAAiB,KAAK,WAAW,EAAE;cAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBAC5D,MAAM,IAAI,KAAK,CACd,oEAAoE,CACpE;cACD;YACD;gBAGA,EAAA,wBAAwB,CAAC,iBAAiB,CAAC,IAC3C,8BAA8B,CAAC,iBAAiB,CAAC,IACjD,cAAc,CAAC,iBAAiB,CAAC,IACjC,OAAO,iBAAiB,KAAK,WAAW,CAAA,EAHxC,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YAKM,OAAO,GAAG,iBAAiB,IAAI;cACpC,QAAQ,EAAE,+BAA+B,CAAC;aAC1C;YACK,QAAQ,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAC/C,OAAO,CAAC,QAAQ,GACf,OAAwC,CAAC,cAAc;YAErD,WAAW,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAClD,OAAO,CAAC,WAAW,GAClB,OAAwC,CAAC,WAAW;YAExD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;cACtB,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GACtD,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAChC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ;cAExB,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GACzD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,cAAc,GACjC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW;cAEjC,IAAI,CAAC,aAAa,CAAC,WAAW,CAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,EAC/B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EACzB,YAAY,EACZ,SAAS,EACT,QAAQ,EACR,WAAW,CACX;YACD;;;YAEK,QAAQ,GAAG,iBAAiB;YAClC;YACA,IAAI;cACG,YAAY,GAAG,IAAI,CAAC,SAAS,CAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC,IAAI,CACnE;cACD,IAAI,YAAY,EAAE;gBACjB,MAAM,CAAC,IAAI,CAAC,qCAAA,GAAsC,YAAY,GAAA,6IACyC,CAAC;cACxG;aACD,CAAC,OAAO,CAAC,EAAE,CAAA;YAEJ,KAAK,GAA8B,QAAQ,CAAA,KAAtC,EAAE,WAAW,GAAiB,QAAQ,CAAA,WAAzB,EAAE,UAAU,GAAK,QAAQ,CAAA,UAAb;YAGlB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAC7C;cAAE,QAAQ,EAAA,QAAA;cAAE,KAAK,EAAA,KAAA;cAAE,WAAW,EAAA,WAAA;cAAE,IAAI,EAAA,IAAA;cAAE,UAAU,EAAA;YAAA,CAAE,EAClD,YAAY,CACZ,CAAA;;YAHK,WAAW,GAAG,EAAA,CAAA,IAAA,EAGnB;YACmB,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,wBAAwB,EAAE,CAAA;;YAAnD,WAAW,GAAG,EAAA,CAAA,IAAA,EAAqC;YACzD,iBAAiB,CAChB,QAAQ,EACR,WAAW,EACX,SAAA,GAAU,WAAW,CAAC,QAAQ,GAAA,qBAAqB,CACnD;YACD,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,WAAW,CAAC;YAC1D,OAAA,CAAA,CAAA,CAAA,YAAO,WAAW,CAAA;;;;;;GAEnB;EAED;;;AAGG;EACW,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAAjC,UAAkC,GAAY,EAAA;;;;;;YAC7C,IAAI,IAAI,CAAC,mBAAmB,EAAE;cAC7B,MAAM,CAAC,KAAK,CAAC,eAAA,GAAgB,GAAG,GAAA,2BAA2B,CAAC;cAC5D,OAAA,CAAA,CAAA,CAAA,WAAA;YACA;;;;;YAGA,IAAI,CAAC,mBAAmB,GAAG,IAAI;YAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;cAC7B,MAAM,IAAI,KAAK,CACd,uDAAuD,CACvD;YACD;YAED,iBAAiB,CAChB,oBAAoB,EACpB;cAAE,GAAG,EAAE;YAAG,CAAE,EACZ,kCAAkC,CAClC;YAEK,UAAU,GACf,GAAG,KAAK,aAAa,EAAE,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;YAEzD,cAAc,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,IAAI,EAAE,EACrD,KAAK,CAAC,GAAG,CAAC,CACV,GAAG,CAAC,UAAA,KAAK,EAAA;cAAI,OAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;YAAhB,CAAgB,CAAC,CAC9B,IAAI,CAAC,UAAC,EAAG,EAAA;kBAAH,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAG;gBAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;cAAM,OAAA,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,OAAO;YAA7B,CAA6B,CAAC;YAExC,eAAe,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,GAAG,EACtD,MAAM,CAAC,CAAC,CAAC,CACT,KAAK,CAAC,GAAG,CAAC,CACV,GAAG,CAAC,UAAA,KAAK,EAAA;cAAI,OAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;YAAhB,CAAgB,CAAC,CAC9B,IAAI,CAAC,UAAC,EAAG,EAAA;kBAAH,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAG;gBAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;cAAM,OAAA,CAAC,KAAK,cAAc,IAAI,CAAC,KAAK,OAAO;YAArC,CAAqC,CAAC;gBAElD,EAAA,cAAc,IAAI,eAAe,CAAA,EAAjC,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,mCAAmC,EAAE,MAAM,CAAC;;;;YAGhE,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;;YADlD,EAAA,GACL,EAAA,CAAA,IAAA,EAAuD,EADhD,WAAW,GAAA,EAAA,CAAA,WAAA,EAAE,OAAO,GAAA,EAAA,CAAA,OAAA,EAAE,YAAY,GAAA,EAAA,CAAA,YAAA,EAAE,KAAK,GAAA,EAAA,CAAA,KAAA;YAE3C,OAAO,GAAG,IAAI,kBAAkB,CAAC;cACtC,OAAO,EAAE,IAAI,cAAc,CAAC;gBAAE,OAAO,EAAE;cAAO,CAAE,CAAC;cACjD,YAAY,EAAE,IAAI,mBAAmB,CAAC;gBACrC,YAAY,EAAE;eACd,CAAC;cACF,WAAW,EAAE,IAAI,kBAAkB,CAAC;gBACnC,WAAW,EAAE;eACb;aACD,CAAC;YAEE,WAAW,GAAA,KAAA,CAAA;iBAEX,IAAI,CAAC,OAAO,CAAC,cAAc,EAA3B,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACW,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;;YAA5D,WAAW,GAAG,EAAA,CAAA,IAAA,EAA8C;YAC5D,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,WAAW,CAAC;;;YAQvC,qBAAqB,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YAOvC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CACzC,OAAO,CAAC,UAAU,EAAE,CAAC,aAAa,EAAE,CAAC,kBAAkB,CAAC,CACxD;YAED;YACA,WAAW,CAAC,oBAAoB,CAAC,OAAO,CAAC;YAEzC,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,WAAW,EAAE;cACpD,MAAM,CAAC,OAAO,CAAC,YAAY,CAC1B,CAAA,CAAE,EACF,IAAI,EACH,IAAI,CAAC,OAAO,CAAC,KAA6B,CAAC,cAAc,CAC1D;YACD;YAED,iBAAiB,CAChB,QAAQ,EACR,WAAW,EACX,SAAA,GAAU,WAAW,CAAC,WAAW,EAAE,GAAA,qBAAqB,CACxD;YACD,iBAAiB,CAChB,iBAAiB,EACjB,WAAW,EACX,SAAA,GAAU,WAAW,CAAC,WAAW,EAAE,GAAA,2CAA2C,CAC9E;YAED,IAAI,qBAAqB,EAAE;cACpB,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;cAExD,iBAAiB,CAChB,kBAAkB,EAClB,aAAa,CAAC,WAAW,CAAC,EAC1B,iBAAA,GAAkB,WAAW,CAAC,WAAW,EAAI,CAC7C;YACD;YACD;YAEA,OAAA,CAAA,CAAA,CAAA,YAAO,WAAW,CAAA;;;YAElB,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAG,CAAC;YAE1D;YACA;YACA,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,WAAW,EAAE;cACpD,MAAM,CAAC,OAAO,CAAC,YAAY,CAC1B,CAAA,CAAE,EACF,IAAI,EACH,IAAI,CAAC,OAAO,CAAC,KAA6B,CAAC,cAAc,CAC1D;YACD;YAED,iBAAiB,CAChB,gBAAgB,EAChB,KAAG,EACH,gCAAgC,CAChC;YACD,iBAAiB,CAChB,yBAAyB,EACzB,KAAG,EACH,4DAA4D,CAC5D;YACD,iBAAiB,CAChB,qBAAqB,EACrB,KAAG,EACH,yCAAyC,CACzC;;;;;YAIH,IAAI,CAAC,mBAAmB,GAAG,KAAK;;;;;;;GAEjC;EAED;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,UAA4B,WAAW,EAAA;IACtC,OAAO;MACN,WAAW,EAAE,WAAW,CAAC,WAAW;MACpC,YAAY,EAAE,WAAW,CAAC,YAAY;MACtC,eAAe,EAAE,WAAW,CAAC,eAAe;MAC5C,UAAU,EAAE,WAAW,CAAC,UAAU;MAClC,aAAa,EAAE,WAAW,CAAC;KAC3B;EACF,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,UAA2B,UAAU,EAAA;IAArC,IAAA,KAAA,GAAA,IAAA;IACC,IAAM,GAAG,GAAG,CAAA,CAAE;IACd,IAAI,UAAU,EAAE;MACf,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,EAAA;QACvB,IACC,SAAS,CAAC,IAAI,KAAK,gBAAgB,IACnC,SAAS,CAAC,IAAI,KAAK,uBAAuB,EACzC;UACD,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAClB,KAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI;SACjE,MAAM;UACN,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK;QACrC;MACF,CAAC,CAAC;IACF;IACD,OAAO,GAAG;EACX,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,KAAU,EAAA;IAChC,OACC,OAAO,KAAK,CAAC,WAAW,KAAK,UAAU,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM;EAE3E,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,iBAAiB,GAAzB,UAA0B,QAAgB,EAAA;IACzC,IAAM,QAAQ,GAAqB;MAClC,QAAQ,EAAE,QAAQ;MAClB,IAAI,EAAE,IAAI,CAAC;KACX;IACD,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ;IAExB,IAAA,sBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,sBAAsB;IAE9B,IAAM,IAAI,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC;IACtC,IAAI,sBAAsB,EAAE;MAC3B,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC;IACtD;IACD,OAAO,IAAI;EACZ,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA3B,UAA4B,GAAG,EAAA;IAC9B;IACA,OACC,CAAC,CAAC,GAAG,IACL,OAAO,GAAG,CAAC,OAAO,KAAK,UAAU,IACjC,OAAO,GAAG,CAAC,OAAO,KAAK,UAAU,IACjC,OAAO,GAAG,CAAC,UAAU,KAAK,UAAU,IACpC,OAAO,GAAG,CAAC,KAAK,KAAK,UAAU;EAEjC,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,sBAAsB,GAA9B,UAA+B,MAAmB,EAAA;IACjD,IAAI,MAAM,EAAE;MACX,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;QACjD,OAAO,cAAc,CAAC,iBAAiB;MACvC;IACD;IACD,OAAO,cAAc,CAAC,QAAQ;EAC/B,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAAwB,IAAoB,EAAA;IAC3C,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;EAC3C,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,YAAA;IACC,IAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC;IACtD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;EACjD,CAAC;EAEY,SAAA,CAAA,SAAA,CAAA,cAAc,GAA3B,YAAA;;;;;;;YAIa,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;;YAA3C,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAgC;;;;YAE3C,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,OAAK,CAAC;YACjE,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAA;;YAGvD,QAAQ,CAAC,6BAA6B,EAAE;YACxC,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;cAC3B,QAAQ,CAAC,yBAAyB,CAAC;gBAClC,SAAS,EAAE,mBAAA,IAAI,EAAA;kBACd,GAAG,CAAC,IAAI,CAAC;gBACV,CAAC;gBACD,SAAS,EAAE,mBAAA,GAAG,EAAA;kBACb,IAAI,GAAG,CAAC,IAAI,KAAK,2BAA2B,EAAE;oBAC7C,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,EAAE;oBACvC,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM;oBACN,GAAG,CAAC,GAAG,CAAC;kBACR;gBACF;eACA,CAAC;YACH,CAAC,CAAC,CAAA;QAAC;;;GACH;EAEY,SAAA,CAAA,SAAA,CAAA,YAAY,GAAzB,YAAA;;;;;;;YAIa,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;;YAA3C,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAgC;;;;YAE3C,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,OAAK,CAAC;YACjE,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAA;;YAGvD,QAAQ,CAAC,6BAA6B,EAAE;YACxC,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;cAC3B,QAAQ,CAAC,YAAY,CAAC;gBACrB,SAAS,EAAE,mBAAA,IAAI,EAAA;kBACd,GAAG,CAAC,IAAI,CAAC;gBACV,CAAC;gBACD,SAAS,EAAE,mBAAA,GAAG,EAAA;kBACb,IAAI,GAAG,CAAC,IAAI,KAAK,2BAA2B,EAAE;oBAC7C,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,EAAE;oBACvC,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM;oBACN,GAAG,CAAC,GAAG,CAAC;kBACR;gBACF;eACA,CAAC;YACH,CAAC,CAAC,CAAA;QAAC;;;GACH;EAEY,SAAA,CAAA,SAAA,CAAA,YAAY,GAAzB,YAAA;;;;;;;YAIa,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;;YAA3C,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAgC;;;;YAE3C,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,OAAK,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC;;YAGjD,QAAQ,CAAC,6BAA6B,EAAE;YACxC,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;cAC3B,IAAM,EAAE,GAAG;gBACV,SAAS,EAAT,mBAAU,IAAI,EAAA;kBACb,IAAM,UAAU,GAAkB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,EAAA;oBACxD,IAAM,UAAU,GACf,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAC3B,UAAC,EAAQ,EAAA;0BAAN,IAAA,GAAA,EAAA,CAAA,IAAI;sBAAO,OAAA,IAAI,KAAK,aAAa;oBAAtB,CAAsB,CACpC,IAAI,CAAA,CAAE;oBAER,IAAM,UAAU,GAAgB;sBAC/B,EAAE,EAAE,MAAM,CAAC,SAAS;sBACpB,IAAI,EAAE,UAAU,CAAC;qBACjB;oBACD,OAAO,UAAU;kBAClB,CAAC,CAAC;kBACF,GAAG,CAAC,UAAU,CAAC;gBAChB,CAAC;gBACD,SAAS,EAAE,mBAAA,GAAG,EAAA;kBACb,IAAI,GAAG,CAAC,IAAI,KAAK,2BAA2B,EAAE;oBAC7C,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,EAAE;oBACvC,GAAG,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;mBAC/C,MAAM;oBACN,GAAG,CAAC,GAAG,CAAC;kBACR;gBACF;eACA;cACD,QAAQ,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,CAAC;YAC5C,CAAC,CAAC,CAAA;QAAC;;;GACH;EACF,OAAA,SAAC;AAAD,CAAC,EAAA;;AAED,OAAO,IAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC;AAEvC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState, } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, Parser, browserOrNode, UniversalStorage, urlSafeDecode, } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken, } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider, } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchAuthEvent = function (event, data, message) {\n    Hub.dispatch('auth', { event: event, data: data, message: message }, 'Auth', AMPLIFY_SYMBOL);\n};\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nvar MAX_DEVICES = 60;\nvar MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n/**\n * Provide authentication steps\n */\nvar AuthClass = /** @class */ (function () {\n    /**\n     * Initialize Auth with AWS configurations\n     * @param {Object} config - Configuration of the Auth\n     */\n    function AuthClass(config) {\n        var _this = this;\n        this.userPool = null;\n        this.user = null;\n        this.oAuthFlowInProgress = false;\n        this.autoSignInInitiated = false;\n        this.Credentials = Credentials;\n        this.wrapRefreshSessionCallback = function (callback) {\n            var wrapped = function (error, data) {\n                if (data) {\n                    dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n                }\n                else {\n                    dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n                }\n                return callback(error, data);\n            };\n            return wrapped;\n        }; // prettier-ignore\n        this.configure(config);\n        this.currentCredentials = this.currentCredentials.bind(this);\n        this.currentUserCredentials = this.currentUserCredentials.bind(this);\n        Hub.listen('auth', function (_a) {\n            var payload = _a.payload;\n            var event = payload.event;\n            switch (event) {\n                case 'signIn':\n                    _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n                    break;\n                case 'signOut':\n                    _this._storage.removeItem('amplify-signin-with-hostedUI');\n                    break;\n                case 'cognitoHostedUI':\n                    _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n                    break;\n            }\n        });\n    }\n    AuthClass.prototype.getModuleName = function () {\n        return 'Auth';\n    };\n    AuthClass.prototype.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config || {};\n        logger.debug('configure Auth');\n        var conf = Object.assign({}, this._config, Parser.parseMobilehubConfig(config).Auth, config);\n        this._config = conf;\n        var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint;\n        if (!this._config.storage) {\n            // backward compatability\n            if (cookieStorage)\n                this._storage = new CookieStorage(cookieStorage);\n            else {\n                this._storage = config.ssr\n                    ? new UniversalStorage()\n                    : new StorageHelper().getStorage();\n            }\n        }\n        else {\n            if (!this._isValidAuthStorage(this._config.storage)) {\n                logger.error('The storage in the Auth config is not valid!');\n                throw new Error('Empty storage object');\n            }\n            this._storage = this._config.storage;\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        if (userPoolId) {\n            var userPoolData = {\n                UserPoolId: userPoolId,\n                ClientId: userPoolWebClientId,\n                endpoint: endpoint,\n            };\n            userPoolData.Storage = this._storage;\n            this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n        }\n        this.Credentials.configure({\n            mandatorySignIn: mandatorySignIn,\n            region: identityPoolRegion || region,\n            userPoolId: userPoolId,\n            identityPoolId: identityPoolId,\n            refreshHandlers: refreshHandlers,\n            storage: this._storage,\n        });\n        // initialize cognitoauth client if hosted ui options provided\n        // to keep backward compatibility:\n        var cognitoHostedUIConfig = oauth\n            ? isCognitoHostedOpts(this._config.oauth)\n                ? oauth\n                : oauth.awsCognito\n            : undefined;\n        if (cognitoHostedUIConfig) {\n            var cognitoAuthParams = Object.assign({\n                cognitoClientId: userPoolWebClientId,\n                UserPoolId: userPoolId,\n                domain: cognitoHostedUIConfig['domain'],\n                scopes: cognitoHostedUIConfig['scope'],\n                redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n                redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n                responseType: cognitoHostedUIConfig['responseType'],\n                Storage: this._storage,\n                urlOpener: cognitoHostedUIConfig['urlOpener'],\n                clientMetadata: clientMetadata,\n            }, cognitoHostedUIConfig['options']);\n            this._oAuthHandler = new OAuth({\n                scopes: cognitoAuthParams.scopes,\n                config: cognitoAuthParams,\n                cognitoClientId: cognitoAuthParams.cognitoClientId,\n            });\n            // **NOTE** - Remove this in a future major release as it is a breaking change\n            // Prevents _handleAuthResponse from being called multiple times in Expo\n            // See https://github.com/aws-amplify/amplify-js/issues/4388\n            var usedResponseUrls_1 = {};\n            urlListener(function (_a) {\n                var url = _a.url;\n                if (usedResponseUrls_1[url]) {\n                    return;\n                }\n                usedResponseUrls_1[url] = true;\n                _this._handleAuthResponse(url);\n            });\n        }\n        dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n        if (!this.autoSignInInitiated &&\n            typeof this._storage['getItem'] === 'function') {\n            var pollingInitiated = this.isTrueStorageValue('amplify-polling-started');\n            if (pollingInitiated) {\n                dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n                this._storage.removeItem('amplify-auto-sign-in');\n            }\n            this._storage.removeItem('amplify-polling-started');\n        }\n        return this._config;\n    };\n    /**\n     * Sign up with username, password and other attributes like phone, email\n     * @param {String | object} params - The user attributes used for signin\n     * @param {String[]} restOfAttrs - for the backward compatability\n     * @return - A promise resolves callback data if success\n     */\n    AuthClass.prototype.signUp = function (params) {\n        var _this = this;\n        var restOfAttrs = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            restOfAttrs[_i - 1] = arguments[_i];\n        }\n        var _a, _b, _c;\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        var username = null;\n        var password = null;\n        var attributes = [];\n        var validationData = null;\n        var clientMetadata;\n        var autoSignIn = { enabled: false };\n        var autoSignInValidationData = {};\n        var autoSignInClientMetaData = {};\n        if (params && typeof params === 'string') {\n            username = params;\n            password = restOfAttrs ? restOfAttrs[0] : null;\n            var email = restOfAttrs ? restOfAttrs[1] : null;\n            var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n            if (email)\n                attributes.push(new CognitoUserAttribute({ Name: 'email', Value: email }));\n            if (phone_number)\n                attributes.push(new CognitoUserAttribute({\n                    Name: 'phone_number',\n                    Value: phone_number,\n                }));\n        }\n        else if (params && typeof params === 'object') {\n            username = params['username'];\n            password = params['password'];\n            if (params && params.clientMetadata) {\n                clientMetadata = params.clientMetadata;\n            }\n            else if (this._config.clientMetadata) {\n                clientMetadata = this._config.clientMetadata;\n            }\n            var attrs_1 = params['attributes'];\n            if (attrs_1) {\n                Object.keys(attrs_1).map(function (key) {\n                    attributes.push(new CognitoUserAttribute({ Name: key, Value: attrs_1[key] }));\n                });\n            }\n            var validationDataObject_1 = params['validationData'];\n            if (validationDataObject_1) {\n                validationData = [];\n                Object.keys(validationDataObject_1).map(function (key) {\n                    validationData.push(new CognitoUserAttribute({\n                        Name: key,\n                        Value: validationDataObject_1[key],\n                    }));\n                });\n            }\n            autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : { enabled: false };\n            if (autoSignIn.enabled) {\n                this._storage.setItem('amplify-auto-sign-in', 'true');\n                autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};\n                autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};\n            }\n        }\n        else {\n            return this.rejectAuthError(AuthErrorTypes.SignUpError);\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        if (!password) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n        }\n        logger.debug('signUp attrs:', attributes);\n        logger.debug('signUp validation data:', validationData);\n        return new Promise(function (resolve, reject) {\n            _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n                if (err) {\n                    dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n                    reject(err);\n                }\n                else {\n                    dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n                    if (autoSignIn.enabled) {\n                        _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);\n                    }\n                    resolve(data);\n                }\n            }, clientMetadata);\n        });\n    };\n    AuthClass.prototype.handleAutoSignIn = function (username, password, validationData, clientMetadata, data) {\n        this.autoSignInInitiated = true;\n        var authDetails = new AuthenticationDetails({\n            Username: username,\n            Password: password,\n            ValidationData: validationData,\n            ClientMetadata: clientMetadata,\n        });\n        if (data.userConfirmed) {\n            this.signInAfterUserConfirmed(authDetails);\n        }\n        else if (this._config.signUpVerificationMethod === 'link') {\n            this.handleLinkAutoSignIn(authDetails);\n        }\n        else {\n            this.handleCodeAutoSignIn(authDetails);\n        }\n    };\n    AuthClass.prototype.handleCodeAutoSignIn = function (authDetails) {\n        var _this = this;\n        var listenEvent = function (_a) {\n            var payload = _a.payload;\n            if (payload.event === 'confirmSignUp') {\n                _this.signInAfterUserConfirmed(authDetails, listenEvent);\n            }\n        };\n        Hub.listen('auth', listenEvent);\n    };\n    AuthClass.prototype.handleLinkAutoSignIn = function (authDetails) {\n        var _this = this;\n        this._storage.setItem('amplify-polling-started', 'true');\n        var start = Date.now();\n        var autoSignInPollingIntervalId = setInterval(function () {\n            if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n                clearInterval(autoSignInPollingIntervalId);\n                dispatchAuthEvent('autoSignIn_failure', null, 'Please confirm your account and use your credentials to sign in.');\n                _this._storage.removeItem('amplify-auto-sign-in');\n            }\n            else {\n                _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);\n            }\n        }, 5000);\n    };\n    AuthClass.prototype.signInAfterUserConfirmed = function (authDetails, listenEvent, autoSignInPollingIntervalId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user, error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        user = this.createCognitoUser(authDetails.getUsername());\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, user.authenticateUser(authDetails, this.authCallbacks(user, function (value) {\n                                dispatchAuthEvent('autoSignIn', value, authDetails.getUsername() + \" has signed in successfully\");\n                                if (listenEvent) {\n                                    Hub.remove('auth', listenEvent);\n                                }\n                                if (autoSignInPollingIntervalId) {\n                                    clearInterval(autoSignInPollingIntervalId);\n                                    _this._storage.removeItem('amplify-polling-started');\n                                }\n                                _this._storage.removeItem('amplify-auto-sign-in');\n                            }, function (error) {\n                                logger.error(error);\n                                _this._storage.removeItem('amplify-auto-sign-in');\n                            }))];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        logger.error(error_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Send the verification code to confirm sign up\n     * @param {String} username - The username to be confirmed\n     * @param {String} code - The verification code\n     * @param {ConfirmSignUpOptions} options - other options for confirm signup\n     * @return - A promise resolves callback data if success\n     */\n    AuthClass.prototype.confirmSignUp = function (username, code, options) {\n        var _this = this;\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        if (!code) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n        }\n        var user = this.createCognitoUser(username);\n        var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean'\n            ? options.forceAliasCreation\n            : true;\n        var clientMetadata;\n        if (options && options.clientMetadata) {\n            clientMetadata = options.clientMetadata;\n        }\n        else if (this._config.clientMetadata) {\n            clientMetadata = this._config.clientMetadata;\n        }\n        return new Promise(function (resolve, reject) {\n            user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    dispatchAuthEvent('confirmSignUp', data, username + \" has been confirmed successfully\");\n                    var autoSignIn = _this.isTrueStorageValue('amplify-auto-sign-in');\n                    if (autoSignIn && !_this.autoSignInInitiated) {\n                        dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n                        _this._storage.removeItem('amplify-auto-sign-in');\n                    }\n                    resolve(data);\n                }\n            }, clientMetadata);\n        });\n    };\n    AuthClass.prototype.isTrueStorageValue = function (value) {\n        var item = this._storage.getItem(value);\n        return item ? item === 'true' : false;\n    };\n    /**\n     * Resend the verification code\n     * @param {String} username - The username to be confirmed\n     * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n     * @return - A promise resolves code delivery details if successful\n     */\n    AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.resendConfirmationCode(function (err, data) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            }, clientMetadata);\n        });\n    };\n    /**\n     * Sign in\n     * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n     * @param {String} pw - The password of the username\n     * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n     * @return - A promise resolves the CognitoUser\n     */\n    AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        var username = null;\n        var password = null;\n        var validationData = {};\n        // for backward compatibility\n        if (typeof usernameOrSignInOpts === 'string') {\n            username = usernameOrSignInOpts;\n            password = pw;\n        }\n        else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n            if (typeof pw !== 'undefined') {\n                logger.warn('The password should be defined under the first parameter object!');\n            }\n            username = usernameOrSignInOpts.username;\n            password = usernameOrSignInOpts.password;\n            validationData = usernameOrSignInOpts.validationData;\n        }\n        else {\n            return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        var authDetails = new AuthenticationDetails({\n            Username: username,\n            Password: password,\n            ValidationData: validationData,\n            ClientMetadata: clientMetadata,\n        });\n        if (password) {\n            return this.signInWithPassword(authDetails);\n        }\n        else {\n            return this.signInWithoutPassword(authDetails);\n        }\n    };\n    /**\n     * Return an object with the authentication callbacks\n     * @param {CognitoUser} user - the cognito user object\n     * @param {} resolve - function called when resolving the current step\n     * @param {} reject - function called when rejecting the current step\n     * @return - an object with the callback methods for user authentication\n     */\n    AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n        var _this = this;\n        var that = this;\n        return {\n            onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                var cred, e_1, currentUser, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            logger.debug(session);\n                            delete user['challengeName'];\n                            delete user['challengeParam'];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 4, 5, 9]);\n                            return [4 /*yield*/, this.Credentials.clear()];\n                        case 2:\n                            _a.sent();\n                            return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                        case 3:\n                            cred = _a.sent();\n                            logger.debug('succeed to get cognito credentials', cred);\n                            return [3 /*break*/, 9];\n                        case 4:\n                            e_1 = _a.sent();\n                            logger.debug('cannot get cognito credentials', e_1);\n                            return [3 /*break*/, 9];\n                        case 5:\n                            _a.trys.push([5, 7, , 8]);\n                            return [4 /*yield*/, this.currentUserPoolUser()];\n                        case 6:\n                            currentUser = _a.sent();\n                            that.user = currentUser;\n                            dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                            resolve(currentUser);\n                            return [3 /*break*/, 8];\n                        case 7:\n                            e_2 = _a.sent();\n                            logger.error('Failed to get the signed in user', e_2);\n                            reject(e_2);\n                            return [3 /*break*/, 8];\n                        case 8: return [7 /*endfinally*/];\n                        case 9: return [2 /*return*/];\n                    }\n                });\n            }); },\n            onFailure: function (err) {\n                logger.debug('signIn failure', err);\n                dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n                reject(err);\n            },\n            customChallenge: function (challengeParam) {\n                logger.debug('signIn custom challenge answer required');\n                user['challengeName'] = 'CUSTOM_CHALLENGE';\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            mfaRequired: function (challengeName, challengeParam) {\n                logger.debug('signIn MFA required');\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            mfaSetup: function (challengeName, challengeParam) {\n                logger.debug('signIn mfa setup', challengeName);\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            newPasswordRequired: function (userAttributes, requiredAttributes) {\n                logger.debug('signIn new password');\n                user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n                user['challengeParam'] = {\n                    userAttributes: userAttributes,\n                    requiredAttributes: requiredAttributes,\n                };\n                resolve(user);\n            },\n            totpRequired: function (challengeName, challengeParam) {\n                logger.debug('signIn totpRequired');\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            selectMFAType: function (challengeName, challengeParam) {\n                logger.debug('signIn selectMFAType', challengeName);\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n        };\n    };\n    /**\n     * Sign in with a password\n     * @private\n     * @param {AuthenticationDetails} authDetails - the user sign in data\n     * @return - A promise resolves the CognitoUser object if success or mfa required\n     */\n    AuthClass.prototype.signInWithPassword = function (authDetails) {\n        var _this = this;\n        if (this.pendingSignIn) {\n            throw new Error('Pending sign-in attempt already in progress');\n        }\n        var user = this.createCognitoUser(authDetails.getUsername());\n        this.pendingSignIn = new Promise(function (resolve, reject) {\n            user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n                _this.pendingSignIn = null;\n                resolve(value);\n            }, function (error) {\n                _this.pendingSignIn = null;\n                reject(error);\n            }));\n        });\n        return this.pendingSignIn;\n    };\n    /**\n     * Sign in without a password\n     * @private\n     * @param {AuthenticationDetails} authDetails - the user sign in data\n     * @return - A promise resolves the CognitoUser object if success or mfa required\n     */\n    AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n        var _this = this;\n        var user = this.createCognitoUser(authDetails.getUsername());\n        user.setAuthenticationFlowType('CUSTOM_AUTH');\n        return new Promise(function (resolve, reject) {\n            user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n        });\n    };\n    /**\n     * This was previously used by an authenticated user to get MFAOptions,\n     * but no longer returns a meaningful response. Refer to the documentation for\n     * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves the current preferred mfa option if success\n     */\n    AuthClass.prototype.getMFAOptions = function (user) {\n        return new Promise(function (res, rej) {\n            user.getMFAOptions(function (err, mfaOptions) {\n                if (err) {\n                    logger.debug('get MFA Options failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('get MFA options success', mfaOptions);\n                res(mfaOptions);\n                return;\n            });\n        });\n    };\n    /**\n     * get preferred mfa method\n     * @param {CognitoUser} user - the current cognito user\n     * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n     */\n    AuthClass.prototype.getPreferredMFA = function (user, params) {\n        var _this = this;\n        var that = this;\n        return new Promise(function (res, rej) {\n            var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n            var bypassCache = params ? params.bypassCache : false;\n            user.getUserData(function (err, data) { return __awaiter(_this, void 0, void 0, function () {\n                var cleanUpError_1, mfaType;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!err) return [3 /*break*/, 5];\n                            logger.debug('getting preferred mfa failed', err);\n                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                        case 3:\n                            cleanUpError_1 = _a.sent();\n                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_1.message));\n                            return [2 /*return*/];\n                        case 4:\n                            rej(err);\n                            return [2 /*return*/];\n                        case 5:\n                            mfaType = that._getMfaTypeFromUserData(data);\n                            if (!mfaType) {\n                                rej('invalid MFA Type');\n                                return [2 /*return*/];\n                            }\n                            else {\n                                res(mfaType);\n                                return [2 /*return*/];\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, { bypassCache: bypassCache, clientMetadata: clientMetadata });\n        });\n    };\n    AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n        var ret = null;\n        var preferredMFA = data.PreferredMfaSetting;\n        // if the user has used Auth.setPreferredMFA() to setup the mfa type\n        // then the \"PreferredMfaSetting\" would exist in the response\n        if (preferredMFA) {\n            ret = preferredMFA;\n        }\n        else {\n            // if mfaList exists but empty, then its noMFA\n            var mfaList = data.UserMFASettingList;\n            if (!mfaList) {\n                // if SMS was enabled by using Auth.enableSMS(),\n                // the response would contain MFAOptions\n                // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n                // if it does not exist, then it should be NOMFA\n                var MFAOptions = data.MFAOptions;\n                if (MFAOptions) {\n                    ret = 'SMS_MFA';\n                }\n                else {\n                    ret = 'NOMFA';\n                }\n            }\n            else if (mfaList.length === 0) {\n                ret = 'NOMFA';\n            }\n            else {\n                logger.debug('invalid case for getPreferredMFA', data);\n            }\n        }\n        return ret;\n    };\n    AuthClass.prototype._getUserData = function (user, params) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            user.getUserData(function (err, data) { return __awaiter(_this, void 0, void 0, function () {\n                var cleanUpError_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!err) return [3 /*break*/, 5];\n                            logger.debug('getting user data failed', err);\n                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                        case 3:\n                            cleanUpError_2 = _a.sent();\n                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_2.message));\n                            return [2 /*return*/];\n                        case 4:\n                            rej(err);\n                            return [2 /*return*/];\n                        case 5:\n                            res(data);\n                            _a.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); }, params);\n        });\n    };\n    /**\n     * set preferred MFA method\n     * @param {CognitoUser} user - the current Cognito user\n     * @param {string} mfaMethod - preferred mfa method\n     * @return - A promise resolve if success\n     */\n    AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n        return __awaiter(this, void 0, void 0, function () {\n            var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        clientMetadata = this._config.clientMetadata;\n                        return [4 /*yield*/, this._getUserData(user, {\n                                bypassCache: true,\n                                clientMetadata: clientMetadata,\n                            })];\n                    case 1:\n                        userData = _b.sent();\n                        smsMfaSettings = null;\n                        totpMfaSettings = null;\n                        _a = mfaMethod;\n                        switch (_a) {\n                            case 'TOTP': return [3 /*break*/, 2];\n                            case 'SOFTWARE_TOKEN_MFA': return [3 /*break*/, 2];\n                            case 'SMS': return [3 /*break*/, 3];\n                            case 'SMS_MFA': return [3 /*break*/, 3];\n                            case 'NOMFA': return [3 /*break*/, 4];\n                        }\n                        return [3 /*break*/, 6];\n                    case 2:\n                        totpMfaSettings = {\n                            PreferredMfa: true,\n                            Enabled: true,\n                        };\n                        return [3 /*break*/, 7];\n                    case 3:\n                        smsMfaSettings = {\n                            PreferredMfa: true,\n                            Enabled: true,\n                        };\n                        return [3 /*break*/, 7];\n                    case 4:\n                        mfaList = userData['UserMFASettingList'];\n                        return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n                    case 5:\n                        currentMFAType = _b.sent();\n                        if (currentMFAType === 'NOMFA') {\n                            return [2 /*return*/, Promise.resolve('No change for mfa type')];\n                        }\n                        else if (currentMFAType === 'SMS_MFA') {\n                            smsMfaSettings = {\n                                PreferredMfa: false,\n                                Enabled: false,\n                            };\n                        }\n                        else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n                            totpMfaSettings = {\n                                PreferredMfa: false,\n                                Enabled: false,\n                            };\n                        }\n                        else {\n                            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n                        }\n                        // if there is a UserMFASettingList in the response\n                        // we need to disable every mfa type in that list\n                        if (mfaList && mfaList.length !== 0) {\n                            // to disable SMS or TOTP if exists in that list\n                            mfaList.forEach(function (mfaType) {\n                                if (mfaType === 'SMS_MFA') {\n                                    smsMfaSettings = {\n                                        PreferredMfa: false,\n                                        Enabled: false,\n                                    };\n                                }\n                                else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                                    totpMfaSettings = {\n                                        PreferredMfa: false,\n                                        Enabled: false,\n                                    };\n                                }\n                            });\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        logger.debug('no validmfa method provided');\n                        return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];\n                    case 7:\n                        that = this;\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                                    if (err) {\n                                        logger.debug('Set user mfa preference error', err);\n                                        return rej(err);\n                                    }\n                                    logger.debug('Set user mfa success', result);\n                                    logger.debug('Caching the latest user data into local');\n                                    // cache the latest result into user data\n                                    user.getUserData(function (err, data) { return __awaiter(_this, void 0, void 0, function () {\n                                        var cleanUpError_3;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    if (!err) return [3 /*break*/, 5];\n                                                    logger.debug('getting user data failed', err);\n                                                    if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                                    _a.label = 1;\n                                                case 1:\n                                                    _a.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                                case 2:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    cleanUpError_3 = _a.sent();\n                                                    rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_3.message));\n                                                    return [2 /*return*/];\n                                                case 4: return [2 /*return*/, rej(err)];\n                                                case 5: return [2 /*return*/, res(result)];\n                                            }\n                                        });\n                                    }); }, {\n                                        bypassCache: true,\n                                        clientMetadata: clientMetadata,\n                                    });\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * disable SMS\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.disableSMS = function (user) {\n        return new Promise(function (res, rej) {\n            user.disableMFA(function (err, data) {\n                if (err) {\n                    logger.debug('disable mfa failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('disable mfa succeed', data);\n                res(data);\n                return;\n            });\n        });\n    };\n    /**\n     * enable SMS\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.enableSMS = function (user) {\n        return new Promise(function (res, rej) {\n            user.enableMFA(function (err, data) {\n                if (err) {\n                    logger.debug('enable mfa failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('enable mfa succeed', data);\n                res(data);\n                return;\n            });\n        });\n    };\n    /**\n     * Setup TOTP\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves with the secret code if success\n     */\n    AuthClass.prototype.setupTOTP = function (user) {\n        return new Promise(function (res, rej) {\n            user.associateSoftwareToken({\n                onFailure: function (err) {\n                    logger.debug('associateSoftwareToken failed', err);\n                    rej(err);\n                    return;\n                },\n                associateSecretCode: function (secretCode) {\n                    logger.debug('associateSoftwareToken sucess', secretCode);\n                    res(secretCode);\n                    return;\n                },\n            });\n        });\n    };\n    /**\n     * verify TOTP setup\n     * @param {CognitoUser} user - the current user\n     * @param {string} challengeAnswer - challenge answer\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n        logger.debug('verification totp token', user, challengeAnswer);\n        return new Promise(function (res, rej) {\n            user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n                onFailure: function (err) {\n                    logger.debug('verifyTotpToken failed', err);\n                    rej(err);\n                    return;\n                },\n                onSuccess: function (data) {\n                    dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                    logger.debug('verifyTotpToken success', data);\n                    res(data);\n                    return;\n                },\n            });\n        });\n    };\n    /**\n     * Send MFA code to confirm sign in\n     * @param {Object} user - The CognitoUser object\n     * @param {String} code - The confirmation code\n     */\n    AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n        var _this = this;\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!code) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.sendMFACode(code, {\n                onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                    var cred, e_3;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                logger.debug(session);\n                                _a.label = 1;\n                            case 1:\n                                _a.trys.push([1, 4, 5, 6]);\n                                return [4 /*yield*/, this.Credentials.clear()];\n                            case 2:\n                                _a.sent();\n                                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                            case 3:\n                                cred = _a.sent();\n                                logger.debug('succeed to get cognito credentials', cred);\n                                return [3 /*break*/, 6];\n                            case 4:\n                                e_3 = _a.sent();\n                                logger.debug('cannot get cognito credentials', e_3);\n                                return [3 /*break*/, 6];\n                            case 5:\n                                that.user = user;\n                                dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                                resolve(user);\n                                return [7 /*endfinally*/];\n                            case 6: return [2 /*return*/];\n                        }\n                    });\n                }); },\n                onFailure: function (err) {\n                    logger.debug('confirm signIn failure', err);\n                    reject(err);\n                },\n            }, mfaType, clientMetadata);\n        });\n    };\n    AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n        var _this = this;\n        if (requiredAttributes === void 0) { requiredAttributes = {}; }\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!password) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.completeNewPasswordChallenge(password, requiredAttributes, {\n                onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                    var cred, e_4;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                logger.debug(session);\n                                _a.label = 1;\n                            case 1:\n                                _a.trys.push([1, 4, 5, 6]);\n                                return [4 /*yield*/, this.Credentials.clear()];\n                            case 2:\n                                _a.sent();\n                                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                            case 3:\n                                cred = _a.sent();\n                                logger.debug('succeed to get cognito credentials', cred);\n                                return [3 /*break*/, 6];\n                            case 4:\n                                e_4 = _a.sent();\n                                logger.debug('cannot get cognito credentials', e_4);\n                                return [3 /*break*/, 6];\n                            case 5:\n                                that.user = user;\n                                dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                                resolve(user);\n                                return [7 /*endfinally*/];\n                            case 6: return [2 /*return*/];\n                        }\n                    });\n                }); },\n                onFailure: function (err) {\n                    logger.debug('completeNewPassword failure', err);\n                    dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n                    reject(err);\n                },\n                mfaRequired: function (challengeName, challengeParam) {\n                    logger.debug('signIn MFA required');\n                    user['challengeName'] = challengeName;\n                    user['challengeParam'] = challengeParam;\n                    resolve(user);\n                },\n                mfaSetup: function (challengeName, challengeParam) {\n                    logger.debug('signIn mfa setup', challengeName);\n                    user['challengeName'] = challengeName;\n                    user['challengeParam'] = challengeParam;\n                    resolve(user);\n                },\n                totpRequired: function (challengeName, challengeParam) {\n                    logger.debug('signIn mfa setup', challengeName);\n                    user['challengeName'] = challengeName;\n                    user['challengeParam'] = challengeParam;\n                    resolve(user);\n                },\n            }, clientMetadata);\n        });\n    };\n    /**\n     * Send the answer to a custom challenge\n     * @param {CognitoUser} user - The CognitoUser object\n     * @param {String} challengeResponses - The confirmation code\n     */\n    AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n        var _this = this;\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        if (!challengeResponses) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n        });\n    };\n    /**\n     * Delete an authenticated users' attributes\n     * @param {CognitoUser} - The currently logged in user object\n     * @return {Promise}\n     **/\n    AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            that.userSession(user).then(function (session) {\n                user.deleteAttributes(attributeNames, function (err, result) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    else {\n                        return resolve(result);\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * Delete the current authenticated user\n     * @return {Promise}\n     **/\n    // TODO: Check return type void\n    AuthClass.prototype.deleteUser = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_5, isSignedInHostedUI;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_5 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_5);\n                        throw new Error(e_5);\n                    case 3:\n                        isSignedInHostedUI = this._oAuthHandler &&\n                            this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n                        return [2 /*return*/, new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n                                var user_1;\n                                var _this = this;\n                                return __generator(this, function (_a) {\n                                    if (this.userPool) {\n                                        user_1 = this.userPool.getCurrentUser();\n                                        if (!user_1) {\n                                            logger.debug('Failed to get user from user pool');\n                                            return [2 /*return*/, rej(new Error('No current user.'))];\n                                        }\n                                        else {\n                                            user_1.getSession(function (err, session) { return __awaiter(_this, void 0, void 0, function () {\n                                                var cleanUpError_4;\n                                                var _this = this;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            if (!err) return [3 /*break*/, 5];\n                                                            logger.debug('Failed to get the user session', err);\n                                                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                                            _a.label = 1;\n                                                        case 1:\n                                                            _a.trys.push([1, 3, , 4]);\n                                                            return [4 /*yield*/, this.cleanUpInvalidSession(user_1)];\n                                                        case 2:\n                                                            _a.sent();\n                                                            return [3 /*break*/, 4];\n                                                        case 3:\n                                                            cleanUpError_4 = _a.sent();\n                                                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_4.message));\n                                                            return [2 /*return*/];\n                                                        case 4: return [2 /*return*/, rej(err)];\n                                                        case 5:\n                                                            user_1.deleteUser(function (err, result) {\n                                                                if (err) {\n                                                                    rej(err);\n                                                                }\n                                                                else {\n                                                                    dispatchAuthEvent('userDeleted', result, 'The authenticated user has been deleted.');\n                                                                    user_1.signOut();\n                                                                    _this.user = null;\n                                                                    try {\n                                                                        _this.cleanCachedItems(); // clean aws credentials\n                                                                    }\n                                                                    catch (e) {\n                                                                        // TODO: change to rejects in refactor\n                                                                        logger.debug('failed to clear cached items');\n                                                                    }\n                                                                    if (isSignedInHostedUI) {\n                                                                        _this.oAuthSignOutRedirect(res, rej);\n                                                                    }\n                                                                    else {\n                                                                        dispatchAuthEvent('signOut', _this.user, \"A user has been signed out\");\n                                                                        res(result);\n                                                                    }\n                                                                }\n                                                            });\n                                                            _a.label = 6;\n                                                        case 6: return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); });\n                                        }\n                                    }\n                                    else {\n                                        logger.debug('no Congito User pool');\n                                        rej(new Error('Cognito User pool does not exist'));\n                                    }\n                                    return [2 /*return*/];\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    /**\n     * Update an authenticated users' attributes\n     * @param {CognitoUser} - The currently logged in user object\n     * @return {Promise}\n     **/\n    AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        var attributeList = [];\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            that.userSession(user).then(function (session) {\n                for (var key in attributes) {\n                    if (key !== 'sub' && key.indexOf('_verified') < 0) {\n                        var attr = {\n                            Name: key,\n                            Value: attributes[key],\n                        };\n                        attributeList.push(attr);\n                    }\n                }\n                user.updateAttributes(attributeList, function (err, result) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    else {\n                        return resolve(result);\n                    }\n                }, clientMetadata);\n            });\n        });\n    };\n    /**\n     * Return user attributes\n     * @param {Object} user - The CognitoUser object\n     * @return - A promise resolves to user attributes if success\n     */\n    AuthClass.prototype.userAttributes = function (user) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.userSession(user).then(function (session) {\n                user.getUserAttributes(function (err, attributes) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(attributes);\n                    }\n                });\n            });\n        });\n    };\n    AuthClass.prototype.verifiedContact = function (user) {\n        var that = this;\n        return this.userAttributes(user).then(function (attributes) {\n            var attrs = that.attributesToObject(attributes);\n            var unverified = {};\n            var verified = {};\n            if (attrs['email']) {\n                if (attrs['email_verified']) {\n                    verified['email'] = attrs['email'];\n                }\n                else {\n                    unverified['email'] = attrs['email'];\n                }\n            }\n            if (attrs['phone_number']) {\n                if (attrs['phone_number_verified']) {\n                    verified['phone_number'] = attrs['phone_number'];\n                }\n                else {\n                    unverified['phone_number'] = attrs['phone_number'];\n                }\n            }\n            return {\n                verified: verified,\n                unverified: unverified,\n            };\n        });\n    };\n    AuthClass.prototype.isErrorWithMessage = function (err) {\n        return (typeof err === 'object' &&\n            Object.prototype.hasOwnProperty.call(err, 'message'));\n    };\n    // Session revoked by another app\n    AuthClass.prototype.isTokenRevokedError = function (err) {\n        return (this.isErrorWithMessage(err) &&\n            err.message === 'Access Token has been revoked');\n    };\n    AuthClass.prototype.isRefreshTokenRevokedError = function (err) {\n        return (this.isErrorWithMessage(err) &&\n            err.message === 'Refresh Token has been revoked');\n    };\n    AuthClass.prototype.isUserDisabledError = function (err) {\n        return this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n    };\n    AuthClass.prototype.isUserDoesNotExistError = function (err) {\n        return (this.isErrorWithMessage(err) && err.message === 'User does not exist.');\n    };\n    AuthClass.prototype.isRefreshTokenExpiredError = function (err) {\n        return (this.isErrorWithMessage(err) &&\n            err.message === 'Refresh Token has expired');\n    };\n    AuthClass.prototype.isSignedInHostedUI = function () {\n        return (this._oAuthHandler &&\n            this._storage.getItem('amplify-signin-with-hostedUI') === 'true');\n    };\n    AuthClass.prototype.isSessionInvalid = function (err) {\n        return (this.isUserDisabledError(err) ||\n            this.isUserDoesNotExistError(err) ||\n            this.isTokenRevokedError(err) ||\n            this.isRefreshTokenRevokedError(err) ||\n            this.isRefreshTokenExpiredError(err));\n    };\n    AuthClass.prototype.cleanUpInvalidSession = function (user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_6;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        user.signOut();\n                        this.user = null;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.cleanCachedItems()];\n                    case 2:\n                        _a.sent(); // clean aws credentials\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_6 = _a.sent();\n                        logger.debug('failed to clear cached items');\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (this.isSignedInHostedUI()) {\n                            return [2 /*return*/, new Promise(function (res, rej) {\n                                    _this.oAuthSignOutRedirect(res, rej);\n                                })];\n                        }\n                        else {\n                            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Get current authenticated user\n     * @return - A promise resolves to current authenticated CognitoUser if success\n     */\n    AuthClass.prototype.currentUserPoolUser = function (params) {\n        var _this = this;\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        return new Promise(function (res, rej) {\n            _this._storageSync\n                .then(function () { return __awaiter(_this, void 0, void 0, function () {\n                var user, clientMetadata;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!this.isOAuthInProgress()) return [3 /*break*/, 2];\n                            logger.debug('OAuth signIn in progress, waiting for resolution...');\n                            return [4 /*yield*/, new Promise(function (res) {\n                                    var timeoutId = setTimeout(function () {\n                                        logger.debug('OAuth signIn in progress timeout');\n                                        Hub.remove('auth', hostedUISignCallback);\n                                        res();\n                                    }, OAUTH_FLOW_MS_TIMEOUT);\n                                    Hub.listen('auth', hostedUISignCallback);\n                                    function hostedUISignCallback(_a) {\n                                        var payload = _a.payload;\n                                        var event = payload.event;\n                                        if (event === 'cognitoHostedUI' ||\n                                            event === 'cognitoHostedUI_failure') {\n                                            logger.debug(\"OAuth signIn resolved: \" + event);\n                                            clearTimeout(timeoutId);\n                                            Hub.remove('auth', hostedUISignCallback);\n                                            res();\n                                        }\n                                    }\n                                })];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2:\n                            user = this.userPool.getCurrentUser();\n                            if (!user) {\n                                logger.debug('Failed to get user from user pool');\n                                rej('No current user');\n                                return [2 /*return*/];\n                            }\n                            clientMetadata = this._config.clientMetadata;\n                            // refresh the session if the session expired.\n                            user.getSession(function (err, session) { return __awaiter(_this, void 0, void 0, function () {\n                                var cleanUpError_5, bypassCache, clientMetadata, _a, scope;\n                                var _this = this;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (!err) return [3 /*break*/, 5];\n                                            logger.debug('Failed to get the user session', err);\n                                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                            _b.label = 1;\n                                        case 1:\n                                            _b.trys.push([1, 3, , 4]);\n                                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                        case 2:\n                                            _b.sent();\n                                            return [3 /*break*/, 4];\n                                        case 3:\n                                            cleanUpError_5 = _b.sent();\n                                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_5.message));\n                                            return [2 /*return*/];\n                                        case 4:\n                                            rej(err);\n                                            return [2 /*return*/];\n                                        case 5:\n                                            bypassCache = params ? params.bypassCache : false;\n                                            if (!bypassCache) return [3 /*break*/, 7];\n                                            return [4 /*yield*/, this.Credentials.clear()];\n                                        case 6:\n                                            _b.sent();\n                                            _b.label = 7;\n                                        case 7:\n                                            clientMetadata = this._config.clientMetadata;\n                                            _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                                            if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                                                user.getUserData(function (err, data) { return __awaiter(_this, void 0, void 0, function () {\n                                                    var cleanUpError_6, preferredMFA, attributeList, i, attribute, userAttribute, attributes;\n                                                    return __generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                if (!err) return [3 /*break*/, 7];\n                                                                logger.debug('getting user data failed', err);\n                                                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 5];\n                                                                _a.label = 1;\n                                                            case 1:\n                                                                _a.trys.push([1, 3, , 4]);\n                                                                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                                            case 2:\n                                                                _a.sent();\n                                                                return [3 /*break*/, 4];\n                                                            case 3:\n                                                                cleanUpError_6 = _a.sent();\n                                                                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_6.message));\n                                                                return [2 /*return*/];\n                                                            case 4:\n                                                                rej(err);\n                                                                return [3 /*break*/, 6];\n                                                            case 5:\n                                                                res(user);\n                                                                _a.label = 6;\n                                                            case 6: return [2 /*return*/];\n                                                            case 7:\n                                                                preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                                                                attributeList = [];\n                                                                for (i = 0; i < data.UserAttributes.length; i++) {\n                                                                    attribute = {\n                                                                        Name: data.UserAttributes[i].Name,\n                                                                        Value: data.UserAttributes[i].Value,\n                                                                    };\n                                                                    userAttribute = new CognitoUserAttribute(attribute);\n                                                                    attributeList.push(userAttribute);\n                                                                }\n                                                                attributes = this.attributesToObject(attributeList);\n                                                                Object.assign(user, { attributes: attributes, preferredMFA: preferredMFA });\n                                                                return [2 /*return*/, res(user)];\n                                                        }\n                                                    });\n                                                }); }, { bypassCache: bypassCache, clientMetadata: clientMetadata });\n                                            }\n                                            else {\n                                                logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" +\n                                                    \"is not in the scopes of the access token\");\n                                                return [2 /*return*/, res(user)];\n                                            }\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }, { clientMetadata: clientMetadata });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })\n                .catch(function (e) {\n                logger.debug('Failed to sync cache info into memory', e);\n                return rej(e);\n            });\n        });\n    };\n    AuthClass.prototype.isOAuthInProgress = function () {\n        return this.oAuthFlowInProgress;\n    };\n    /**\n     * Get current authenticated user\n     * @param {CurrentUserOpts} - options for getting the current user\n     * @return - A promise resolves to current authenticated CognitoUser if success\n     */\n    AuthClass.prototype.currentAuthenticatedUser = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var federatedUser, e_7, federatedInfo, user, e_8;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting current authenticated user');\n                        federatedUser = null;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_7 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_7);\n                        throw e_7;\n                    case 4:\n                        try {\n                            federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n                            if (federatedInfo) {\n                                federatedUser = __assign(__assign({}, federatedInfo.user), { token: federatedInfo.token });\n                            }\n                        }\n                        catch (e) {\n                            logger.debug('cannot load federated user from auth storage');\n                        }\n                        if (!federatedUser) return [3 /*break*/, 5];\n                        this.user = federatedUser;\n                        logger.debug('get current authenticated federated user', this.user);\n                        return [2 /*return*/, this.user];\n                    case 5:\n                        logger.debug('get current authenticated userpool user');\n                        user = null;\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, 8, , 9]);\n                        return [4 /*yield*/, this.currentUserPoolUser(params)];\n                    case 7:\n                        user = _a.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        e_8 = _a.sent();\n                        if (e_8 === 'No userPool') {\n                            logger.error('Cannot get the current user because the user pool is missing. ' +\n                                'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n                        }\n                        logger.debug('The user is not authenticated by the error', e_8);\n                        return [2 /*return*/, Promise.reject('The user is not authenticated')];\n                    case 9:\n                        this.user = user;\n                        return [2 /*return*/, this.user];\n                }\n            });\n        });\n    };\n    /**\n     * Get current user's session\n     * @return - A promise resolves to session object if success\n     */\n    AuthClass.prototype.currentSession = function () {\n        var that = this;\n        logger.debug('Getting current session');\n        // Purposely not calling the reject method here because we don't need a console error\n        if (!this.userPool) {\n            return Promise.reject(new Error('No User Pool in the configuration.'));\n        }\n        return new Promise(function (res, rej) {\n            that\n                .currentUserPoolUser()\n                .then(function (user) {\n                that\n                    .userSession(user)\n                    .then(function (session) {\n                    res(session);\n                    return;\n                })\n                    .catch(function (e) {\n                    logger.debug('Failed to get the current session', e);\n                    rej(e);\n                    return;\n                });\n            })\n                .catch(function (e) {\n                logger.debug('Failed to get the current user', e);\n                rej(e);\n                return;\n            });\n        });\n    };\n    /**\n     * Get the corresponding user session\n     * @param {Object} user - The CognitoUser object\n     * @return - A promise resolves to the session\n     */\n    AuthClass.prototype.userSession = function (user) {\n        var _this = this;\n        if (!user) {\n            logger.debug('the user is null');\n            return this.rejectAuthError(AuthErrorTypes.NoUserSession);\n        }\n        var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n        return new Promise(function (res, rej) {\n            logger.debug('Getting the session from this user:', user);\n            user.getSession(function (err, session) { return __awaiter(_this, void 0, void 0, function () {\n                var cleanUpError_7;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!err) return [3 /*break*/, 5];\n                            logger.debug('Failed to get the session from user', user);\n                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                        case 3:\n                            cleanUpError_7 = _a.sent();\n                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_7.message));\n                            return [2 /*return*/];\n                        case 4:\n                            rej(err);\n                            return [2 /*return*/];\n                        case 5:\n                            logger.debug('Succeed to get the user session', session);\n                            res(session);\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, { clientMetadata: clientMetadata });\n        });\n    };\n    /**\n     * Get authenticated credentials of current user.\n     * @return - A promise resolves to be current user's credentials\n     */\n    AuthClass.prototype.currentUserCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_9, federatedInfo;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('Getting current user credentials');\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_9 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_9);\n                        throw e_9;\n                    case 4:\n                        federatedInfo = null;\n                        try {\n                            federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n                        }\n                        catch (e) {\n                            logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n                        }\n                        if (federatedInfo) {\n                            // refresh the jwt token here if necessary\n                            return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];\n                        }\n                        else {\n                            return [2 /*return*/, this.currentSession()\n                                    .then(function (session) {\n                                    logger.debug('getting session success', session);\n                                    return _this.Credentials.set(session, 'session');\n                                })\n                                    .catch(function () {\n                                    logger.debug('getting guest credentials');\n                                    return _this.Credentials.set(null, 'guest');\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.currentCredentials = function () {\n        logger.debug('getting current credentials');\n        return this.Credentials.get();\n    };\n    /**\n     * Initiate an attribute confirmation request\n     * @param {Object} user - The CognitoUser\n     * @param {Object} attr - The attributes to be verified\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        return new Promise(function (resolve, reject) {\n            user.getAttributeVerificationCode(attr, {\n                onSuccess: function (success) {\n                    return resolve(success);\n                },\n                onFailure: function (err) {\n                    return reject(err);\n                },\n            }, clientMetadata);\n        });\n    };\n    /**\n     * Confirm an attribute using a confirmation code\n     * @param {Object} user - The CognitoUser\n     * @param {Object} attr - The attribute to be verified\n     * @param {String} code - The confirmation code\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n        if (!code) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n        }\n        return new Promise(function (resolve, reject) {\n            user.verifyAttribute(attr, code, {\n                onSuccess: function (data) {\n                    resolve(data);\n                    return;\n                },\n                onFailure: function (err) {\n                    reject(err);\n                    return;\n                },\n            });\n        });\n    };\n    AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n        var that = this;\n        return that\n            .currentUserPoolUser()\n            .then(function (user) { return that.verifyUserAttribute(user, attr); });\n    };\n    /**\n     * Confirm current user's attribute using a confirmation code\n     * @param {Object} attr - The attribute to be verified\n     * @param {String} code - The confirmation code\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n        var that = this;\n        return that\n            .currentUserPoolUser()\n            .then(function (user) { return that.verifyUserAttributeSubmit(user, attr, code); });\n    };\n    AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_10, isSignedInHostedUI;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_10 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_10);\n                        throw e_10;\n                    case 3:\n                        isSignedInHostedUI = this._oAuthHandler &&\n                            this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                if (opts && opts.global) {\n                                    logger.debug('user global sign out', user);\n                                    // in order to use global signout\n                                    // we must validate the user as an authenticated user by using getSession\n                                    var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n                                    user.getSession(function (err, result) { return __awaiter(_this, void 0, void 0, function () {\n                                        var cleanUpError_8;\n                                        var _this = this;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    if (!err) return [3 /*break*/, 5];\n                                                    logger.debug('failed to get the user session', err);\n                                                    if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                                    _a.label = 1;\n                                                case 1:\n                                                    _a.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                                case 2:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    cleanUpError_8 = _a.sent();\n                                                    rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_8.message));\n                                                    return [2 /*return*/];\n                                                case 4: return [2 /*return*/, rej(err)];\n                                                case 5:\n                                                    user.globalSignOut({\n                                                        onSuccess: function (data) {\n                                                            logger.debug('global sign out success');\n                                                            if (isSignedInHostedUI) {\n                                                                _this.oAuthSignOutRedirect(res, rej);\n                                                            }\n                                                            else {\n                                                                return res();\n                                                            }\n                                                        },\n                                                        onFailure: function (err) {\n                                                            logger.debug('global sign out failed', err);\n                                                            return rej(err);\n                                                        },\n                                                    });\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    }); }, { clientMetadata: clientMetadata });\n                                }\n                                else {\n                                    logger.debug('user sign out', user);\n                                    user.signOut(function () {\n                                        if (isSignedInHostedUI) {\n                                            _this.oAuthSignOutRedirect(res, rej);\n                                        }\n                                        else {\n                                            return res();\n                                        }\n                                    });\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n        var isBrowser = browserOrNode().isBrowser;\n        if (isBrowser) {\n            this.oAuthSignOutRedirectOrReject(reject);\n        }\n        else {\n            this.oAuthSignOutAndResolve(resolve);\n        }\n    };\n    AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n        this._oAuthHandler.signOut();\n        resolve();\n    };\n    AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n        this._oAuthHandler.signOut(); // this method redirects url\n        // App should be redirected to another url otherwise it will reject\n        setTimeout(function () { return reject(Error('Signout timeout fail')); }, 3000);\n    };\n    /**\n     * Sign out method\n     * @\n     * @return - A promise resolved if success\n     */\n    AuthClass.prototype.signOut = function (opts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_11, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.cleanCachedItems()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_11 = _a.sent();\n                        logger.debug('failed to clear cached items');\n                        return [3 /*break*/, 3];\n                    case 3:\n                        if (!this.userPool) return [3 /*break*/, 7];\n                        user = this.userPool.getCurrentUser();\n                        if (!user) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        logger.debug('no current Cognito user');\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        logger.debug('no Cognito User pool');\n                        _a.label = 8;\n                    case 8:\n                        /**\n                         * Note for future refactor - no reliable way to get username with\n                         * Cognito User Pools vs Identity when federating with Social Providers\n                         * This is why we need a well structured session object that can be inspected\n                         * and information passed back in the message below for Hub dispatch\n                         */\n                        dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n                        this.user = null;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.cleanCachedItems = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // clear cognito cached item\n                    return [4 /*yield*/, this.Credentials.clear()];\n                    case 1:\n                        // clear cognito cached item\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Change a password for an authenticated user\n     * @param {Object} user - The CognitoUser object\n     * @param {String} oldPassword - the current password\n     * @param {String} newPassword - the requested new password\n     * @return - A promise resolves if success\n     */\n    AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n        var _this = this;\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        return new Promise(function (resolve, reject) {\n            _this.userSession(user).then(function (session) {\n                user.changePassword(oldPassword, newPassword, function (err, data) {\n                    if (err) {\n                        logger.debug('change password failure', err);\n                        return reject(err);\n                    }\n                    else {\n                        return resolve(data);\n                    }\n                }, clientMetadata);\n            });\n        });\n    };\n    /**\n     * Initiate a forgot password request\n     * @param {String} username - the username to change password\n     * @return - A promise resolves if success\n     */\n    AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.forgotPassword({\n                onSuccess: function () {\n                    resolve();\n                    return;\n                },\n                onFailure: function (err) {\n                    logger.debug('forgot password failure', err);\n                    dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n                    reject(err);\n                    return;\n                },\n                inputVerificationCode: function (data) {\n                    dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n                    resolve(data);\n                    return;\n                },\n            }, clientMetadata);\n        });\n    };\n    /**\n     * Confirm a new password using a confirmation Code\n     * @param {String} username - The username\n     * @param {String} code - The confirmation code\n     * @param {String} password - The new password\n     * @return - A promise that resolves if success\n     */\n    AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n        if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }\n        if (!this.userPool) {\n            return this.rejectNoUserPool();\n        }\n        if (!username) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n        }\n        if (!code) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n        }\n        if (!password) {\n            return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.confirmPassword(code, password, {\n                onSuccess: function (success) {\n                    dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n                    resolve(success);\n                    return;\n                },\n                onFailure: function (err) {\n                    dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n                    reject(err);\n                    return;\n                },\n            }, clientMetadata);\n        });\n    };\n    /**\n     * Get user information\n     * @async\n     * @return {Object }- current User's information\n     */\n    AuthClass.prototype.currentUserInfo = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var source, user, attributes, userAttrs, credentials, e_12, info, err_1, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        source = this.Credentials.getCredSource();\n                        if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {\n                                return logger.error(err);\n                            })];\n                    case 1:\n                        user = _a.sent();\n                        if (!user) {\n                            return [2 /*return*/, null];\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 8, , 9]);\n                        return [4 /*yield*/, this.userAttributes(user)];\n                    case 3:\n                        attributes = _a.sent();\n                        userAttrs = this.attributesToObject(attributes);\n                        credentials = null;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, this.currentCredentials()];\n                    case 5:\n                        credentials = _a.sent();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        e_12 = _a.sent();\n                        logger.debug('Failed to retrieve credentials while getting current user info', e_12);\n                        return [3 /*break*/, 7];\n                    case 7:\n                        info = {\n                            id: credentials ? credentials.identityId : undefined,\n                            username: user.getUsername(),\n                            attributes: userAttrs,\n                        };\n                        return [2 /*return*/, info];\n                    case 8:\n                        err_1 = _a.sent();\n                        logger.error('currentUserInfo error', err_1);\n                        return [2 /*return*/, {}];\n                    case 9:\n                        if (source === 'federated') {\n                            user = this.user;\n                            return [2 /*return*/, user ? user : {}];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config.identityPoolId && !this._config.userPoolId) {\n                            throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n                        }\n                        // Ensure backwards compatability\n                        if (typeof providerOrOptions === 'undefined') {\n                            if (this._config.identityPoolId && !this._config.userPoolId) {\n                                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n                            }\n                        }\n                        if (!(isFederatedSignInOptions(providerOrOptions) ||\n                            isFederatedSignInOptionsCustom(providerOrOptions) ||\n                            hasCustomState(providerOrOptions) ||\n                            typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n                        options = providerOrOptions || {\n                            provider: CognitoHostedUIIdentityProvider.Cognito,\n                        };\n                        provider = isFederatedSignInOptions(options)\n                            ? options.provider\n                            : options.customProvider;\n                        customState = isFederatedSignInOptions(options)\n                            ? options.customState\n                            : options.customState;\n                        if (this._config.userPoolId) {\n                            client_id = isCognitoHostedOpts(this._config.oauth)\n                                ? this._config.userPoolWebClientId\n                                : this._config.oauth.clientID;\n                            redirect_uri = isCognitoHostedOpts(this._config.oauth)\n                                ? this._config.oauth.redirectSignIn\n                                : this._config.oauth.redirectUri;\n                            this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n                        }\n                        return [3 /*break*/, 4];\n                    case 1:\n                        provider = providerOrOptions;\n                        // To check if the user is already logged in\n                        try {\n                            loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n                            if (loggedInUser) {\n                                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n                            }\n                        }\n                        catch (e) { }\n                        token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n                        return [4 /*yield*/, this.Credentials.set({ provider: provider, token: token, identity_id: identity_id, user: user, expires_at: expires_at }, 'federation')];\n                    case 2:\n                        credentials = _a.sent();\n                        return [4 /*yield*/, this.currentAuthenticatedUser()];\n                    case 3:\n                        currentUser = _a.sent();\n                        dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n                        logger.debug('federated sign in credentials', credentials);\n                        return [2 /*return*/, credentials];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Used to complete the OAuth flow with or without the Cognito Hosted UI\n     * @param {String} URL - optional parameter for customers to pass in the response URL\n     */\n    AuthClass.prototype._handleAuthResponse = function (URL) {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (this.oAuthFlowInProgress) {\n                            logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n                            return [2 /*return*/];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, , 8, 9]);\n                        this.oAuthFlowInProgress = true;\n                        if (!this._config.userPoolId) {\n                            throw new Error(\"OAuth responses require a User Pool defined in config\");\n                        }\n                        dispatchAuthEvent('parsingCallbackUrl', { url: URL }, \"The callback url is being parsed\");\n                        currentUrl = URL || (browserOrNode().isBrowser ? window.location.href : '');\n                        hasCodeOrError = !!(parse(currentUrl).query || '')\n                            .split('&')\n                            .map(function (entry) { return entry.split('='); })\n                            .find(function (_a) {\n                            var _b = __read(_a, 1), k = _b[0];\n                            return k === 'code' || k === 'error';\n                        });\n                        hasTokenOrError = !!(parse(currentUrl).hash || '#')\n                            .substr(1)\n                            .split('&')\n                            .map(function (entry) { return entry.split('='); })\n                            .find(function (_a) {\n                            var _b = __read(_a, 1), k = _b[0];\n                            return k === 'access_token' || k === 'error';\n                        });\n                        if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];\n                        this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 6, , 7]);\n                        return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n                    case 3:\n                        _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n                        session = new CognitoUserSession({\n                            IdToken: new CognitoIdToken({ IdToken: idToken }),\n                            RefreshToken: new CognitoRefreshToken({\n                                RefreshToken: refreshToken,\n                            }),\n                            AccessToken: new CognitoAccessToken({\n                                AccessToken: accessToken,\n                            }),\n                        });\n                        credentials = void 0;\n                        if (!this._config.identityPoolId) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                    case 4:\n                        credentials = _b.sent();\n                        logger.debug('AWS credentials', credentials);\n                        _b.label = 5;\n                    case 5:\n                        isCustomStateIncluded = /-/.test(state);\n                        currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n                        // This calls cacheTokens() in Cognito SDK\n                        currentUser.setSignInUserSession(session);\n                        if (window && typeof window.history !== 'undefined') {\n                            window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n                        }\n                        dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n                        dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n                        if (isCustomStateIncluded) {\n                            customState = state.split('-').splice(1).join('-');\n                            dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n                        }\n                        //#endregion\n                        return [2 /*return*/, credentials];\n                    case 6:\n                        err_2 = _b.sent();\n                        logger.debug('Error in cognito hosted auth response', err_2);\n                        // Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n                        // Otherwise, reloading the page will throw errors as the `code` has already been spent.\n                        if (window && typeof window.history !== 'undefined') {\n                            window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n                        }\n                        dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n                        dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n                        dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n                        return [3 /*break*/, 7];\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        this.oAuthFlowInProgress = false;\n                        return [7 /*endfinally*/];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    AuthClass.prototype.essentialCredentials = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated,\n        };\n    };\n    AuthClass.prototype.attributesToObject = function (attributes) {\n        var _this = this;\n        var obj = {};\n        if (attributes) {\n            attributes.map(function (attribute) {\n                if (attribute.Name === 'email_verified' ||\n                    attribute.Name === 'phone_number_verified') {\n                    obj[attribute.Name] =\n                        _this.isTruthyString(attribute.Value) || attribute.Value === true;\n                }\n                else {\n                    obj[attribute.Name] = attribute.Value;\n                }\n            });\n        }\n        return obj;\n    };\n    AuthClass.prototype.isTruthyString = function (value) {\n        return (typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true');\n    };\n    AuthClass.prototype.createCognitoUser = function (username) {\n        var userData = {\n            Username: username,\n            Pool: this.userPool,\n        };\n        userData.Storage = this._storage;\n        var authenticationFlowType = this._config.authenticationFlowType;\n        var user = new CognitoUser(userData);\n        if (authenticationFlowType) {\n            user.setAuthenticationFlowType(authenticationFlowType);\n        }\n        return user;\n    };\n    AuthClass.prototype._isValidAuthStorage = function (obj) {\n        // We need to check if the obj has the functions of Storage\n        return (!!obj &&\n            typeof obj.getItem === 'function' &&\n            typeof obj.setItem === 'function' &&\n            typeof obj.removeItem === 'function' &&\n            typeof obj.clear === 'function');\n    };\n    AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n        if (config) {\n            if (!config.userPoolId || !config.identityPoolId) {\n                return AuthErrorTypes.MissingAuthConfig;\n            }\n        }\n        return AuthErrorTypes.NoConfig;\n    };\n    AuthClass.prototype.rejectAuthError = function (type) {\n        return Promise.reject(new AuthError(type));\n    };\n    AuthClass.prototype.rejectNoUserPool = function () {\n        var type = this.noUserPoolErrorHandler(this._config);\n        return Promise.reject(new NoUserPoolError(type));\n    };\n    AuthClass.prototype.rememberDevice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currUser, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.currentUserPoolUser()];\n                    case 1:\n                        currUser = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_2 = _a.sent();\n                        logger.debug('The user is not authenticated by the error', error_2);\n                        return [2 /*return*/, Promise.reject('The user is not authenticated')];\n                    case 3:\n                        currUser.getCachedDeviceKeyAndPassword();\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                currUser.setDeviceStatusRemembered({\n                                    onSuccess: function (data) {\n                                        res(data);\n                                    },\n                                    onFailure: function (err) {\n                                        if (err.code === 'InvalidParameterException') {\n                                            rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                                        }\n                                        else if (err.code === 'NetworkError') {\n                                            rej(new AuthError(AuthErrorTypes.NetworkError));\n                                        }\n                                        else {\n                                            rej(err);\n                                        }\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.forgetDevice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currUser, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.currentUserPoolUser()];\n                    case 1:\n                        currUser = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_3 = _a.sent();\n                        logger.debug('The user is not authenticated by the error', error_3);\n                        return [2 /*return*/, Promise.reject('The user is not authenticated')];\n                    case 3:\n                        currUser.getCachedDeviceKeyAndPassword();\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                currUser.forgetDevice({\n                                    onSuccess: function (data) {\n                                        res(data);\n                                    },\n                                    onFailure: function (err) {\n                                        if (err.code === 'InvalidParameterException') {\n                                            rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                                        }\n                                        else if (err.code === 'NetworkError') {\n                                            rej(new AuthError(AuthErrorTypes.NetworkError));\n                                        }\n                                        else {\n                                            rej(err);\n                                        }\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.fetchDevices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currUser, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.currentUserPoolUser()];\n                    case 1:\n                        currUser = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_4 = _a.sent();\n                        logger.debug('The user is not authenticated by the error', error_4);\n                        throw new Error('The user is not authenticated');\n                    case 3:\n                        currUser.getCachedDeviceKeyAndPassword();\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                var cb = {\n                                    onSuccess: function (data) {\n                                        var deviceList = data.Devices.map(function (device) {\n                                            var deviceName = device.DeviceAttributes.find(function (_a) {\n                                                var Name = _a.Name;\n                                                return Name === 'device_name';\n                                            }) || {};\n                                            var deviceInfo = {\n                                                id: device.DeviceKey,\n                                                name: deviceName.Value,\n                                            };\n                                            return deviceInfo;\n                                        });\n                                        res(deviceList);\n                                    },\n                                    onFailure: function (err) {\n                                        if (err.code === 'InvalidParameterException') {\n                                            rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                                        }\n                                        else if (err.code === 'NetworkError') {\n                                            rej(new AuthError(AuthErrorTypes.NetworkError));\n                                        }\n                                        else {\n                                            rej(err);\n                                        }\n                                    },\n                                };\n                                currUser.listDevices(MAX_DEVICES, null, cb);\n                            })];\n                }\n            });\n        });\n    };\n    return AuthClass;\n}());\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);\n//# sourceMappingURL=Auth.js.map"]},"metadata":{},"sourceType":"module"}