{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n  return input;\n}\nexport var hostHeaderMiddleware = function hostHeaderMiddleware(options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n        return __generator(this, function (_b) {\n          if (!HttpRequest.isInstance(args.request)) return [2 /*return*/, next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a;\n          //For H2 request, remove 'host' header and use ':authority' header instead\n          //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\";\n            //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n          return [2 /*return*/, next(args)];\n        });\n      });\n    };\n  };\n};\nexport var hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true\n};\nexport var getHostHeaderPlugin = function getHostHeaderPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAQ,wBAAwB;AAUpD,OAAM,SAAU,uBAAuB,CACrC,KAAqD,EAAA;EAErD,OAAO,KAAK;AACd;AAEA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAC/B,OAAiC,EAAA;EACE,OAAA,UAAC,IAAI,EAAA;IAAK,OAAA,UAAO,IAAI,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;UACxD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,IAAI,CAAC,CAAA;UACpD,OAAO,GAAK,IAAI,CAAA,OAAT;UACP,EAAA,GAAyB,CAAA,OAAO,CAAC,cAAc,CAAC,QAAQ,IAAI,CAAA,CAAE,EAAA,eAA1C,EAApB,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;UAC5B;UACA;UACA,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YACxE,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;YAC9B,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE;YAClC;WACD,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACnC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ;UAC3C;UACD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,IAAI,CAAC,CAAA;;;KAClB;EAd8C,CAc9C;AAdoC,CAcpC;AAED,OAAO,IAAM,2BAA2B,GAA2C;EACjF,IAAI,EAAE,sBAAsB;EAC5B,IAAI,EAAE,OAAO;EACb,QAAQ,EAAE,KAAK;EACf,IAAI,EAAE,CAAC,MAAM,CAAC;EACd,QAAQ,EAAE;CACX;AAED,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAI,OAAiC,EAAA;EAA0B,OAAC;IAC9F,YAAY,EAAE,sBAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,2BAA2B,CAAC;IAC7E;GACD;AAJ8F,CAI7F","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { AbsoluteLocation, BuildHandlerOptions, BuildMiddleware, Pluggable, RequestHandler } from \"@aws-sdk/types\";\n\nexport interface HostHeaderInputConfig {}\ninterface PreviouslyResolved {\n  requestHandler: RequestHandler<any, any>;\n}\nexport interface HostHeaderResolvedConfig {\n  requestHandler: RequestHandler<any, any>;\n}\nexport function resolveHostHeaderConfig<T>(\n  input: T & PreviouslyResolved & HostHeaderInputConfig\n): T & HostHeaderResolvedConfig {\n  return input;\n}\n\nexport const hostHeaderMiddleware = <Input extends object, Output extends object>(\n  options: HostHeaderResolvedConfig\n): BuildMiddleware<Input, Output> => (next) => async (args) => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const { request } = args;\n  const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n  //For H2 request, remove 'host' header and use ':authority' header instead\n  //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\n\nexport const hostHeaderMiddlewareOptions: BuildHandlerOptions & AbsoluteLocation = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true,\n};\n\nexport const getHostHeaderPlugin = (options: HostHeaderResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}