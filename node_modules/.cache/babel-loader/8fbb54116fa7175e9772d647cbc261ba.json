{"ast":null,"code":"import { constructStack } from \"@aws-sdk/middleware-stack\";\nvar Command = /** @class */function () {\n  function Command() {\n    this.middlewareStack = constructStack();\n  }\n  return Command;\n}();\nexport { Command };","map":{"version":3,"sources":["../../src/command.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,2BAA2B;AAG1D,IAAA,OAAA,GAAA,aAAA,YAAA;EAAA,SAAA,OAAA,GAAA;IAQW,IAAA,CAAA,eAAe,GAAoC,cAAc,EAAiB;EAM7F;EAAA,OAAA,OAAC;AAAD,CAAC,EAAA","sourcesContent":["import { constructStack } from \"@aws-sdk/middleware-stack\";\nimport { Command as ICommand, Handler, MetadataBearer, MiddlewareStack as IMiddlewareStack } from \"@aws-sdk/types\";\n\nexport abstract class Command<\n  Input extends ClientInput,\n  Output extends ClientOutput,\n  ResolvedClientConfiguration,\n  ClientInput extends object = any,\n  ClientOutput extends MetadataBearer = any\n> implements ICommand<ClientInput, Input, ClientOutput, Output, ResolvedClientConfiguration> {\n  abstract input: Input;\n  readonly middlewareStack: IMiddlewareStack<Input, Output> = constructStack<Input, Output>();\n  abstract resolveMiddleware(\n    stack: IMiddlewareStack<ClientInput, ClientOutput>,\n    configuration: ResolvedClientConfiguration,\n    options: any\n  ): Handler<Input, Output>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}