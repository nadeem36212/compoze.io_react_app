{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand, serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n *          token for a user authenticated by your backend authentication process. Supplying multiple\n *          logins will create an implicit linked account. You can only specify one developer provider\n *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n *          and to link new logins (that is, user credentials issued by a public provider or developer\n *          provider) to an existing identity. When you want to create a new identity, the\n *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n *             <code>IdentityId</code>. This API will create the identity in the specified\n *             <code>IdentityPoolId</code>.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\nvar GetOpenIdTokenForDeveloperIdentityCommand = /** @class */function (_super) {\n  __extends(GetOpenIdTokenForDeveloperIdentityCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetOpenIdTokenForDeveloperIdentityCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"GetOpenIdTokenForDeveloperIdentityCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);\n  };\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);\n  };\n  return GetOpenIdTokenForDeveloperIdentityCommand;\n}($Command);\nexport { GetOpenIdTokenForDeveloperIdentityCommand };","map":{"version":3,"sources":["../../../commands/GetOpenIdTokenForDeveloperIdentityCommand.ts"],"names":[],"mappings":";AACA,SACE,uCAAuC,EACvC,0CAA0C,QACrC,oBAAoB;AAC3B,SACE,+DAA+D,EAC/D,6DAA6D,QACxD,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAC1D,SAAS,gBAAgB,QAAQ,6BAA6B;AAE9D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAe5D;;;;;;;;;;;;;;AAcG;AACH,IAAA,yCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+D,SAAA,CAAA,yCAAA,EAAA,MAAA,CAAA;EAK7D;EACA;EAEA,SAAA,yCAAA,CAAqB,KAAqD,EAAA;IAA1E,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,yCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAkD,EAClD,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IAEzD,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,uBAAuB;IAC1C,IAAM,WAAW,GAAG,2CAA2C;IAC/D,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,uCAAuC,CAAC,kBAAkB;MACnF,wBAAwB,EAAE,0CAA0C,CAAC;KACtE;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,yCAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UACE,KAAqD,EACrD,OAAuB,EAAA;IAEvB,OAAO,6DAA6D,CAAC,KAAK,EAAE,OAAO,CAAC;EACtF,CAAC;EAEO,yCAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,MAAsB,EACtB,OAAuB,EAAA;IAEvB,OAAO,+DAA+D,CAAC,MAAM,EAAE,OAAO,CAAC;EACzF,CAAC;EAIH,OAAA,yCAAC;AAAD,CAAC,CA7D8D,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityResponse, } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand, serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n *          token for a user authenticated by your backend authentication process. Supplying multiple\n *          logins will create an implicit linked account. You can only specify one developer provider\n *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n *          and to link new logins (that is, user credentials issued by a public provider or developer\n *          provider) to an existing identity. When you want to create a new identity, the\n *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n *             <code>IdentityId</code>. This API will create the identity in the specified\n *             <code>IdentityPoolId</code>.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\nvar GetOpenIdTokenForDeveloperIdentityCommand = /** @class */ (function (_super) {\n    __extends(GetOpenIdTokenForDeveloperIdentityCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetOpenIdTokenForDeveloperIdentityCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetOpenIdTokenForDeveloperIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getAwsAuthPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"CognitoIdentityClient\";\n        var commandName = \"GetOpenIdTokenForDeveloperIdentityCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,\n            outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetOpenIdTokenForDeveloperIdentityCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);\n    };\n    GetOpenIdTokenForDeveloperIdentityCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);\n    };\n    return GetOpenIdTokenForDeveloperIdentityCommand;\n}($Command));\nexport { GetOpenIdTokenForDeveloperIdentityCommand };\n//# sourceMappingURL=GetOpenIdTokenForDeveloperIdentityCommand.js.map"]},"metadata":{},"sourceType":"module"}