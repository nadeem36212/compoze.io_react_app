{"ast":null,"code":"/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n// Comment - TODO: remove\nvar FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\nexport var DateUtils = {\n  /**\n   * Milliseconds to offset the date to compensate for clock skew between device & services\n   */\n  clockOffset: 0,\n  getDateWithClockOffset: function getDateWithClockOffset() {\n    if (DateUtils.clockOffset) {\n      return new Date(new Date().getTime() + DateUtils.clockOffset);\n    } else {\n      return new Date();\n    }\n  },\n  /**\n   * @returns {number} Clock offset in milliseconds\n   */\n  getClockOffset: function getClockOffset() {\n    return DateUtils.clockOffset;\n  },\n  getHeaderStringFromDate: function getHeaderStringFromDate(date) {\n    if (date === void 0) {\n      date = DateUtils.getDateWithClockOffset();\n    }\n    return date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n  },\n  getDateFromHeaderString: function getDateFromHeaderString(header) {\n    var _a = __read(header.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/), 7),\n      year = _a[1],\n      month = _a[2],\n      day = _a[3],\n      hour = _a[4],\n      minute = _a[5],\n      second = _a[6];\n    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));\n  },\n  isClockSkewed: function isClockSkewed(serverDate) {\n    // API gateway permits client calls that are off by no more than ±5 minutes\n    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;\n  },\n  isClockSkewError: function isClockSkewError(error) {\n    if (!error.response || !error.response.headers) {\n      return false;\n    }\n    var headers = error.response.headers;\n    return Boolean(['BadRequestException', 'InvalidSignatureException'].includes(headers['x-amzn-errortype']) && (headers.date || headers.Date));\n  },\n  /**\n   * @param {number} offset Clock offset in milliseconds\n   */\n  setClockOffset: function setClockOffset(offset) {\n    DateUtils.clockOffset = offset;\n  }\n};","map":{"version":3,"sources":["../../src/Util/DateUtils.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;;;;;;;;;;;;;;;;;;;;;;;;AAEH;AAEA,IAAM,kBAAkB,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;AAExC,OAAO,IAAM,SAAS,GAAG;EACxB;;AAEG;EACH,WAAW,EAAE,CAAC;EAEd,sBAAsB,EAAA,kCAAA;IACrB,IAAI,SAAS,CAAC,WAAW,EAAE;MAC1B,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,WAAW,CAAC;KAC7D,MAAM;MACN,OAAO,IAAI,IAAI,EAAE;IACjB;EACF,CAAC;EAED;;AAEG;EACH,cAAc,EAAA,0BAAA;IACb,OAAO,SAAS,CAAC,WAAW;EAC7B,CAAC;EAED,uBAAuB,EAAvB,iCAAwB,IAA+C,EAAA;IAA/C,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAa,SAAS,CAAC,sBAAsB,EAAE;IAAA;IACtE,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;EACxD,CAAC;EAED,uBAAuB,EAAvB,iCAAwB,MAAc,EAAA;IAC/B,IAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,gDAAA,CAAA,EAAA,CAAA,CAEL;MAFQ,IAAA,GAAA,EAAA,CAAA,CAAA,CAAI;MAAE,KAAA,GAAA,EAAA,CAAA,CAAA,CAAK;MAAE,GAAA,GAAA,EAAA,CAAA,CAAA,CAAG;MAAE,IAAA,GAAA,EAAA,CAAA,CAAA,CAAI;MAAE,MAAA,GAAA,EAAA,CAAA,CAAA,CAAM;MAAE,MAAA,GAAA,EAAA,CAAA,CAAA,CAExC;IAED,OAAO,IAAI,IAAI,CACd,IAAI,CAAC,GAAG,CACP,MAAM,CAAC,IAAI,CAAC,EACZ,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EACjB,MAAM,CAAC,GAAG,CAAC,EACX,MAAM,CAAC,IAAI,CAAC,EACZ,MAAM,CAAC,MAAM,CAAC,EACd,MAAM,CAAC,MAAM,CAAC,CACd,CACD;EACF,CAAC;EAED,aAAa,EAAb,uBAAc,UAAgB,EAAA;IAC7B;IACA,OACC,IAAI,CAAC,GAAG,CACP,UAAU,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,sBAAsB,EAAE,CAAC,OAAO,EAAE,CACnE,IAAI,kBAAkB;EAEzB,CAAC;EAED,gBAAgB,EAAhB,0BAAiB,KAAU,EAAA;IAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;MAC/C,OAAO,KAAK;IACZ;IAEO,IAAA,OAAA,GAAA,KAAA,CAAA,QAAA,CAAA,OAAO;IAEf,OAAO,OAAO,CACb,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC,QAAQ,CAC5D,OAAO,CAAC,kBAAkB,CAAC,CAC3B,KACC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,CAC/B;EACF,CAAC;EAED;;AAEG;EACH,cAAc,EAAd,wBAAe,MAAc,EAAA;IAC5B,SAAS,CAAC,WAAW,GAAG,MAAM;EAC/B;CACA","sourceRoot":"","sourcesContent":["/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n// Comment - TODO: remove\nvar FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\nexport var DateUtils = {\n    /**\n     * Milliseconds to offset the date to compensate for clock skew between device & services\n     */\n    clockOffset: 0,\n    getDateWithClockOffset: function () {\n        if (DateUtils.clockOffset) {\n            return new Date(new Date().getTime() + DateUtils.clockOffset);\n        }\n        else {\n            return new Date();\n        }\n    },\n    /**\n     * @returns {number} Clock offset in milliseconds\n     */\n    getClockOffset: function () {\n        return DateUtils.clockOffset;\n    },\n    getHeaderStringFromDate: function (date) {\n        if (date === void 0) { date = DateUtils.getDateWithClockOffset(); }\n        return date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    },\n    getDateFromHeaderString: function (header) {\n        var _a = __read(header.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];\n        return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));\n    },\n    isClockSkewed: function (serverDate) {\n        // API gateway permits client calls that are off by no more than ±5 minutes\n        return (Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS);\n    },\n    isClockSkewError: function (error) {\n        if (!error.response || !error.response.headers) {\n            return false;\n        }\n        var headers = error.response.headers;\n        return Boolean(['BadRequestException', 'InvalidSignatureException'].includes(headers['x-amzn-errortype']) &&\n            (headers.date || headers.Date));\n    },\n    /**\n     * @param {number} offset Clock offset in milliseconds\n     */\n    setClockOffset: function (offset) {\n        DateUtils.clockOffset = offset;\n    },\n};\n//# sourceMappingURL=DateUtils.js.map"]},"metadata":{},"sourceType":"module"}