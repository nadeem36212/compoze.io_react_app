{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport var constructStack = function constructStack() {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n  var sort = function sort(entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n  var removeByName = function removeByName(toRemove) {\n    var isRemoved = false;\n    var filterCb = function filterCb(entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var removeByReference = function removeByReference(toRemove) {\n    var isRemoved = false;\n    var filterCb = function filterCb(entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var cloneTo = function cloneTo(toStack) {\n    absoluteEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n  var expandRelativeMiddlewareList = function expandRelativeMiddlewareList(from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  var getMiddlewareList = function getMiddlewareList() {\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(entry.toMiddleware + \" is not found when adding \" + (entry.name || \"anonymous\") + \" middleware \" + entry.relation + \" \" + entry.toMiddleware);\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      // TODO: Replace it with Array.flat();\n      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));\n      return wholeList;\n    }, []);\n    return mainChain.map(function (entry) {\n      return entry.middleware;\n    });\n  };\n  var stack = {\n    add: function add(middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware with \" + toOverride.priority + \" priority in \" + toOverride.step + \" step cannot be \" + (\"overridden by same-name middleware with \" + entry.priority + \" priority in \" + entry.step + \" step.\"));\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function addRelativeTo(middleware, options) {\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware \" + toOverride.relation + \" \\\"\" + toOverride.toMiddleware + \"\\\" middleware cannot be overridden \" + (\"by same-name middleware \" + entry.relation + \" \\\"\" + entry.toMiddleware + \"\\\" middleware.\"));\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n    clone: function clone() {\n      return cloneTo(constructStack());\n    },\n    use: function use(plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function remove(toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function removeByTag(toRemove) {\n      var isRemoved = false;\n      var filterCb = function filterCb(entry) {\n        var tags = entry.tags,\n          name = entry.name;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function concat(from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    resolve: function resolve(handler, context) {\n      var e_1, _a;\n      try {\n        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"sources":["../../src/MiddlewareStack.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AbsoluteLocation,\n  DeserializeHandler,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  MiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport { AbsoluteMiddlewareEntry, MiddlewareEntry, Normalized, RelativeMiddlewareEntry } from \"./types\";\n\nexport const constructStack = <Input extends object, Output extends object>(): MiddlewareStack<Input, Output> => {\n  let absoluteEntries: AbsoluteMiddlewareEntry<Input, Output>[] = [];\n  let relativeEntries: RelativeMiddlewareEntry<Input, Output>[] = [];\n  const entriesNameSet: Set<string> = new Set();\n\n  const sort = <T extends AbsoluteMiddlewareEntry<Input, Output>>(entries: T[]): T[] =>\n    entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n\n  const removeByName = (toRemove: string): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = (toRemove: MiddlewareType<Input, Output>): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = <InputType extends Input, OutputType extends Output>(\n    toStack: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> => {\n    absoluteEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.add(entry.middleware, { ...entry });\n    });\n    relativeEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, { ...entry });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = (\n    from: Normalized<MiddlewareEntry<Input, Output>, Input, Output>\n  ): MiddlewareEntry<Input, Output>[] => {\n    const expandedMiddlewareList: MiddlewareEntry<Input, Output>[] = [];\n    from.before.forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  const getMiddlewareList = (): Array<MiddlewareType<Input, Output>> => {\n    const normalizedAbsoluteEntries: Normalized<AbsoluteMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedRelativeEntries: Normalized<RelativeMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedEntriesNameMap: {\n      [middlewareName: string]: Normalized<MiddlewareEntry<Input, Output>, Input, Output>;\n    } = {};\n\n    absoluteEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n\n    relativeEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n\n    normalizedRelativeEntries.forEach((entry) => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(\n            `${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${\n              entry.toMiddleware\n            }`\n          );\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n\n    const mainChain = sort(normalizedAbsoluteEntries)\n      .map(expandRelativeMiddlewareList)\n      .reduce((wholeList, expendedMiddlewareList) => {\n        // TODO: Replace it with Array.flat();\n        wholeList.push(...expendedMiddlewareList);\n        return wholeList;\n      }, [] as MiddlewareEntry<Input, Output>[]);\n    return mainChain.map((entry) => entry.middleware);\n  };\n\n  const stack = {\n    add: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}) => {\n      const { name, override } = options;\n      const entry: AbsoluteMiddlewareEntry<Input, Output> = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\n              `\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`\n            );\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n\n    addRelativeTo: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & RelativeLocation) => {\n      const { name, override } = options;\n      const entry: RelativeMiddlewareEntry<Input, Output> = {\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\n              `\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n            );\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n\n    clone: () => cloneTo(constructStack<Input, Output>()),\n\n    use: (plugin: Pluggable<Input, Output>) => {\n      plugin.applyToStack(stack);\n    },\n\n    remove: (toRemove: MiddlewareType<Input, Output> | string): boolean => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);\n      else return removeByReference(toRemove);\n    },\n\n    removeByTag: (toRemove: string): boolean => {\n      let isRemoved = false;\n      const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n        const { tags, name } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n\n    concat: <InputType extends Input, OutputType extends Output>(\n      from: MiddlewareStack<InputType, OutputType>\n    ): MiddlewareStack<InputType, OutputType> => {\n      const cloned = cloneTo(constructStack<InputType, OutputType>());\n      cloned.use(from);\n      return cloned;\n    },\n\n    applyToStack: cloneTo,\n\n    resolve: <InputType extends Input, OutputType extends Output>(\n      handler: DeserializeHandler<InputType, OutputType>,\n      context: HandlerExecutionContext\n    ): Handler<InputType, OutputType> => {\n      for (const middleware of getMiddlewareList().reverse()) {\n        handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n      }\n      return handler as Handler<InputType, OutputType>;\n    },\n  };\n  return stack;\n};\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}