{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var REGION_ENV_NAME = \"AWS_REGION\";\nexport var REGION_INI_NAME = \"region\";\nexport var NODE_REGION_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[REGION_ENV_NAME];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[REGION_INI_NAME];\n  },\n  default: function _default() {\n    throw new Error(\"Region is missing\");\n  }\n};\nexport var NODE_REGION_CONFIG_FILE_OPTIONS = {\n  preferredFile: \"credentials\"\n};\nexport var resolveRegionConfig = function resolveRegionConfig(input) {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n  return __assign(__assign({}, input), {\n    region: normalizeRegion(input.region)\n  });\n};\nvar normalizeRegion = function normalizeRegion(region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return region;\n};","map":{"version":3,"sources":["../../src/RegionConfig.ts"],"names":[],"mappings":";AAGA,OAAO,IAAM,eAAe,GAAG,YAAY;AAC3C,OAAO,IAAM,eAAe,GAAG,QAAQ;AAEvC,OAAO,IAAM,0BAA0B,GAAkC;EACvE,2BAA2B,EAAE,qCAAC,GAAG,EAAA;IAAK,OAAA,GAAG,CAAC,eAAe,CAAC;EAApB,CAAoB;EAC1D,kBAAkB,EAAE,4BAAC,OAAO,EAAA;IAAK,OAAA,OAAO,CAAC,eAAe,CAAC;EAAxB,CAAwB;EACzD,OAAO,EAAE,oBAAA;IACP,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;EACtC;CACD;AAED,OAAO,IAAM,+BAA+B,GAAuB;EACjE,aAAa,EAAE;CAChB;AAeD,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAO,KAAiD,EAAA;EACtF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IACjB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;EACrC;EACD,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;IACR,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAO;EAAC,CAAA,CAAA;AAE1C,CAAC;AAED,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,MAAiC,EAAA;EACxD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;IAC3C,OAAO,YAAA;MAAM,OAAA,aAAW;IAAX,CAAW;EACzB;EACD,OAAO,MAA0B;AACnC,CAAC","sourcesContent":["import { LoadedConfigSelectors, LocalConfigOptions } from \"@aws-sdk/node-config-provider\";\nimport { Provider } from \"@aws-sdk/types\";\n\nexport const REGION_ENV_NAME = \"AWS_REGION\";\nexport const REGION_INI_NAME = \"region\";\n\nexport const NODE_REGION_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n  configFileSelector: (profile) => profile[REGION_INI_NAME],\n  default: () => {\n    throw new Error(\"Region is missing\");\n  },\n};\n\nexport const NODE_REGION_CONFIG_FILE_OPTIONS: LocalConfigOptions = {\n  preferredFile: \"credentials\",\n};\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\n\ninterface PreviouslyResolved {}\n\nexport interface RegionResolvedConfig {\n  region: Provider<string>;\n}\n\nexport const resolveRegionConfig = <T>(input: T & RegionInputConfig & PreviouslyResolved): T & RegionResolvedConfig => {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n  return {\n    ...input,\n    region: normalizeRegion(input.region!),\n  };\n};\n\nconst normalizeRegion = (region: string | Provider<string>): Provider<string> => {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  }\n  return region as Provider<string>;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}