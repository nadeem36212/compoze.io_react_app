{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nvar HttpRequest = /** @class */function () {\n  function HttpRequest(options) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol ? options.protocol.substr(-1) !== \":\" ? options.protocol + \":\" : options.protocol : \"https:\";\n    this.path = options.path ? options.path.charAt(0) !== \"/\" ? \"/\" + options.path : options.path : \"/\";\n  }\n  HttpRequest.isInstance = function (request) {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    var req = request;\n    return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n  };\n  HttpRequest.prototype.clone = function () {\n    var cloned = new HttpRequest(__assign(__assign({}, this), {\n      headers: __assign({}, this.headers)\n    }));\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  };\n  return HttpRequest;\n}();\nexport { HttpRequest };\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce(function (carry, paramName) {\n    var _a;\n    var param = query[paramName];\n    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));\n  }, {});\n}","map":{"version":3,"sources":["../../src/httpRequest.ts"],"names":[],"mappings":";AAMA,IAAA,WAAA,GAAA,aAAA,YAAA;EAUE,SAAA,WAAA,CAAY,OAA2B,EAAA;IACrC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK;IACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI;IACxB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,CAAA,CAAE;IAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAA,CAAE;IACpC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI;IACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAC5B,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAC9B,OAAO,CAAC,QAAQ,GAAA,GAAG,GACtB,OAAO,CAAC,QAAQ,GAClB,QAAQ;IACZ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,GAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAA,GAAI,OAAO,CAAC,IAAM,GAAG,OAAO,CAAC,IAAI,GAAI,GAAG;EACvG;EAEO,WAAA,CAAA,UAAU,GAAjB,UAAkB,OAAgB,EAAA;IAChC;IACA,IAAI,CAAC,OAAO,EAAE,OAAO,KAAK;IAC1B,IAAM,GAAG,GAAQ,OAAO;IACxB,OACE,QAAQ,IAAI,GAAG,IACf,UAAU,IAAI,GAAG,IACjB,UAAU,IAAI,GAAG,IACjB,MAAM,IAAI,GAAG,IACb,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,IAChC,OAAO,GAAG,CAAC,SAAS,CAAC,KAAK,QAAQ;EAEtC,CAAC;EAED,WAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,IAAM,MAAM,GAAG,IAAI,WAAW,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACzB,IAAI,CAAA,EAAA;MACP,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EAAO,IAAI,CAAC,OAAO;IAAA,CAAA,CAAA,CAC1B;IACF,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;IACzD,OAAO,MAAM;EACf,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,EAAA;;AAED,SAAS,UAAU,CAAC,KAAwB,EAAA;EAC1C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAwB,EAAE,SAAiB,EAAA;;IAC3E,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;IAC9B,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CACP,SAAS,CAAA,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAE,QAAA,CAAK,KAAK,CAAA,GAAI,KAAK,EAAA,EAAA,EAAA;EAE1D,CAAC,EAAE,CAAA,CAAE,CAAC;AACR","sourcesContent":["import { Endpoint, HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\ntype HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & { method?: string };\n\nexport interface HttpRequest extends IHttpRequest {}\n\nexport class HttpRequest implements HttpMessage, Endpoint {\n  public method: string;\n  public protocol: string;\n  public hostname: string;\n  public port?: number;\n  public path: string;\n  public query: QueryParameterBag;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpRequestOptions) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol\n      ? options.protocol.substr(-1) !== \":\"\n        ? `${options.protocol}:`\n        : options.protocol\n      : \"https:\";\n    this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n  }\n\n  static isInstance(request: unknown): request is HttpRequest {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    const req: any = request;\n    return (\n      \"method\" in req &&\n      \"protocol\" in req &&\n      \"hostname\" in req &&\n      \"path\" in req &&\n      typeof req[\"query\"] === \"object\" &&\n      typeof req[\"headers\"] === \"object\"\n    );\n  }\n\n  clone(): HttpRequest {\n    const cloned = new HttpRequest({\n      ...this,\n      headers: { ...this.headers },\n    });\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  }\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}