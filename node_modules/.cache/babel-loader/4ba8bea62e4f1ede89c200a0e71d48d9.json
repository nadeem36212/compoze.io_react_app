{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nexport var resolveEndpointsConfig = function resolveEndpointsConfig(input) {\n  var _a;\n  return __assign(__assign({}, input), {\n    tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n    endpoint: input.endpoint ? normalizeEndpoint(input) : function () {\n      return getEndPointFromRegion(input);\n    },\n    isCustomEndpoint: input.endpoint ? true : false\n  });\n};\nvar normalizeEndpoint = function normalizeEndpoint(input) {\n  var endpoint = input.endpoint,\n    urlParser = input.urlParser;\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n  return endpoint;\n};\nvar getEndPointFromRegion = function getEndPointFromRegion(input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4 /*yield*/, input.region()];\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n          return [4 /*yield*/, input.regionInfoProvider(region)];\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n          return [2 /*return*/, input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"sources":["../../src/EndpointsConfig.ts"],"names":[],"mappings":";AAyBA,OAAO,IAAM,sBAAsB,GAAG,SAAzB,sBAAsB,CACjC,KAAoD,EAAA;;EACpB,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAC7B,KAAK,CAAA,EAAA;IACR,GAAG,EAAA,CAAA,EAAA,GAAE,KAAK,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,IAAI;IACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,YAAA;MAAM,OAAA,qBAAqB,CAAC,KAAK,CAAC;IAA5B,CAA4B;IACxF,gBAAgB,EAAE,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG;EAAK,CAAA,CAAA;CAC/C;AAEF,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,KAAgD,EAAA;EACjE,IAAA,QAAQ,GAAgB,KAAK,CAAA,QAArB;IAAE,SAAS,GAAK,KAAK,CAAA,SAAV;EAC3B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;IAChC,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACxD,OAAO,YAAA;MAAM,OAAA,aAAW;IAAX,CAAW;GACzB,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;IACvC,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC7C,OAAO,YAAA;MAAM,OAAA,aAAW;IAAX,CAAW;EACzB;EACD,OAAO,QAAS;AAClB,CAAC;AAED,IAAM,qBAAqB,GAAG,SAAxB,qBAAqB,CAAU,KAAgD,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;UAC3E,EAAA,GAAe,KAAK,CAAA,GAAV,EAAV,GAAG,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;UACH,OAAA,CAAA,CAAA,CAAA,WAAM,KAAK,CAAC,MAAM,EAAE,CAAA;;UAA7B,MAAM,GAAG,EAAA,CAAA,IAAA,EAAoB;UAE7B,YAAY,GAAG,IAAI,MAAM,CAAC,0DAA0D,CAAC;UAC3F,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;UACnD;UAEqB,OAAA,CAAA,CAAA,CAAA,WAAM,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;;UAApD,QAAQ,GAAA,CAAA,CAAA,EAAA,GAAM,EAAA,CAAA,IAAA,EAAuC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE,EAAA,QAAnD;UAChB,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC;UAC9D;UAED,OAAA,CAAA,CAAA,CAAA,YAAO,KAAK,CAAC,SAAS,CAAC,CAAG,GAAG,GAAG,QAAQ,GAAG,OAAO,IAAA,IAAA,GAAK,QAAU,CAAC,CAAA;MAAC;;;CACpE","sourcesContent":["import { Endpoint, Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\nexport interface EndpointsInputConfig {\n  /**\n   * The fully qualified endpoint of the webservice. This is only required when using a custom endpoint (for example, when using a local version of S3).\n   */\n  endpoint?: string | Endpoint | Provider<Endpoint>;\n\n  /**\n   * Whether TLS is enabled for requests.\n   */\n  tls?: boolean;\n}\n\ninterface PreviouslyResolved {\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n  region: Provider<string>;\n}\n\nexport interface EndpointsResolvedConfig extends Required<EndpointsInputConfig> {\n  endpoint: Provider<Endpoint>;\n  isCustomEndpoint: boolean;\n}\n\nexport const resolveEndpointsConfig = <T>(\n  input: T & EndpointsInputConfig & PreviouslyResolved\n): T & EndpointsResolvedConfig => ({\n  ...input,\n  tls: input.tls ?? true,\n  endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),\n  isCustomEndpoint: input.endpoint ? true : false,\n});\n\nconst normalizeEndpoint = (input: EndpointsInputConfig & PreviouslyResolved): Provider<Endpoint> => {\n  const { endpoint, urlParser } = input;\n  if (typeof endpoint === \"string\") {\n    const promisified = Promise.resolve(urlParser(endpoint));\n    return () => promisified;\n  } else if (typeof endpoint === \"object\") {\n    const promisified = Promise.resolve(endpoint);\n    return () => promisified;\n  }\n  return endpoint!;\n};\n\nconst getEndPointFromRegion = async (input: EndpointsInputConfig & PreviouslyResolved) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}