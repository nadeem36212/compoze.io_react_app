{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\nvar CredentialsClass = /** @class */function () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    return this._config;\n  };\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  // currently we only store the guest identity in local storage\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2 /*return*/, Promise.resolve(cred)];\n            }\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              return [2 /*return*/, Promise.reject('No Auth module registered in Amplify')];\n            }\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, Auth.currentUserPoolUser()];\n          case 2:\n            user_1 = _b.sent();\n            return [4 /*yield*/, Auth.currentSession()];\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4 /*yield*/, refreshRequest];\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n            return [3 /*break*/, 6];\n          case 5:\n            err_1 = _b.sent();\n            // should not throw because user might just be on guest access or is authenticated through federation\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3 /*break*/, 6];\n          case 6:\n            return [2 /*return*/, Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user,\n      token = federatedInfo.token,\n      identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at;\n    // Make sure expires_at is in millis\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n    var refreshHandler = _a.refreshHandler,\n      provider = _a.provider,\n      user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000;\n    // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n      if (!isNetworkError) {\n        _this.clear();\n      }\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n            }\n            _b = this;\n            return [4 /*yield*/, this._getGuestIdentityId()];\n          case 1:\n            identityId = _b._identityId = _c.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function credentialsProvider() {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2 /*return*/, credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3 /*break*/, 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4 /*yield*/, this._removeGuestIdentityId()];\n                    case 1:\n                      _a.sent();\n                      credentialsProvider = function credentialsProvider() {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2 /*return*/, credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];\n                    case 2:\n                      return [2 /*return*/, e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n      token = params.token,\n      identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n    var credentialsProvider = function credentialsProvider() {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4 /*yield*/, this._getGuestIdentityId()];\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3 /*break*/, 3];\n              return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n            case 3:\n              return [4 /*yield*/, cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3 /*break*/, 6];\n              // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              }\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              return [4 /*yield*/, this._removeGuestIdentityId()];\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n              _c.label = 6;\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2 /*return*/, {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n                if (!(source === 'guest')) return [3 /*break*/, 2];\n                return [4 /*yield*/, this._setGuestIdentityId(credentials.identityId)];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n        this._storage.removeItem('aws-amplify-federatedInfo');\n        return [2 /*return*/];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return CredentialsClass;\n}();\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\nexport default Credentials;","map":{"version":3,"sources":["../src/Credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool, } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand, } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\nvar CredentialsClass = /** @class */ (function () {\n    function CredentialsClass(config) {\n        this._gettingCredPromise = null;\n        this._refreshHandlers = {};\n        // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n        this.Auth = undefined;\n        this.configure(config);\n        this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n    }\n    CredentialsClass.prototype.getModuleName = function () {\n        return 'Credentials';\n    };\n    CredentialsClass.prototype.getCredSource = function () {\n        return this._credentials_source;\n    };\n    CredentialsClass.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        this._config = Object.assign({}, this._config, config);\n        var refreshHandlers = this._config.refreshHandlers;\n        // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n        }\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper().getStorage();\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        return this._config;\n    };\n    CredentialsClass.prototype.get = function () {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    };\n    // currently we only store the guest identity in local storage\n    CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n        return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n    };\n    CredentialsClass.prototype._pickupCredentials = function () {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n        }\n        else {\n            logger.debug('getting old cred promise');\n        }\n        return this._gettingCredPromise;\n    };\n    CredentialsClass.prototype._keepAlive = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug('checking if credentials exists and not expired');\n                        cred = this._credentials;\n                        if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n                            logger.debug('credentials not changed and not expired, directly return');\n                            return [2 /*return*/, Promise.resolve(cred)];\n                        }\n                        logger.debug('need to get a new credential or refresh the existing one');\n                        _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n                        if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n                            return [2 /*return*/, Promise.reject('No Auth module registered in Amplify')];\n                        }\n                        if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];\n                        logger.debug('ttl has passed but token is not yet expired');\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, Auth.currentUserPoolUser()];\n                    case 2:\n                        user_1 = _b.sent();\n                        return [4 /*yield*/, Auth.currentSession()];\n                    case 3:\n                        session = _b.sent();\n                        refreshToken_1 = session.refreshToken;\n                        refreshRequest = new Promise(function (res, rej) {\n                            user_1.refreshSession(refreshToken_1, function (err, data) {\n                                return err ? rej(err) : res(data);\n                            });\n                        });\n                        return [4 /*yield*/, refreshRequest];\n                    case 4:\n                        _b.sent(); // note that rejections will be caught and handled in the catch block.\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_1 = _b.sent();\n                        // should not throw because user might just be on guest access or is authenticated through federation\n                        logger.debug('Error attempting to refreshing the session', err_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/, Auth.currentUserCredentials()];\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n        logger.debug('Getting federated credentials');\n        var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;\n        var expires_at = federatedInfo.expires_at;\n        // Make sure expires_at is in millis\n        expires_at =\n            new Date(expires_at).getFullYear() === 1970\n                ? expires_at * 1000\n                : expires_at;\n        var that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({\n                provider: provider,\n                token: token,\n                user: user,\n                identity_id: identity_id,\n                expires_at: expires_at,\n            });\n        }\n        else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] &&\n                typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return this._providerRefreshWithRetry({\n                    refreshHandler: that._refreshHandlers[provider],\n                    provider: provider,\n                    user: user,\n                });\n            }\n            else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    };\n    CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n        var _this = this;\n        var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;\n        var MAX_DELAY_MS = 10 * 1000;\n        // refreshHandler will retry network errors, otherwise it will\n        // return NonRetryableError to break out of jitteredExponentialRetry\n        return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n            .then(function (data) {\n            logger.debug('refresh federated token sucessfully', data);\n            return _this._setCredentialsFromFederation({\n                provider: provider,\n                token: data.token,\n                user: user,\n                identity_id: data.identity_id,\n                expires_at: data.expires_at,\n            });\n        })\n            .catch(function (e) {\n            var isNetworkError = typeof e === 'string' &&\n                e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n            if (!isNetworkError) {\n                _this.clear();\n            }\n            logger.debug('refresh federated token failed', e);\n            return Promise.reject('refreshing federation token failed: ' + e);\n        });\n    };\n    CredentialsClass.prototype._isExpired = function (credentials) {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('are these credentials expired?', credentials);\n        var ts = Date.now();\n        /* returns date object.\n            https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n        */\n        var expiration = credentials.expiration;\n        return expiration.getTime() <= ts;\n    };\n    CredentialsClass.prototype._isPastTTL = function () {\n        return this._nextCredentialsRefresh <= Date.now();\n    };\n    CredentialsClass.prototype._setCredentialsForGuest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        logger.debug('setting credentials for guest');\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n                        if (mandatorySignIn) {\n                            return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n                        }\n                        if (!identityPoolId) {\n                            logger.debug('No Cognito Identity pool provided for unauthenticated access');\n                            return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n                        }\n                        if (!region) {\n                            logger.debug('region is not configured for getting the credentials');\n                            return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n                        }\n                        _b = this;\n                        return [4 /*yield*/, this._getGuestIdentityId()];\n                    case 1:\n                        identityId = _b._identityId = _c.sent();\n                        cognitoClient = new CognitoIdentityClient({\n                            region: region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        credentials = undefined;\n                        if (identityId) {\n                            cognitoIdentityParams = {\n                                identityId: identityId,\n                                client: cognitoClient,\n                            };\n                            credentials = fromCognitoIdentity(cognitoIdentityParams)();\n                        }\n                        else {\n                            credentialsProvider = function () { return __awaiter(_this, void 0, void 0, function () {\n                                var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                                IdentityPoolId: identityPoolId,\n                                            }))];\n                                        case 1:\n                                            IdentityId = (_a.sent()).IdentityId;\n                                            this._identityId = IdentityId;\n                                            cognitoIdentityParams = {\n                                                client: cognitoClient,\n                                                identityId: IdentityId,\n                                            };\n                                            credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                            return [2 /*return*/, credentialsFromCognitoIdentity()];\n                                    }\n                                });\n                            }); };\n                            credentials = credentialsProvider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    throw err;\n                                });\n                            }); });\n                        }\n                        return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)\n                                .then(function (res) {\n                                return res;\n                            })\n                                .catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                var credentialsProvider;\n                                var _this = this;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!(e.name === 'ResourceNotFoundException' &&\n                                                e.message === \"Identity '\" + identityId + \"' not found.\")) return [3 /*break*/, 2];\n                                            logger.debug('Failed to load guest credentials');\n                                            return [4 /*yield*/, this._removeGuestIdentityId()];\n                                        case 1:\n                                            _a.sent();\n                                            credentialsProvider = function () { return __awaiter(_this, void 0, void 0, function () {\n                                                var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0: return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                                                IdentityPoolId: identityPoolId,\n                                                            }))];\n                                                        case 1:\n                                                            IdentityId = (_a.sent()).IdentityId;\n                                                            this._identityId = IdentityId;\n                                                            cognitoIdentityParams = {\n                                                                client: cognitoClient,\n                                                                identityId: IdentityId,\n                                                            };\n                                                            credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                                            return [2 /*return*/, credentialsFromCognitoIdentity()];\n                                                    }\n                                                });\n                                            }); };\n                                            credentials = credentialsProvider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                                                return __generator(this, function (_a) {\n                                                    throw err;\n                                                });\n                                            }); });\n                                            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];\n                                        case 2: return [2 /*return*/, e];\n                                    }\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n        var provider = params.provider, token = params.token, identity_id = params.identity_id;\n        var domains = {\n            google: 'accounts.google.com',\n            facebook: 'graph.facebook.com',\n            amazon: 'www.amazon.com',\n            developer: 'cognito-identity.amazonaws.com',\n        };\n        // Use custom provider url instead of the predefined ones\n        var domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n        var logins = {};\n        logins[domain] = token;\n        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        if (!region) {\n            logger.debug('region is not configured for getting the credentials');\n            return Promise.reject('region is not configured for getting the credentials');\n        }\n        var cognitoClient = new CognitoIdentityClient({\n            region: region,\n            customUserAgent: getAmplifyUserAgent(),\n        });\n        var credentials = undefined;\n        if (identity_id) {\n            var cognitoIdentityParams = {\n                identityId: identity_id,\n                logins: logins,\n                client: cognitoClient,\n            };\n            credentials = fromCognitoIdentity(cognitoIdentityParams)();\n        }\n        else {\n            var cognitoIdentityParams = {\n                logins: logins,\n                identityPoolId: identityPoolId,\n                client: cognitoClient,\n            };\n            credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n        }\n        return this._loadCredentials(credentials, 'federated', true, params);\n    };\n    CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n        var _this = this;\n        logger.debug('set credentials from session');\n        var idToken = session.getIdToken().getJwtToken();\n        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        if (!region) {\n            logger.debug('region is not configured for getting the credentials');\n            return Promise.reject('region is not configured for getting the credentials');\n        }\n        var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        var logins = {};\n        logins[key] = idToken;\n        var cognitoClient = new CognitoIdentityClient({\n            region: region,\n            customUserAgent: getAmplifyUserAgent(),\n        });\n        /*\n            Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n            https://git.io/JeDxU\n\n            Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n        */\n        var credentialsProvider = function () { return __awaiter(_this, void 0, void 0, function () {\n            var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this._getGuestIdentityId()];\n                    case 1:\n                        guestIdentityId = _c.sent();\n                        if (!!guestIdentityId) return [3 /*break*/, 3];\n                        return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                IdentityPoolId: identityPoolId,\n                                Logins: logins,\n                            }))];\n                    case 2:\n                        IdentityId = (_c.sent()).IdentityId;\n                        generatedOrRetrievedIdentityId = IdentityId;\n                        _c.label = 3;\n                    case 3: return [4 /*yield*/, cognitoClient.send(new GetCredentialsForIdentityCommand({\n                            IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                            Logins: logins,\n                        }))];\n                    case 4:\n                        _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n                        this._identityId = primaryIdentityId;\n                        if (!guestIdentityId) return [3 /*break*/, 6];\n                        // if guestIdentity is found and used by GetCredentialsForIdentity\n                        // it will be linked to the logins provided, and disqualified as an unauth identity\n                        logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n                        if (guestIdentityId === primaryIdentityId) {\n                            logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n                        }\n                        // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n                        return [4 /*yield*/, this._removeGuestIdentityId()];\n                    case 5:\n                        // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n                        _c.sent();\n                        _c.label = 6;\n                    case 6: \n                    // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n                    return [2 /*return*/, {\n                            accessKeyId: AccessKeyId,\n                            secretAccessKey: SecretKey,\n                            sessionToken: SessionToken,\n                            expiration: Expiration,\n                            identityId: primaryIdentityId,\n                        }];\n                }\n            });\n        }); };\n        var credentials = credentialsProvider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw err;\n            });\n        }); });\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    };\n    CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n        var _this = this;\n        var that = this;\n        return new Promise(function (res, rej) {\n            credentials\n                .then(function (credentials) { return __awaiter(_this, void 0, void 0, function () {\n                var user, provider, token, expires_at, identity_id;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            logger.debug('Load credentials successfully', credentials);\n                            if (this._identityId && !credentials.identityId) {\n                                credentials['identityId'] = this._identityId;\n                            }\n                            that._credentials = credentials;\n                            that._credentials.authenticated = authenticated;\n                            that._credentials_source = source;\n                            that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                            if (source === 'federated') {\n                                user = Object.assign({ id: this._credentials.identityId }, info.user);\n                                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                                try {\n                                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                                        provider: provider,\n                                        token: token,\n                                        user: user,\n                                        expires_at: expires_at,\n                                        identity_id: identity_id,\n                                    }));\n                                }\n                                catch (e) {\n                                    logger.debug('Failed to put federated info into auth storage', e);\n                                }\n                            }\n                            if (!(source === 'guest')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this._setGuestIdentityId(credentials.identityId)];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2:\n                            res(that._credentials);\n                            return [2 /*return*/];\n                    }\n                });\n            }); })\n                .catch(function (err) {\n                if (err) {\n                    logger.debug('Failed to load credentials', credentials);\n                    logger.debug('Error loading credentials', err);\n                    rej(err);\n                    return;\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype.set = function (params, source) {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        }\n        else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        }\n        else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        }\n        else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    };\n    CredentialsClass.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this._credentials = null;\n                this._credentials_source = null;\n                logger.debug('removing aws-amplify-federatedInfo from storage');\n                this._storage.removeItem('aws-amplify-federatedInfo');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /* operations on local stored guest identity */\n    CredentialsClass.prototype._getGuestIdentityId = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var identityPoolId, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        identityPoolId = this._config.identityPoolId;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n                    case 3:\n                        e_1 = _a.sent();\n                        logger.debug('Failed to get the cached guest identityId', e_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var identityPoolId, e_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        identityPoolId = this._config.identityPoolId;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_2 = _a.sent();\n                        logger.debug('Failed to cache guest identityId', e_2);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype._removeGuestIdentityId = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var identityPoolId;\n            return __generator(this, function (_a) {\n                identityPoolId = this._config.identityPoolId;\n                logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n                this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    CredentialsClass.prototype.shear = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated,\n        };\n    };\n    return CredentialsClass;\n}());\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\nexport default Credentials;\n//# sourceMappingURL=Credentials.js.map"]},"metadata":{},"sourceType":"module"}