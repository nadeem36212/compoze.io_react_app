{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\n/**\n * @internal\n */\nexport function moveHeadersToQuery(request, options) {\n  var e_1, _a;\n  var _b;\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request),\n    headers = _c.headers,\n    _d = _c.query,\n    query = _d === void 0 ? {} : _d;\n  try {\n    for (var _e = __values(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var name = _f.value;\n      var lname = name.toLowerCase();\n      if (lname.substr(0, 6) === \"x-amz-\" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {\n        query[name] = headers[name];\n        delete headers[name];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return __assign(__assign({}, request), {\n    headers: headers,\n    query: query\n  });\n}","map":{"version":3,"sources":["../../src/moveHeadersToQuery.ts"],"names":[],"mappings":";AAEA,SAAS,YAAY,QAAQ,gBAAgB;AAE7C;;AAEG;AACH,OAAM,SAAU,kBAAkB,CAChC,OAAoB,EACpB,OAAkD,EAAA;;;EAAlD,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,CAAA,CAAkD;EAAA;EAE5C,IAAA,EAAA,GACJ,OAAQ,OAAe,CAAC,KAAK,KAAK,UAAU,GAAI,OAAe,CAAC,KAAK,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC;IADzF,OAAO,GAAA,EAAA,CAAA,OAAA;IAAE,EAAA,GAAA,EAAA,CAAA,KAA+B;IAA/B,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAA,CAAuB,GAAA,EACiD;;IACjG,KAAmB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;MAApC,IAAM,IAAI,GAAA,EAAA,CAAA,KAAA;MACb,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE;MAChC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,IAAI,EAAA,CAAA,EAAA,GAAC,OAAO,CAAC,kBAAkB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,KAAK,CAAA,CAAC,EAAE;QAC9E,KAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;QAC3B,OAAO,OAAO,CAAC,IAAI,CAAC;MACrB;IACF;;;;;;;;;;;;EAED,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,OAAO,CAAA,EAAA;IACV,OAAO,EAAA,OAAA;IACP,KAAK,EAAA;EAAA,CAAA,CAAA;AAET","sourcesContent":["import { HttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\nimport { cloneRequest } from \"./cloneRequest\";\n\n/**\n * @internal\n */\nexport function moveHeadersToQuery(\n  request: HttpRequest,\n  options: { unhoistableHeaders?: Set<string> } = {}\n): HttpRequest & { query: QueryParameterBag } {\n  const { headers, query = {} as QueryParameterBag } =\n    typeof (request as any).clone === \"function\" ? (request as any).clone() : cloneRequest(request);\n  for (const name of Object.keys(headers)) {\n    const lname = name.toLowerCase();\n    if (lname.substr(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n      query[name] = headers[name];\n      delete headers[name];\n    }\n  }\n\n  return {\n    ...request,\n    headers,\n    query,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}