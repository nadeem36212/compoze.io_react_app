{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\n/**\n * @internal\n */\nexport function getCanonicalQuery(_a) {\n  var e_1, _b;\n  var _c = _a.query,\n    query = _c === void 0 ? {} : _c;\n  var keys = [];\n  var serialized = {};\n  var _loop_1 = function _loop_1(key) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      return \"continue\";\n    }\n    keys.push(key);\n    var value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\n    } else if (Array.isArray(value)) {\n      serialized[key] = value.slice(0).sort().reduce(function (encoded, value) {\n        return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]);\n      }, []).join(\"&\");\n    }\n  };\n  try {\n    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var key = _e.value;\n      _loop_1(key);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return keys.map(function (key) {\n    return serialized[key];\n  }).filter(function (serialized) {\n    return serialized;\n  }) // omit any falsy values\n  .join(\"&\");\n}","map":{"version":3,"sources":["../../src/getCanonicalQuery.ts"],"names":[],"mappings":";AACA,SAAS,SAAS,QAAQ,0BAA0B;AAEpD,SAAS,gBAAgB,QAAQ,aAAa;AAE9C;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAAC,EAA2B,EAAA;;MAAzB,EAAA,GAAA,EAAA,CAAA,KAAU;IAAV,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAA,CAAE,GAAA,EAAA;EAC5C,IAAM,IAAI,GAAkB,EAAE;EAC9B,IAAM,UAAU,GAA8B,CAAA,CAAE;iCACrC,GAAG,EAAA;IACZ,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,gBAAgB,EAAE;;IAE3C;IAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MAC7B,UAAU,CAAC,GAAG,CAAC,GAAM,SAAS,CAAC,GAAG,CAAC,GAAA,GAAA,GAAI,SAAS,CAAC,KAAK,CAAG;KAC1D,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MAC/B,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CACpB,KAAK,CAAC,CAAC,CAAC,CACR,IAAI,EAAE,CACN,MAAM,CACL,UAAC,OAAsB,EAAE,KAAa,EAAA;QAAK,OAAA,OAAO,CAAC,MAAM,CAAC,CAAI,SAAS,CAAC,GAAG,CAAC,GAAA,GAAA,GAAI,SAAS,CAAC,KAAK,CAAG,CAAC,CAAC;MAAzD,CAAyD,EACpG,EAAE,CACH,CACA,IAAI,CAAC,GAAG,CAAC;IACb;;;IAlBH,KAAkB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;MAAtC,IAAM,GAAG,GAAA,EAAA,CAAA,KAAA;cAAH,GAAG,CAAA;IAmBb;;;;;;;;;;;;EAED,OAAO,IAAI,CACR,GAAG,CAAC,UAAC,GAAG,EAAA;IAAK,OAAA,UAAU,CAAC,GAAG,CAAC;EAAf,CAAe,CAAC,CAC7B,MAAM,CAAC,UAAC,UAAU,EAAA;IAAK,OAAA,UAAU;EAAV,CAAU,CAAC,CAAC;EAAA,CACnC,IAAI,CAAC,GAAG,CAAC;AACd","sourcesContent":["import { HttpRequest } from \"@aws-sdk/types\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\n\nimport { SIGNATURE_HEADER } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalQuery({ query = {} }: HttpRequest): string {\n  const keys: Array<string> = [];\n  const serialized: { [key: string]: string } = {};\n  for (const key of Object.keys(query).sort()) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      continue;\n    }\n\n    keys.push(key);\n    const value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n    } else if (Array.isArray(value)) {\n      serialized[key] = value\n        .slice(0)\n        .sort()\n        .reduce(\n          (encoded: Array<string>, value: string) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]),\n          []\n        )\n        .join(\"&\");\n    }\n  }\n\n  return keys\n    .map((key) => serialized[key])\n    .filter((serialized) => serialized) // omit any falsy values\n    .join(\"&\");\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}