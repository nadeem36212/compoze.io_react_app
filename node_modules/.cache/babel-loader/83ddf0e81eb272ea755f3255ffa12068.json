{"ast":null,"code":"import _regeneratorRuntime from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createProduct, getProducts } from './productAPI';\n// import { fetchCount } from './counterAPI';\n\nvar initialState = {\n  products: []\n};\nexport var fetchProducts = createAsyncThunk('products/fetchProducts', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var orgId;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            orgId = _ref.orgId;\n            _context.next = 3;\n            return getProducts();\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var createNewProduct = createAsyncThunk('products/createProduct', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n    var name, accountId, githubOrganization, region, environments, createVpc;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            name = _ref3.name, accountId = _ref3.accountId, githubOrganization = _ref3.githubOrganization, region = _ref3.region, environments = _ref3.environments, createVpc = _ref3.createVpc;\n            _context2.next = 3;\n            return createProduct(name, accountId, region, environments, createVpc, githubOrganization);\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport var selectProducts = function selectProducts(state) {\n  return state.products.products;\n};\nexport var productsSlice = createSlice({\n  name: 'product',\n  initialState: initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchProducts.fulfilled, function (state, action) {\n      state.products = action.payload;\n    });\n    builder.addCase(createNewProduct.fulfilled, function (state, action) {\n      state.products.push(action.payload);\n    });\n  }\n});\nexport default productsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createProduct","getProducts","initialState","products","fetchProducts","orgId","createNewProduct","name","accountId","githubOrganization","region","environments","createVpc","selectProducts","state","productsSlice","reducers","extraReducers","builder","addCase","fulfilled","action","payload","push","reducer"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/products/productSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { createProduct, getProducts } from './productAPI';\n// import { fetchCount } from './counterAPI';\n\nexport interface ProductInformation {\n  id: string;\n  accountId: string;\n  name: string;\n  region: string;\n  // environments: string;\n  totalCost: string;\n  forecastedAmount: string;\n  complianceIssues: string;\n}\n\nexport interface ProductState {\n  products: ProductInformation[];\n}\n\ninterface GetProductsThunkArgs {\n  orgId: string;\n}\ninterface CreateProductThunkArgs {\n  name: string;\n  accountId: string;\n  githubOrganization?: string;\n  region: string;\n  environments: string[];\n  createVpc: boolean;\n}\nconst initialState: ProductState = {\n  products: [],\n};\n\nexport const fetchProducts = createAsyncThunk(\n  'products/fetchProducts',\n  async ({ orgId }: GetProductsThunkArgs) => {\n\n    return await getProducts()\n  }\n);\n\nexport const createNewProduct = createAsyncThunk(\n  'products/createProduct',\n  async ({ name, accountId, githubOrganization, region, environments, createVpc }: CreateProductThunkArgs) => {\n\n    return await createProduct(name, accountId, region, environments, createVpc, githubOrganization)\n\n  }\n);\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectProducts = (state: RootState) => state.products.products;\n\nexport const productsSlice = createSlice({\n  name: 'product',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchProducts.fulfilled, (state, action) => {\n      state.products = action.payload;\n    });\n    builder.addCase(createNewProduct.fulfilled, (state, action) => {\n      state.products.push(action.payload);\n    });\n  },\n});\n\nexport default productsSlice.reducer;\n"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,aAAa,EAAEC,WAAW,QAAQ,cAAc;AACzD;;AA4BA,IAAMC,YAA0B,GAAG;EACjCC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,IAAMC,aAAa,GAAGN,gBAAgB,CAC3C,wBAAwB;EAAA,uEACxB;IAAA;IAAA;MAAA;QAAA;UAAA;YAASO,KAAK,QAALA,KAAK;YAAA;YAAA,OAECJ,WAAW,EAAE;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;IAAA;EAAA;AAAA,IACF;AAED,OAAO,IAAMK,gBAAgB,GAAGR,gBAAgB,CAC9C,wBAAwB;EAAA,uEACxB;IAAA;IAAA;MAAA;QAAA;UAAA;YAASS,IAAI,SAAJA,IAAI,EAAEC,SAAS,SAATA,SAAS,EAAEC,kBAAkB,SAAlBA,kBAAkB,EAAEC,MAAM,SAANA,MAAM,EAAEC,YAAY,SAAZA,YAAY,EAAEC,SAAS,SAATA,SAAS;YAAA;YAAA,OAE9DZ,aAAa,CAACO,IAAI,EAAEC,SAAS,EAAEE,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAEH,kBAAkB,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEjG;EAAA;IAAA;EAAA;AAAA,IACF;AACD;AACA;AACA;AACA,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAc,CAAIC,KAAgB;EAAA,OAAKA,KAAK,CAACX,QAAQ,CAACA,QAAQ;AAAA;AAE3E,OAAO,IAAMY,aAAa,GAAGhB,WAAW,CAAC;EACvCQ,IAAI,EAAE,SAAS;EACfL,YAAY,EAAZA,YAAY;EACZ;EACAc,QAAQ,EAAE,CAAC,CAAC;EACZ;EACA;EACAC,aAAa,EAAE,uBAACC,OAAO,EAAK;IAC1BA,OAAO,CAACC,OAAO,CAACf,aAAa,CAACgB,SAAS,EAAE,UAACN,KAAK,EAAEO,MAAM,EAAK;MAC1DP,KAAK,CAACX,QAAQ,GAAGkB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAACb,gBAAgB,CAACc,SAAS,EAAE,UAACN,KAAK,EAAEO,MAAM,EAAK;MAC7DP,KAAK,CAACX,QAAQ,CAACoB,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeP,aAAa,CAACS,OAAO"},"metadata":{},"sourceType":"module"}