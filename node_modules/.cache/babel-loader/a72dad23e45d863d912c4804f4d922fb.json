{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(flatten);\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction flatten(arrays) {\n  var _iterator, _step, array;\n  return _regeneratorRuntime().wrap(function flatten$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(arrays);\n          _context.prev = 1;\n          _iterator.s();\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 8;\n            break;\n          }\n          array = _step.value;\n          return _context.delegateYield(array, \"t0\", 6);\n        case 6:\n          _context.next = 3;\n          break;\n        case 8:\n          _context.next = 13;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t1 = _context[\"catch\"](1);\n          _iterator.e(_context.t1);\n        case 13:\n          _context.prev = 13;\n          _iterator.f();\n          return _context.finish(13);\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10, 13, 16]]);\n}\nfunction merge(arrays) {\n  return Array.from(flatten(arrays));\n}","map":{"version":3,"names":["flatten","Object","defineProperty","exports","value","default","merge","arrays","array","Array","from"],"sources":["/Users/naeem/syntaxroot/compoze.io_react_app/node_modules/victory-vendor/lib-vendor/d3-array/src/merge.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\n\nfunction* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nfunction merge(arrays) {\n  return Array.from(flatten(arrays));\n}"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA,sDAOHA,OAAO;AALjBC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,KAAK;AAEvB,SAAUN,OAAO,CAACO,MAAM;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,uCACFA,MAAM;UAAA;UAAA;QAAA;UAAA;YAAA;YAAA;UAAA;UAAfC,KAAK;UACd,8BAAOA,KAAK;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIhB,SAASF,KAAK,CAACC,MAAM,EAAE;EACrB,OAAOE,KAAK,CAACC,IAAI,CAACV,OAAO,CAACO,MAAM,CAAC,CAAC;AACpC"},"metadata":{},"sourceType":"script"}