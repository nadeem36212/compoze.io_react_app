{"ast":null,"code":"import _slicedToArray from \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/component/create/rds/RDSComponentCreation.tsx\",\n  _s = $RefreshSig$();\nimport { Flex } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport FormOption from \"../../../../components/form/FormSelectOption\";\nimport FreeFormSelect from \"../../../../components/form/FreeFormSelect\";\nimport NumberFormOption from \"../../../../components/form/NumberInputOption\";\nimport CreateForm from \"../../../products/create/CreateForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RDSComponentCreation(props) {\n  _s();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    databaseType = _useState2[0],\n    setDatabaseType = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    instanceType = _useState4[0],\n    setInstanceType = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    storageSize = _useState6[0],\n    setStorageSize = _useState6[1];\n  var templateDatabaseType = props.template ? props.template.attributes['databaseType'] : undefined;\n  var templateInstanceType = props.template ? props.template.attributes['instanceType'] : undefined;\n  var templateStorageSize = props.template ? props.template.attributes['storageSize'] : undefined;\n  var databaseTypeOptions = [{\n    displayName: \"Postgres\",\n    value: \"POSTGRES\"\n  }, {\n    displayName: \"MySQL\",\n    value: \"MYSQL\"\n  }];\n  var selectDatabaseType = /*#__PURE__*/_jsxDEV(Flex, {\n    py: 4,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(FormOption, {\n        label: \"Which database engine would you like to use?\",\n        placeHolder: \"Select a database engine\",\n        options: databaseTypeOptions,\n        onChange: function onChange(event) {\n          //find the option that was selected\n          var selectedOption = databaseTypeOptions.find(function (option) {\n            return option.displayName === event.target.value;\n          });\n          setDatabaseType(selectedOption.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n  var instanceTypeOptions = [{\n    displayName: \"t3.micro (~$13.00 / month)\",\n    value: \"t3.micro\"\n  }, {\n    displayName: \"t3.small (~$26.00 / month)\",\n    value: \"t3.small\"\n  }, {\n    displayName: \"t3.medium (~$52.00 / month)\",\n    value: \"t3.medium\"\n  }, {\n    displayName: \"t3.large (~$105.00 / month)\",\n    value: \"t3.large\"\n  }, {\n    displayName: \"t3.xlarge (~$209.00 / month)\",\n    value: \"t3.xlarge\"\n  }];\n  var selectInstanceType = /*#__PURE__*/_jsxDEV(Flex, {\n    py: 4,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(FormOption, {\n        label: \"What size RDS instance?\",\n        placeHolder: \"Instance Type\",\n        options: instanceTypeOptions,\n        onChange: function onChange(event) {\n          var selectedOption = instanceTypeOptions.find(function (option) {\n            return option.displayName === event.target.value;\n          });\n          setInstanceType(selectedOption.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n  var selectStorageSize = /*#__PURE__*/_jsxDEV(Flex, {\n    py: 4,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(NumberFormOption, {\n        label: \"How much disk storage do you want allocated for you instance?\",\n        helperText: \"The minimum is 20 GiB and the maximum is 16,384 GiB (in Gigs)\",\n        min: 20,\n        max: 16384,\n        onChange: function onChange(valueAsString, valueAsNumber) {\n          setStorageSize(valueAsString);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n  var inputComponentName = /*#__PURE__*/_jsxDEV(Flex, {\n    py: 4,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(FreeFormSelect, {\n        label: \"What would you like to name your RDS Component?\",\n        helperText: \"No special characters or spaces\",\n        placeHolder: \"Component Name\",\n        onChange: function onChange(e) {\n          props.setName(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n  var steps = [{\n    label: 'Provide a Name',\n    content: inputComponentName\n  }];\n  if (props.template) {\n    if (!templateDatabaseType) {\n      steps.push({\n        label: 'Select Database Engine',\n        content: selectDatabaseType\n      });\n    }\n    if (!templateInstanceType) {\n      steps.push({\n        label: 'Instance Size',\n        content: selectInstanceType\n      });\n    }\n    if (!templateStorageSize) {\n      steps.push({\n        label: 'Storage Size',\n        content: selectStorageSize\n      });\n    }\n  } else {\n    steps.push({\n      label: 'Select Database Engine',\n      content: selectDatabaseType\n    });\n    steps.push({\n      label: 'Instance Size',\n      content: selectInstanceType\n    });\n    steps.push({\n      label: 'Storage Size',\n      content: selectStorageSize\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(CreateForm, {\n    heading: \"Create Your RDS Component\",\n    steps: steps,\n    finishForm: function finishForm() {\n      props.setAttributes({\n        databaseType: templateDatabaseType !== null && templateDatabaseType !== void 0 ? templateDatabaseType : databaseType,\n        instanceType: templateInstanceType !== null && templateInstanceType !== void 0 ? templateInstanceType : instanceType,\n        storageSize: templateStorageSize !== null && templateStorageSize !== void 0 ? templateStorageSize : storageSize\n      });\n      props.finishForm();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s(RDSComponentCreation, \"kGL57OkOffXCk9n8z5O5pKiFbuQ=\");\n_c = RDSComponentCreation;\nvar _c;\n$RefreshReg$(_c, \"RDSComponentCreation\");","map":{"version":3,"names":["Flex","useState","FormOption","FreeFormSelect","NumberFormOption","CreateForm","RDSComponentCreation","props","databaseType","setDatabaseType","instanceType","setInstanceType","storageSize","setStorageSize","templateDatabaseType","template","attributes","undefined","templateInstanceType","templateStorageSize","databaseTypeOptions","displayName","value","selectDatabaseType","event","selectedOption","find","option","target","instanceTypeOptions","selectInstanceType","selectStorageSize","valueAsString","valueAsNumber","inputComponentName","e","setName","steps","label","content","push","setAttributes","finishForm"],"sources":["/Users/naeem/syntaxroot/costdashboard-fe-redesign/src/features/component/create/rds/RDSComponentCreation.tsx"],"sourcesContent":["import { Flex } from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport FormOption from \"../../../../components/form/FormSelectOption\"\nimport FreeFormSelect from \"../../../../components/form/FreeFormSelect\"\nimport NumberFormOption from \"../../../../components/form/NumberInputOption\"\nimport CreateForm from \"../../../products/create/CreateForm\"\nimport { Template } from \"../../../templates/templateSlice\"\n\ninterface RDSComponentCreationProps {\n    finishForm: () => void\n    setName: (name: string) => void\n    setAttributes: (attributes: any) => void\n    template?: Template\n\n}\nexport default function RDSComponentCreation(props: RDSComponentCreationProps) {\n    const [databaseType, setDatabaseType] = useState('')\n    const [instanceType, setInstanceType] = useState('')\n    const [storageSize, setStorageSize] = useState('')\n\n    const templateDatabaseType = props.template ? props.template.attributes['databaseType'] : undefined\n    const templateInstanceType = props.template ? props.template.attributes['instanceType'] : undefined\n    const templateStorageSize = props.template ? props.template.attributes['storageSize'] : undefined\n\n    const databaseTypeOptions = [{ displayName: \"Postgres\", value: \"POSTGRES\" }, { displayName: \"MySQL\", value: \"MYSQL\" }];\n    const selectDatabaseType = (\n        <Flex py={4}>\n            <Flex py={10}>\n                <FormOption\n                    label='Which database engine would you like to use?'\n                    placeHolder='Select a database engine'\n                    options={databaseTypeOptions}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        //find the option that was selected\n                        const selectedOption = databaseTypeOptions.find(option => option.displayName === event.target.value)!;\n                        setDatabaseType(selectedOption.value);\n                    }}\n                />\n            </Flex>\n        </Flex>\n    );\n\n    const instanceTypeOptions = [{ displayName: \"t3.micro (~$13.00 / month)\", value: \"t3.micro\" }, { displayName: \"t3.small (~$26.00 / month)\", value: \"t3.small\" }, { displayName: \"t3.medium (~$52.00 / month)\", value: \"t3.medium\" }, { displayName: \"t3.large (~$105.00 / month)\", value: \"t3.large\" }, { displayName: \"t3.xlarge (~$209.00 / month)\", value: \"t3.xlarge\" }];\n    const selectInstanceType = (\n        <Flex py={4}>\n            <Flex py={10}>\n                <FormOption\n                    label='What size RDS instance?'\n                    placeHolder='Instance Type'\n                    options={instanceTypeOptions}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        const selectedOption = instanceTypeOptions.find(option => option.displayName === event.target.value)!;\n                        setInstanceType(selectedOption.value);\n                    }}\n                />\n            </Flex>\n        </Flex>\n    );\n\n    const selectStorageSize = (\n        <Flex py={4}>\n            <Flex py={10}>\n                <NumberFormOption\n                    label='How much disk storage do you want allocated for you instance?'\n                    helperText='The minimum is 20 GiB and the maximum is 16,384 GiB (in Gigs)'\n                    min={20}\n                    max={16384}\n                    onChange={(valueAsString: string, valueAsNumber: number) => {\n\n                        setStorageSize(valueAsString)\n                    }}\n                />\n            </Flex>\n        </Flex>\n    );\n    const inputComponentName = (\n        <Flex py={4}>\n            <Flex py={10}>\n                <FreeFormSelect\n                    label='What would you like to name your RDS Component?'\n                    helperText='No special characters or spaces'\n                    placeHolder='Component Name'\n                    onChange={(e: any) => {\n                        props.setName(e.target.value)\n                    }}\n                />\n            </Flex>\n        </Flex>\n    );\n\n    let steps = [{ label: 'Provide a Name', content: inputComponentName },\n    ];\n    if (props.template) {\n\n        if (!templateDatabaseType) {\n            steps.push({\n                label: 'Select Database Engine',\n                content: selectDatabaseType\n            })\n        }\n        if (!templateInstanceType) {\n            steps.push({ label: 'Instance Size', content: selectInstanceType },)\n        }\n        if (!templateStorageSize) {\n            steps.push({ label: 'Storage Size', content: selectStorageSize })\n        }\n    } else {\n        steps.push({ label: 'Select Database Engine', content: selectDatabaseType })\n        steps.push({ label: 'Instance Size', content: selectInstanceType },)\n        steps.push({ label: 'Storage Size', content: selectStorageSize })\n    }\n\n\n    return (\n        <CreateForm heading=\"Create Your RDS Component\" steps={steps} finishForm={() => {\n            props.setAttributes({\n                databaseType: templateDatabaseType ?? databaseType,\n                instanceType: templateInstanceType ?? instanceType,\n                storageSize: templateStorageSize ?? storageSize\n            })\n            props.finishForm()\n        }} />\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}