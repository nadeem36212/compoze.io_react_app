{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n//reference: https://snack.expo.io/r1JCSWRGU\nexport var streamCollector = function streamCollector(stream) {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n  return collectStream(stream);\n};\nfunction collectBlob(blob) {\n  return __awaiter(this, void 0, void 0, function () {\n    var base64, arrayBuffer;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, readToBase64(blob)];\n        case 1:\n          base64 = _a.sent();\n          arrayBuffer = fromBase64(base64);\n          return [2 /*return*/, new Uint8Array(arrayBuffer)];\n      }\n    });\n  });\n}\nfunction collectStream(stream) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, reader, isDone, _a, done, value, prior;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          res = new Uint8Array(0);\n          reader = stream.getReader();\n          isDone = false;\n          _b.label = 1;\n        case 1:\n          if (!!isDone) return [3 /*break*/, 3];\n          return [4 /*yield*/, reader.read()];\n        case 2:\n          _a = _b.sent(), done = _a.done, value = _a.value;\n          if (value) {\n            prior = res;\n            res = new Uint8Array(prior.length + value.length);\n            res.set(prior);\n            res.set(value, prior.length);\n          }\n          isDone = done;\n          return [3 /*break*/, 1];\n        case 3:\n          return [2 /*return*/, res];\n      }\n    });\n  });\n}\nfunction readToBase64(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onloadend = function () {\n      var _a;\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : \"\";\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      var commaIndex = result.indexOf(\",\");\n      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = function () {\n      return reject(new Error(\"Read aborted\"));\n    };\n    reader.onerror = function () {\n      return reject(reader.error);\n    };\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["../../src/stream-collector.ts"],"names":[],"mappings":";AACA,SAAS,UAAU,QAAQ,8BAA8B;AAEzD;AACA,OAAO,IAAM,eAAe,GAAoB,SAAnC,eAAe,CAAqB,MAA6B,EAAA;EAC5E,IAAI,OAAO,IAAI,KAAK,UAAU,IAAI,MAAM,YAAY,IAAI,EAAE;IACxD,OAAO,WAAW,CAAC,MAAM,CAAC;EAC3B;EAED,OAAO,aAAa,CAAC,MAAwB,CAAC;AAChD,CAAC;AAED,SAAe,WAAW,CAAC,IAAU,EAAA;;;;;;UACpB,OAAA,CAAA,CAAA,CAAA,WAAM,YAAY,CAAC,IAAI,CAAC,CAAA;;UAAjC,MAAM,GAAG,EAAA,CAAA,IAAA,EAAwB;UACjC,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC;UACtC,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,UAAU,CAAC,WAAW,CAAC,CAAA;MAAC;;;AACpC;AAED,SAAe,aAAa,CAAC,MAAsB,EAAA;;;;;;UAC7C,GAAG,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC;UACrB,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;UAC7B,MAAM,GAAG,KAAK;;;eACX,CAAC,MAAM,EAAA,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;UACY,OAAA,CAAA,CAAA,CAAA,WAAM,MAAM,CAAC,IAAI,EAAE,CAAA;;UAArC,EAAA,GAAkB,EAAA,CAAA,IAAA,EAAmB,EAAnC,IAAI,GAAA,EAAA,CAAA,IAAA,EAAE,KAAK,GAAA,EAAA,CAAA,KAAA;UACnB,IAAI,KAAK,EAAE;YACH,KAAK,GAAG,GAAG;YACjB,GAAG,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YACjD,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;YACd,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC;UAC7B;UACD,MAAM,GAAG,IAAI;;;UAEf,OAAA,CAAA,CAAA,CAAA,YAAO,GAAG,CAAA;MAAC;;;AACZ;AAED,SAAS,YAAY,CAAC,IAAU,EAAA;EAC9B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;IACjC,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE;IAC/B,MAAM,CAAC,SAAS,GAAG,YAAA;;MACjB;MACA;MACA,IAAI,MAAM,CAAC,UAAU,KAAK,CAAC,EAAE;QAC3B,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;MACrD;MACD,IAAM,MAAM,GAAG,CAAA,EAAA,GAAC,MAAM,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAa;MAC9C;MACA;MACA,IAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;MACtC,IAAM,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM;MACnE,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IACD,MAAM,CAAC,OAAO,GAAG,YAAA;MAAM,OAAA,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAAjC,CAAiC;IACxD,MAAM,CAAC,OAAO,GAAG,YAAA;MAAM,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAApB,CAAoB;IAC3C;IACA,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ","sourcesContent":["import { StreamCollector } from \"@aws-sdk/types\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n\n//reference: https://snack.expo.io/r1JCSWRGU\nexport const streamCollector: StreamCollector = (stream: Blob | ReadableStream): Promise<Uint8Array> => {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream as ReadableStream);\n};\n\nasync function collectBlob(blob: Blob): Promise<Uint8Array> {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\n\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const { done, value } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\n\nfunction readToBase64(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (reader.result ?? \"\") as string;\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}