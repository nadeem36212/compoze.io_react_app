{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar isClockSkewed = function isClockSkewed(newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\nvar getSkewCorrectedDate = function getSkewCorrectedDate(systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n        var _d;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2 /*return*/, next(args)];\n              if (!(typeof options.signer === \"function\")) return [3 /*break*/, 2];\n              return [4 /*yield*/, options.signer()];\n            case 1:\n              _a = _e.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4 /*yield*/, signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n            case 4:\n              return [4 /*yield*/, _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n              return [2 /*return*/, output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function getAwsAuthPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) => new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = typeof options.signer === \"function\" ? await options.signer() : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}