import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import services from '../../service';

export interface Template {
  id: string;
  name: string;
  technology: string;
  attributes: any
}

export interface TemplateState {
  templates: Template[];
}

interface CreateTemplateThunkArgs {
  productName: string;
  name: string;
  technology: string;
  attributes: any;
}

interface GetTemplatesThunkArgs {
  productName: string;
}
interface DeleteTemplatesThunkArgs {
  productName: string;
  id: string;
}
const initialState: TemplateState = {
  templates: [],
};


export const createTemplate = createAsyncThunk(
  'templates/createtemplate',
  async ({ productName, name, technology, attributes }: CreateTemplateThunkArgs) => {
    return services.templateService.createTemplate(
      productName,
      name,
      technology,
      attributes
    )

  }
);
export const getTemplates = createAsyncThunk(
  'templates/get',
  async ({ productName }: GetTemplatesThunkArgs) => {
    return services.templateService.getTemplates(productName);
  }
);
export const deleteTemplate = createAsyncThunk(
  'templates/delete',
  async ({ productName, id }: DeleteTemplatesThunkArgs) => {
    return services.templateService.deleteTemplate(productName, id);
  }
);
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTemplates = (state: RootState) => state.templates.templates;

export const templateSlice = createSlice({
  name: 'template',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(createTemplate.fulfilled, (state, action) => {
      state.templates.push(action.payload);
    });
    builder.addCase(getTemplates.fulfilled, (state, action) => {
      state.templates = action.payload;
    }
    );
    builder.addCase(deleteTemplate.fulfilled, (state, action) => {
      state.templates = state.templates.filter(template => template.id !== action.meta.arg.id);
    }
    );
  },
});

export default templateSlice.reducer;
