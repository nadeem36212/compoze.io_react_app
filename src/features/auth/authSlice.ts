import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import services from "../../service";

export interface User {
    username: string;
    orgId?: string
}
export interface AuthState {
    user: User | undefined
    signUpFailureMessage: string | undefined
}
interface AuthThunkArg {
    email: string;
    password: string;
}

const initialState: AuthState = {
    user: undefined,
    signUpFailureMessage: undefined
};

export const signIn = createAsyncThunk(
    'auth/signIn',
    ({ email, password }: AuthThunkArg) =>
        services.authService.signIn(email, password)
);

export const signUp = createAsyncThunk(
    'auth/signUp',
    ({ email, password }: AuthThunkArg) =>
        services.authService.signUp(email, password)
);

export const checkSession = createAsyncThunk(
    'auth/checkSession',
    () =>
        services.authService.checkSession()
);
export const signOut = createAsyncThunk(
    'auth/signOut',
    () =>
        services.authService.logout()
);


export const selectUser = (state: RootState) => state.auth.user;
export const selectSignupFailedMessage = (state: RootState) => state.auth.signUpFailureMessage;

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    //

    extraReducers: (builder) => {
        builder
            .addCase(signUp.fulfilled, (state, action) => {
                state.user = action.payload;
                state.signUpFailureMessage = undefined;
            })
            .addCase(signUp.rejected, (state, action) => {
                state.signUpFailureMessage = action.error.message;
            })
            .addCase(signIn.fulfilled, (state, action) => {
                state.user = action.payload;
                state.signUpFailureMessage = undefined;
            })
            .addCase(checkSession.fulfilled, (state, action) => {
                state.user = action.payload;
                state.signUpFailureMessage = undefined;
            })
            .addCase(signOut.fulfilled, (state, action) => {
                state.user = undefined;
                state.signUpFailureMessage = undefined;
            });
    },

});


export default authSlice.reducer;