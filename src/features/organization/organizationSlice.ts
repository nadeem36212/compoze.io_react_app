import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import OrganizationPage from './Organization';
import { addUser, getOrganization } from './organizationApi';

interface CompozeUser {
  id: string
  userName: string
}

interface AddUserThunkArgs {
  orgId: string
  userName: string
}
export interface Organization {
  orgId: string;
  users: CompozeUser[]
}
export interface OrganizationState {
  organization: Organization | undefined
}

const initialState: OrganizationState = {
  organization: undefined
};


export const createUser = createAsyncThunk(
  'organization/addUser',
  async ({ orgId, userName }: AddUserThunkArgs) => {

    return addUser(orgId, userName);
  }
);

export const fetchOrganization = createAsyncThunk(
  'organization/fetchOrganization',
  async () => {
    const response = getOrganization()

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectOrgState = (state: RootState) => state.organization.organization;


export const organizationSlice = createSlice({
  name: 'organization',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUser.fulfilled, (state, action) => {
        state.organization = action.payload
      })
      .addCase(fetchOrganization.fulfilled, (state, action) => {

        state.organization = action.payload;
      })
    // .addCase(fetchAccounts.rejected, (state, action) => {
    //   state.accounts = []
    // })
  },


});


export default organizationSlice.reducer;
