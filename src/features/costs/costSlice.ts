import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getCosts } from './costAPI';

export interface AccountCost {
  accountId: string;
  nickName: string;
  periodStart: string;
  periodEnd: string;
  totalCost: string;
  forecastedAmount: string;
}

export interface AccountCostState {
  accounts: AccountCost[];
  failed: boolean;
  failureReason: string;
}

interface GetCostsThunkArgs {
  orgId: string;
}
const initialState: AccountCostState = {
  accounts: [],
  failed: false,
  failureReason: ''
};

export const fetchCosts = createAsyncThunk(
  'cost/fetchCosts',
  async ({ orgId }: GetCostsThunkArgs) => {
    
    const response = await getCosts(orgId);

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCost = (state: RootState) => state.cost.accounts;

export const costSlice = createSlice({
  name: 'cost',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchCosts.fulfilled, (state, action) => {
      state.accounts = action.payload;
    });
    builder.addCase(fetchCosts.rejected, (state, action) => {
      state.failed = true;
      state.failureReason = action.error.message!
    });
  },
});

export default costSlice.reducer;
