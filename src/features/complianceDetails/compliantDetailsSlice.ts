import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getComplianceByAccountID } from '../compliance/complianceAPI';
import { AccountComplianceSummary, fetchCompliance } from '../compliance/compliantSlice';
import { getAccountComplianceDetails, getResourceInventory } from './complianceDetailsAPI';
// import { fetchCount } from './counterAPI';

export interface ComplianceDetails {
  complianceStatus: string;
  ruleName: string;
  severity: string;
}

export interface ResourceSummary {
  /**
   * List of resource types
   */
  resources: ResourceCount[],
  /**
   * Total number of resources for the account
   */
  total: number
}
export interface ResourceCount {
  /**
   * <p>The resource type (for example,
   * 				<code>"AWS::EC2::Instance"</code>).</p>
   */
  resourceType: string;
  /**
   * <p>The number of resources.</p>
   */
  count: number;
}

export interface ComplianceState {
  complianceDetails: ComplianceDetails[] | undefined
  resourceInventory: ResourceSummary | undefined
  accountComplianceStatus: AccountComplianceSummary | undefined

}

interface GetAccountComplianceDetailsThunkArgs {
  id: string
}

const initialState: ComplianceState = {
  complianceDetails: undefined,
  resourceInventory: undefined,
  accountComplianceStatus: undefined,
};

export const fetchComplianceDetails = createAsyncThunk(
  'compliance/details/fetch',
  async ({ id }: GetAccountComplianceDetailsThunkArgs) => {
    const response = await getAccountComplianceDetails(id)
    return response
  }

);

export const fetchResourceInventory = createAsyncThunk(
  'compliance/details/resources/fetch',
  async ({ id }: GetAccountComplianceDetailsThunkArgs) => {
    const response = await getResourceInventory(id)
    return response
  }

);
export const fetchComplianceStatus = createAsyncThunk(
  'compliance/details/status/fetch',
  async ({ id }: GetAccountComplianceDetailsThunkArgs) => {
    const compliance: AccountComplianceSummary = await getComplianceByAccountID(id)
    // const response = await getCosts(orgId);

    // The value we return becomes the `fulfilled` action payload
    return compliance;
  }
);
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectComplianceDetails = (state: RootState) => state.complianceDetails.complianceDetails;
export const selectResourceInventory = (state: RootState) => state.complianceDetails.resourceInventory;
export const selectAccountComplianceStatus = (state: RootState) => state.complianceDetails.accountComplianceStatus;


export const complianceDetailSlice = createSlice({
  name: 'compliance/details',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchComplianceDetails.fulfilled, (state, action) => {
        state.complianceDetails = action.payload;
      })
      .addCase(fetchResourceInventory.fulfilled, (state, action) => {
        state.resourceInventory = action.payload;
      })
      .addCase(fetchComplianceStatus.fulfilled, (state, action) => {
        state.accountComplianceStatus = action.payload;
      });
  },

});


export default complianceDetailSlice.reducer;
