import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import services from '../../service';
// import { fetchCount } from './counterAPI';

export interface Component {
  id: string;
  accountId: string;
  name: string;
  region: string;
  technology: string;
  status: string;
  attributes: any;
  forecastedAmount: string;
  complianceIssues: string;
}

export interface ComponentState {
  component: Component | undefined;
}

interface GetComponentThunkArgs {
  productName: string;
  componentName: string;
}

interface CreateComponentThunkArgs {
  productName: string;
  name: string;
  technology: string;
  attributes: any
}


const initialState: ComponentState = {
  component: undefined,
};

export const fetchComponent = createAsyncThunk(
  'components/fetchComponent',
  async ({ productName, componentName }: GetComponentThunkArgs) => {

    return services.componentService.get(productName, componentName)
  }
);

export const deleteComponent = createAsyncThunk(
  'components/deleteComponent',
  async ({ productName, componentName }: GetComponentThunkArgs) => {

    return services.componentService.delete(productName, componentName)
  }
);

export const createComponent = createAsyncThunk(
  'components/createComponent',
  async ({ productName, name, technology, attributes }: CreateComponentThunkArgs) => {

    return services.componentService.create(productName, name, technology, attributes)
  }
)
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectComponent = (state: RootState) => state.component.component;

export const componentSlice = createSlice({
  name: 'component',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchComponent.fulfilled, (state, action) => {
      state.component = action.payload;
    });
    builder.addCase(createComponent.fulfilled, (state, action) => {
      state.component = action.payload;
    });
    builder.addCase(deleteComponent.fulfilled, (state, action) => {
      state.component = undefined;
    });
  },
});

export default componentSlice.reducer;
