import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getRuleDetails, triggerRuleEvaluation } from './ruleDetailsAPI';

export interface RuleDetails {
  resourceType: string;
  severity: string;
  severityDescription: string;
  description: string;
  mitigations: Mitigations[];
  resources: string[];
}
export interface Mitigations {
  type: 'Cloudformation' | 'AWS SAM' | 'Terraform' | 'CLI' | 'Console';
  description?: string
  document?: string
}

export interface RuleState {
  ruleDetails: RuleDetails | undefined
  apiFailure: boolean
  evaluationTriggered: boolean
}

interface GetRuleDetailsThunkArgs {
  name: string
  accountId: string
}

const initialState: RuleState = {
  ruleDetails: undefined,
  apiFailure: false,
  evaluationTriggered: false
};

export const fetchRuleDetails = createAsyncThunk(
  'rules/details/fetch',
  async ({ name, accountId }: GetRuleDetailsThunkArgs) => {
    return await getRuleDetails(name, accountId)
  }

);

export const evaluateRule = createAsyncThunk(
  'rules/details/evaluate',
  async ({ name, accountId }: GetRuleDetailsThunkArgs) => {
    return await triggerRuleEvaluation(name, accountId)
  }

);

export const selectRuleDetailsStatus = (state: RootState) => state.rule.ruleDetails
export const selectAPIError = (state: RootState) => state.rule.apiFailure
export const selectEvaluationTriggered = (state: RootState) => state.rule.evaluationTriggered

export const ruleDetailSlice = createSlice({
  name: 'rules/details',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchRuleDetails.fulfilled, (state, action) => {
        state.ruleDetails = action.payload;
        state.apiFailure = false;
      })
      .addCase(fetchRuleDetails.rejected, (state, action) => {
        state.apiFailure = true;
      })
      .addCase(evaluateRule.fulfilled, (state, action) => {
        state.evaluationTriggered = true;
      })
      .addCase(evaluateRule.rejected, (state, action) => {
        state.apiFailure = true;
      })
  },

});


export default ruleDetailSlice.reducer;
